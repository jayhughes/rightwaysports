/* Simple JavaScript Inheritance
 * By John Resig http://ejohn.org/
 * MIT Licensed.
 */
// Inspired by base2 and Prototype
function HighlightedDate(date, desc, style) {
    "use strict";
    this.date = date, this.desc = desc, this.style = style;
}

!function() {
    var initializing = !1;
    // The base JQClass implementation (does nothing)
    window.JQClass = function() {}, // Collection of derived classes
    JQClass.classes = {}, // Create a new JQClass that inherits from this class
    JQClass.extend = function extender(prop) {
        // The dummy class constructor
        function JQClass() {
            // All construction is actually done in the init method
            !initializing && this._init && this._init.apply(this, arguments);
        }
        var base = this.prototype;
        // Instantiate a base class (but only create the instance,
        // don't run the init constructor)
        initializing = !0;
        var prototype = new this();
        initializing = !1;
        // Copy the properties over onto the new prototype
        for (var name in prop) // Check if we're overwriting an existing function
        prototype[name] = "function" == typeof prop[name] && "function" == typeof base[name] ? function(name, fn) {
            return function() {
                var __super = this._super;
                // Add a new ._super() method that is the same method
                // but on the super-class
                this._super = function(args) {
                    return base[name].apply(this, args || []);
                };
                var ret = fn.apply(this, arguments);
                // The method only need to be bound temporarily, so we
                // remove it when we're done executing
                return this._super = __super, ret;
            };
        }(name, prop[name]) : prop[name];
        // Populate our constructed prototype object
        // Enforce the constructor to be what we expect
        // And make this class extendable
        return JQClass.prototype = prototype, JQClass.prototype.constructor = JQClass, JQClass.extend = extender, 
        JQClass;
    };
}(), function($) {
    /** Convert names from hyphenated to camel-case.
		@private
		@param value {string} The original hyphenated name.
		@return {string} The camel-case version. */
    function camelCase(name) {
        return name.replace(/-([a-z])/g, function(match, group) {
            return group.toUpperCase();
        });
    }
    // Ensure $, encapsulate
    /** Abstract base class for collection plugins v1.0.1.
		Written by Keith Wood (kbwood{at}iinet.com.au) December 2013.
		Licensed under the MIT (http://keith-wood.name/licence.html) license.
		@module $.JQPlugin
		@abstract */
    JQClass.classes.JQPlugin = JQClass.extend({
        /** Name to identify this plugin.
			@example name: 'tabs' */
        name: "plugin",
        /** Default options for instances of this plugin (default: {}).
			@example defaultOptions: {
 	selectedClass: 'selected',
 	triggers: 'click'
 } */
        defaultOptions: {},
        /** Options dependent on the locale.
			Indexed by language and (optional) country code, with '' denoting the default language (English/US).
			@example regionalOptions: {
	'': {
		greeting: 'Hi'
	}
 } */
        regionalOptions: {},
        /** Names of getter methods - those that can't be chained (default: []).
			@example _getters: ['activeTab'] */
        _getters: [],
        /** Retrieve a marker class for affected elements.
			@private
			@return {string} The marker class. */
        _getMarker: function() {
            return "is-" + this.name;
        },
        /** Initialise the plugin.
			Create the jQuery bridge - plugin name <code>xyz</code>
			produces <code>$.xyz</code> and <code>$.fn.xyz</code>. */
        _init: function() {
            // Apply default localisations
            $.extend(this.defaultOptions, this.regionalOptions && this.regionalOptions[""] || {});
            // Camel-case the name
            var jqName = camelCase(this.name);
            // Expose jQuery singleton manager
            $[jqName] = this, // Expose jQuery collection plugin
            $.fn[jqName] = function(options) {
                var otherArgs = Array.prototype.slice.call(arguments, 1);
                return $[jqName]._isNotChained(options, otherArgs) ? $[jqName][options].apply($[jqName], [ this[0] ].concat(otherArgs)) : this.each(function() {
                    if ("string" == typeof options) {
                        if ("_" === options[0] || !$[jqName][options]) throw "Unknown method: " + options;
                        $[jqName][options].apply($[jqName], [ this ].concat(otherArgs));
                    } else $[jqName]._attach(this, options);
                });
            };
        },
        /** Set default values for all subsequent instances.
			@param options {object} The new default options.
			@example $.plugin.setDefauls({name: value}) */
        setDefaults: function(options) {
            $.extend(this.defaultOptions, options || {});
        },
        /** Determine whether a method is a getter and doesn't permit chaining.
			@private
			@param name {string} The method name.
			@param otherArgs {any[]} Any other arguments for the method.
			@return {boolean} True if this method is a getter, false otherwise. */
        _isNotChained: function(name, otherArgs) {
            return "option" === name && (0 === otherArgs.length || 1 === otherArgs.length && "string" == typeof otherArgs[0]) ? !0 : $.inArray(name, this._getters) > -1;
        },
        /** Initialise an element. Called internally only.
			Adds an instance object as data named for the plugin.
			@param elem {Element} The element to enhance.
			@param options {object} Overriding settings. */
        _attach: function(elem, options) {
            if (elem = $(elem), !elem.hasClass(this._getMarker())) {
                elem.addClass(this._getMarker()), options = $.extend({}, this.defaultOptions, this._getMetadata(elem), options || {});
                var inst = $.extend({
                    name: this.name,
                    elem: elem,
                    options: options
                }, this._instSettings(elem, options));
                elem.data(this.name, inst), // Save instance against element
                this._postAttach(elem, inst), this.option(elem, options);
            }
        },
        /** Retrieve additional instance settings.
			Override this in a sub-class to provide extra settings.
			@param elem {jQuery} The current jQuery element.
			@param options {object} The instance options.
			@return {object} Any extra instance values.
			@example _instSettings: function(elem, options) {
 	return {nav: elem.find(options.navSelector)};
 } */
        _instSettings: function(elem, options) {
            return {};
        },
        /** Plugin specific post initialisation.
			Override this in a sub-class to perform extra activities.
			@param elem {jQuery} The current jQuery element.
			@param inst {object} The instance settings.
			@example _postAttach: function(elem, inst) {
 	elem.on('click.' + this.name, function() {
 		...
 	});
 } */
        _postAttach: function(elem, inst) {},
        /** Retrieve metadata configuration from the element.
			Metadata is specified as an attribute:
			<code>data-&lt;plugin name>="&lt;setting name>: '&lt;value>', ..."</code>.
			Dates should be specified as strings in this format: 'new Date(y, m-1, d)'.
			@private
			@param elem {jQuery} The source element.
			@return {object} The inline configuration or {}. */
        _getMetadata: function(elem) {
            try {
                var data = elem.data(this.name.toLowerCase()) || "";
                data = data.replace(/'/g, '"'), data = data.replace(/([a-zA-Z0-9]+):/g, function(match, group, i) {
                    var count = data.substring(0, i).match(/"/g);
                    // Handle embedded ':'
                    return count && count.length % 2 !== 0 ? group + ":" : '"' + group + '":';
                }), data = $.parseJSON("{" + data + "}");
                for (var name in data) {
                    // Convert dates
                    var value = data[name];
                    "string" == typeof value && value.match(/^new Date\((.*)\)$/) && (data[name] = eval(value));
                }
                return data;
            } catch (e) {
                return {};
            }
        },
        /** Retrieve the instance data for element.
			@param elem {Element} The source element.
			@return {object} The instance data or {}. */
        _getInst: function(elem) {
            return $(elem).data(this.name) || {};
        },
        /** Retrieve or reconfigure the settings for a plugin.
			@param elem {Element} The source element.
			@param name {object|string} The collection of new option values or the name of a single option.
			@param [value] {any} The value for a single named option.
			@return {any|object} If retrieving a single value or all options.
			@example $(selector).plugin('option', 'name', value)
 $(selector).plugin('option', {name: value, ...})
 var value = $(selector).plugin('option', 'name')
 var options = $(selector).plugin('option') */
        option: function(elem, name, value) {
            elem = $(elem);
            var inst = elem.data(this.name);
            if (!name || "string" == typeof name && null == value) {
                var options = (inst || {}).options;
                return options && name ? options[name] : options;
            }
            if (elem.hasClass(this._getMarker())) {
                var options = name || {};
                "string" == typeof name && (options = {}, options[name] = value), this._optionsChanged(elem, inst, options), 
                $.extend(inst.options, options);
            }
        },
        /** Plugin specific options processing.
			Old value available in <code>inst.options[name]</code>, new value in <code>options[name]</code>.
			Override this in a sub-class to perform extra activities.
			@param elem {jQuery} The current jQuery element.
			@param inst {object} The instance settings.
			@param options {object} The new options.
			@example _optionsChanged: function(elem, inst, options) {
 	if (options.name != inst.options.name) {
 		elem.removeClass(inst.options.name).addClass(options.name);
 	}
 } */
        _optionsChanged: function(elem, inst, options) {},
        /** Remove all trace of the plugin.
			Override <code>_preDestroy</code> for plugin-specific processing.
			@param elem {Element} The source element.
			@example $(selector).plugin('destroy') */
        destroy: function(elem) {
            elem = $(elem), elem.hasClass(this._getMarker()) && (this._preDestroy(elem, this._getInst(elem)), 
            elem.removeData(this.name).removeClass(this._getMarker()));
        },
        /** Plugin specific pre destruction.
			Override this in a sub-class to perform extra activities and undo everything that was
			done in the <code>_postAttach</code> or <code>_optionsChanged</code> functions.
			@param elem {jQuery} The current jQuery element.
			@param inst {object} The instance settings.
			@example _preDestroy: function(elem, inst) {
 	elem.off('.' + this.name);
 } */
        _preDestroy: function(elem, inst) {}
    }), /** Expose the plugin base.
		@namespace "$.JQPlugin" */
    $.JQPlugin = {
        /** Create a new collection plugin.
			@memberof "$.JQPlugin"
			@param [superClass='JQPlugin'] {string} The name of the parent class to inherit from.
			@param overrides {object} The property/function overrides for the new class.
			@example $.JQPlugin.createPlugin({
 	name: 'tabs',
 	defaultOptions: {selectedClass: 'selected'},
 	_initSettings: function(elem, options) { return {...}; },
 	_postAttach: function(elem, inst) { ... }
 }); */
        createPlugin: function(superClass, overrides) {
            "object" == typeof superClass && (overrides = superClass, superClass = "JQPlugin"), 
            superClass = camelCase(superClass);
            var className = camelCase(overrides.name);
            JQClass.classes[className] = JQClass.classes[superClass].extend(overrides), new JQClass.classes[className]();
        }
    };
}(jQuery), /* ----------------------------------------------------------------------------
// Ezdz [izy-dizy]
// A jQuery plugin to turn any standard input type file into a nice 
// drag & drop zone with validators and previews. 
// Licensed under the MIT license.
// http://github.com/jaysalvat/ezdz/
// ----------------------------------------------------------------------------
// Copyright (C) 2013 Jay Salvat
// http://jaysalvat.com/
// --------------------------------------------------------------------------*/
function($) {
    // Default settings
    var defaults = {
        className: "",
        text: "Drop a file",
        previewImage: !0,
        value: null,
        classes: {
            main: "ezdz-dropzone",
            enter: "ezdz-enter",
            reject: "ezdz-reject",
            accept: "ezdz-accept"
        },
        validators: {
            maxSize: null,
            width: null,
            maxWidth: null,
            minWidth: null,
            height: null,
            maxHeight: null,
            minHeight: null
        },
        init: function() {},
        enter: function() {},
        leave: function() {},
        reject: function() {},
        accept: function() {},
        format: function(filename) {
            return filename;
        }
    };
    $.ezdz = function(element, options) {
        var self = this, settings = $.extend(!0, {}, defaults, $.ezdz.defaults, options), $input = $(element);
        if (!$input.is('input[type="file"]')) return void $.error("Ezdz error - Must be apply to inputs type file.");
        // Stop if not File Api compatible
        if (window.File && window.FileList && window.FileReader) {
            // Public: Ajoute un fichier Ã  la preview
            self.preview = function(path) {
                var basename = path.replace(/\\/g, "/").replace(/.*\//, ""), formatted = settings.format(basename), $container = $input.closest("div"), img = new Image();
                img.src = path, // Is an image
                img.onload = function() {
                    $container.find("div").html(img);
                }, // Is not an image
                img.onerror = function() {
                    $container.find("div").html("<span>" + formatted + "</span>");
                }, $container.addClass(settings.classes.accept);
            }, // Public: Destroy la ezdz
            self.destroy = function() {
                $input.closest("div").replaceWith($input), $input.off("*.ezdz"), $input.data("ezdz", "");
            }, // Public: Extends settings
            self.options = function(values) {
                $.extend(!0, settings, values);
            };
            // private: Init the plugin
            var init = function() {
                var $ezdz = $('<div class="' + settings.classes.main + '" />');
                // Drag and drop events sur ezdz
                $ezdz.on("dragover.ezdz", function(e) {
                    $(this).addClass(settings.classes.enter), $.isFunction(settings.enter) && settings.enter.apply(this);
                }), $ezdz.on("dragleave.ezdz", function(e) {
                    $(this).removeClass(settings.classes.enter), $.isFunction(settings.leaved) && settings.leaved.apply(this);
                }), // Lorsqu'un fichier est droppÃ© ou ajoutÃ©
                $input.on("change.ezdz", function(e) {
                    var $input = $(this), $ezdz = $input.closest("div"), file = this.files[0];
                    // No file, so user has cancelled
                    if (file) {
                        // Info about the dropped or selected file
                        var basename = file.name.replace(/\\/g, "/").replace(/.*\//, ""), extension = file.name.split(".").pop(), formatted = settings.format(basename);
                        file.extension = extension;
                        // Teste si le type de fichier est acceptÃ©
                        var allowed = $input.attr("accept"), accepted = !1;
                        // Check the accepted MimeTypes of the input file
                        if (valid = !0, errors = {
                            mimeType: !1,
                            maxSize: !1,
                            width: !1,
                            minWidth: !1,
                            maxWidth: !1,
                            height: !1,
                            minHeight: !1,
                            maxHeight: !1
                        }, allowed) {
                            var types = allowed.split(/[,|]/);
                            $.each(types, function(i, type) {
                                if (type = $.trim(type), file.type == type) return accepted = !0, !1;
                                // Mime Type avec wildcards ex. image/*
                                if (type.indexOf("/*") !== !1) {
                                    var a = type.replace("/*", ""), b = file.type.replace(/(\/.*)$/g, "");
                                    if (a === b) return accepted = !0, !1;
                                }
                            }), accepted === !1 && (errors.mimeType = !0);
                        } else accepted = !0;
                        // If the Mime Type is not accepted
                        if (// Clean the accepted/rejected classes
                        $ezdz.removeClass(settings.classes.reject).removeClass(settings.classes.accept), 
                        accepted !== !0) // trigger the reject callback
                        return $input.val(""), $ezdz.addClass(settings.classes.reject), $.isFunction(settings.reject) && settings.reject.apply($ezdz, [ file, errors ]), 
                        !1;
                        // Read the added file
                        var reader = new FileReader(file), img = new Image();
                        reader.readAsDataURL(file), reader.onload = function(e) {
                            file.data = e.target.result, img.src = file.data;
                            var isImage = img.width && img.height;
                            // Validator
                            settings.validators.maxSize && file.size > settings.validators.maxSize && (valid = !1, 
                            errors.maxSize = !0), isImage && (file.width = img.width, file.height = img.height, 
                            settings.validators.width && img.width != settings.validators.width && (valid = !1, 
                            errors.width = !0), settings.validators.maxWidth && img.width > settings.validators.maxWidth && (valid = !1, 
                            errors.maxWidth = !0), settings.validators.minWidth && img.width < settings.validators.minWidth && (valid = !1, 
                            errors.minWidth = !0), settings.validators.height && img.height != settings.validators.height && (valid = !1, 
                            errors.height = !0), settings.validators.maxHeight && img.height > settings.validators.maxHeight && (valid = !1, 
                            errors.maxHeight = !0), settings.validators.minHeight && img.height < settings.validators.minHeight && (valid = !1, 
                            errors.minHeight = !0)), // The file is validated, so added to input
                            valid === !0 ? ($ezdz.find("img").remove(), isImage && settings.previewImage === !0 ? $ezdz.find("div").html($(img).fadeIn()) : $ezdz.find("div").html("<span>" + formatted + "</span>"), 
                            $ezdz.addClass(settings.classes.accept), // Trigger the accept callback
                            $.isFunction(settings.accept) && settings.accept.apply($ezdz, [ file ])) : ($input.val(""), 
                            $ezdz.addClass(settings.classes.reject), // trigger the reject callback
                            $.isFunction(settings.reject) && settings.reject.apply($ezdz, [ file, errors ]));
                        };
                    }
                }), // Build the ezdz
                $ezdz.addClass(settings.className), $input.wrap($ezdz), $input.before("<div>" + settings.text + "</div>"), 
                // Focus and blur
                $input.on("focus.ezdz", function() {
                    $(this).closest("div").addClass(settings.classes.focus);
                }), $input.on("blur.ezdz", function() {
                    $(this).closest("div").removeClass(settings.classes.focus);
                });
                // Preview a file at start if it's defined
                var value = settings.value || $input.data("value");
                value && self.preview(value), // trigger the init callback
                $.isFunction(settings.init) && settings.init.apply($input.closest("div"), [ value ]);
            };
            init();
        }
    }, $.fn.ezdz = function(options) {
        var args = arguments;
        return this.each(function() {
            var plugin = $(this).data("ezdz");
            return plugin ? plugin[options] ? plugin[options].apply(this, Array.prototype.slice.call(args, 1)) : void $.error("Ezdz error - Method " + options + " does not exist.") : $(this).data("ezdz", new $.ezdz(this, options));
        });
    }, $.ezdz.defaults = defaults;
}(jQuery), /**
 * Featherlight - ultra slim jQuery lightbox
 * Version 1.3.1 - http://noelboss.github.io/featherlight/
 *
 * Copyright 2015, Noël Raoul Bossart (http://www.noelboss.com)
 * MIT Licensed.
**/
function($) {
    "use strict";
    /* Featherlight is exported as $.featherlight.
	   It is a function used to open a featherlight lightbox.

	   [tech]
	   Featherlight uses prototype inheritance.
	   Each opened lightbox will have a corresponding object.
	   That object may have some attributes that override the
	   prototype's.
	   Extensions created with Featherlight.extend will have their
	   own prototype that inherits from Featherlight's prototype,
	   thus attributes can be overriden either at the object level,
	   or at the extension level.
	   To create callbacks that chain themselves instead of overriding,
	   use chainCallbacks.
	   For those familiar with CoffeeScript, this correspond to
	   Featherlight being a class and the Gallery being a class
	   extending Featherlight.
	   The chainCallbacks is used since we don't have access to
	   CoffeeScript's `super`.
	*/
    function Featherlight($content, config) {
        if (!(this instanceof Featherlight)) {
            var fl = new Featherlight($content, config);
            return fl.open(), fl;
        }
        /* called with new */
        this.id = Featherlight.id++, this.setup($content, config), this.chainCallbacks(Featherlight._callbackChain);
    }
    if ("undefined" == typeof $) return void ("console" in window && window.console.info("Too much lightness, Featherlight needs jQuery."));
    var opened = [], pruneOpened = function(remove) {
        return opened = $.grep(opened, function(fl) {
            return fl !== remove && fl.$instance.closest("body").length > 0;
        });
    }, structure = function(obj, prefix) {
        var result = {}, regex = new RegExp("^" + prefix + "([A-Z])(.*)");
        for (var key in obj) {
            var match = key.match(regex);
            if (match) {
                var dasherized = (match[1] + match[2].replace(/([A-Z])/g, "-$1")).toLowerCase();
                result[dasherized] = obj[key];
            }
        }
        return result;
    }, eventMap = {
        keyup: "onKeyUp",
        resize: "onResize"
    }, globalEventHandler = function(event) {
        $.each(Featherlight.opened().reverse(), function() {
            return event.isDefaultPrevented() || !1 !== this[eventMap[event.type]](event) ? void 0 : (event.preventDefault(), 
            event.stopPropagation(), !1);
        });
    }, toggleGlobalEvents = function(set) {
        if (set !== Featherlight._globalHandlerInstalled) {
            Featherlight._globalHandlerInstalled = set;
            var events = $.map(eventMap, function(_, name) {
                return name + "." + Featherlight.prototype.namespace;
            }).join(" ");
            $(window)[set ? "on" : "off"](events, globalEventHandler);
        }
    };
    Featherlight.prototype = {
        constructor: Featherlight,
        /*** defaults ***/
        /* extend featherlight with defaults and methods */
        namespace: "featherlight",
        /* Name of the events and css class prefix */
        targetAttr: "data-featherlight",
        /* Attribute of the triggered element that contains the selector to the lightbox content */
        variant: null,
        /* Class that will be added to change look of the lightbox */
        resetCss: !1,
        /* Reset all css */
        background: null,
        /* Custom DOM for the background, wrapper and the closebutton */
        openTrigger: "click",
        /* Event that triggers the lightbox */
        closeTrigger: "click",
        /* Event that triggers the closing of the lightbox */
        filter: null,
        /* Selector to filter events. Think $(...).on('click', filter, eventHandler) */
        root: "body",
        /* Where to append featherlights */
        openSpeed: 250,
        /* Duration of opening animation */
        closeSpeed: 250,
        /* Duration of closing animation */
        closeOnClick: "background",
        /* Close lightbox on click ('background', 'anywhere' or false) */
        closeOnEsc: !0,
        /* Close lightbox when pressing esc */
        closeIcon: "&#10005;",
        /* Close icon */
        loading: "",
        /* Content to show while initial content is loading */
        persist: !1,
        /* If set, the content persist and will be shown again when opened again. 'shared' is a special value when binding multiple elements for them to share the same content */
        otherClose: null,
        /* Selector for alternate close buttons (e.g. "a.close") */
        beforeOpen: $.noop,
        /* Called before open. can return false to prevent opening of lightbox. Gets event as parameter, this contains all data */
        beforeContent: $.noop,
        /* Called when content is loaded. Gets event as parameter, this contains all data */
        beforeClose: $.noop,
        /* Called before close. can return false to prevent opening of lightbox. Gets event as parameter, this contains all data */
        afterOpen: $.noop,
        /* Called after open. Gets event as parameter, this contains all data */
        afterContent: $.noop,
        /* Called after content is ready and has been set. Gets event as parameter, this contains all data */
        afterClose: $.noop,
        /* Called after close. Gets event as parameter, this contains all data */
        onKeyUp: $.noop,
        /* Called on key down for the frontmost featherlight */
        onResize: $.noop,
        /* Called after new content and when a window is resized */
        type: null,
        /* Specify type of lightbox. If unset, it will check for the targetAttrs value. */
        contentFilters: [ "jquery", "image", "html", "ajax", "iframe", "text" ],
        /* List of content filters to use to determine the content */
        /*** methods ***/
        /* setup iterates over a single instance of featherlight and prepares the background and binds the events */
        setup: function(target, config) {
            /* all arguments are optional */
            "object" != typeof target || target instanceof $ != !1 || config || (config = target, 
            target = void 0);
            var self = $.extend(this, config, {
                target: target
            }), css = self.resetCss ? self.namespace + "-reset" : self.namespace, /* by adding -reset to the classname, we reset all the default css */
            $background = $(self.background || [ '<div class="' + css + "-loading " + css + '">', '<div class="' + css + '-content">', '<span class="' + css + "-close-icon " + self.namespace + '-close">', self.closeIcon, "</span>", '<div class="' + self.namespace + '-inner">' + self.loading + "</div>", "</div>", "</div>" ].join("")), closeButtonSelector = "." + self.namespace + "-close" + (self.otherClose ? "," + self.otherClose : "");
            /* clone DOM for the background, wrapper and the close button */
            /* close when click on background/anywhere/null or closebox */
            return self.$instance = $background.clone().addClass(self.variant), self.$instance.on(self.closeTrigger + "." + self.namespace, function(event) {
                var $target = $(event.target);
                ("background" === self.closeOnClick && $target.is("." + self.namespace) || "anywhere" === self.closeOnClick || $target.closest(closeButtonSelector).length) && (event.preventDefault(), 
                self.close());
            }), this;
        },
        /* this method prepares the content and converts it into a jQuery object or a promise */
        getContent: function() {
            if (this.persist !== !1 && this.$content) return this.$content;
            var self = this, filters = this.constructor.contentFilters, readTargetAttr = function(name) {
                return self.$currentTarget && self.$currentTarget.attr(name);
            }, targetValue = readTargetAttr(self.targetAttr), data = self.target || targetValue || "", filter = filters[self.type];
            /* check explicity type & content like {image: 'photo.jpg'} */
            if (/* check explicit type like {type: 'image'} */
            /* check explicit type like data-featherlight="image" */
            !filter && data in filters && (filter = filters[data], data = self.target && targetValue), 
            data = data || readTargetAttr("href") || "", !filter) for (var filterName in filters) self[filterName] && (filter = filters[filterName], 
            data = self[filterName]);
            /* otherwise it's implicit, run checks */
            if (!filter) {
                var target = data;
                if (data = null, $.each(self.contentFilters, function() {
                    return filter = filters[this], filter.test && (data = filter.test(target)), !data && filter.regex && target.match && target.match(filter.regex) && (data = target), 
                    !data;
                }), !data) return "console" in window && window.console.error("Featherlight: no content filter found " + (target ? ' for "' + target + '"' : " (no target specified)")), 
                !1;
            }
            /* Process it */
            return filter.process.call(self, data);
        },
        /* sets the content of $instance to $content */
        setContent: function($content) {
            var self = this;
            /* we need a special class for the iframe */
            /* replace content by appending to existing one before it is removed
			   this insures that featherlight-inner remain at the same relative
				 position to any other items added to featherlight-content */
            return ($content.is("iframe") || $("iframe", $content).length > 0) && self.$instance.addClass(self.namespace + "-iframe"), 
            self.$instance.removeClass(self.namespace + "-loading"), self.$instance.find("." + self.namespace + "-inner").not($content).slice(1).remove().end().replaceWith($.contains(self.$instance[0], $content[0]) ? "" : $content), 
            self.$content = $content.addClass(self.namespace + "-inner"), self;
        },
        /* opens the lightbox. "this" contains $instance with the lightbox, and with the config.
			Returns a promise that is resolved after is successfully opened. */
        open: function(event) {
            var self = this;
            if (self.$instance.hide().appendTo(self.root), !(event && event.isDefaultPrevented() || self.beforeOpen(event) === !1)) {
                event && event.preventDefault();
                var $content = self.getContent();
                if ($content) /* Set content and show */
                return opened.push(self), toggleGlobalEvents(!0), self.$instance.fadeIn(self.openSpeed), 
                self.beforeContent(event), $.when($content).always(function($content) {
                    self.setContent($content), self.afterContent(event);
                }).then(self.$instance.promise()).done(function() {
                    self.afterOpen(event);
                });
            }
            return self.$instance.detach(), $.Deferred().reject().promise();
        },
        /* closes the lightbox. "this" contains $instance with the lightbox, and with the config
			returns a promise, resolved after the lightbox is successfully closed. */
        close: function(event) {
            var self = this, deferred = $.Deferred();
            return self.beforeClose(event) === !1 ? deferred.reject() : (0 === pruneOpened(self).length && toggleGlobalEvents(!1), 
            self.$instance.fadeOut(self.closeSpeed, function() {
                self.$instance.detach(), self.afterClose(event), deferred.resolve();
            })), deferred.promise();
        },
        /* Utility function to chain callbacks
		   [Warning: guru-level]
		   Used be extensions that want to let users specify callbacks but
		   also need themselves to use the callbacks.
		   The argument 'chain' has callback names as keys and function(super, event)
		   as values. That function is meant to call `super` at some point.
		*/
        chainCallbacks: function(chain) {
            for (var name in chain) this[name] = $.proxy(chain[name], this, $.proxy(this[name], this));
        }
    }, $.extend(Featherlight, {
        id: 0,
        /* Used to id single featherlight instances */
        autoBind: "[data-featherlight]",
        /* Will automatically bind elements matching this selector. Clear or set before onReady */
        defaults: Featherlight.prototype,
        /* You can access and override all defaults using $.featherlight.defaults, which is just a synonym for $.featherlight.prototype */
        /* Contains the logic to determine content */
        contentFilters: {
            jquery: {
                regex: /^[#.]\w/,
                /* Anything that starts with a class name or identifiers */
                test: function(elem) {
                    return elem instanceof $ && elem;
                },
                process: function(elem) {
                    return this.persist !== !1 ? $(elem) : $(elem).clone(!0);
                }
            },
            image: {
                regex: /\.(png|jpg|jpeg|gif|tiff|bmp)(\?\S*)?$/i,
                process: function(url) {
                    var self = this, deferred = $.Deferred(), img = new Image(), $img = $('<img src="' + url + '" alt="" class="' + self.namespace + '-image" />');
                    return img.onload = function() {
                        /* Store naturalWidth & height for IE8 */
                        $img.naturalWidth = img.width, $img.naturalHeight = img.height, deferred.resolve($img);
                    }, img.onerror = function() {
                        deferred.reject($img);
                    }, img.src = url, deferred.promise();
                }
            },
            html: {
                regex: /^\s*<[\w!][^<]*>/,
                /* Anything that starts with some kind of valid tag */
                process: function(html) {
                    return $(html);
                }
            },
            ajax: {
                regex: /./,
                /* At this point, any content is assumed to be an URL */
                process: function(url) {
                    var deferred = $.Deferred(), $container = $("<div></div>").load(url, function(response, status) {
                        "error" !== status && deferred.resolve($container.contents()), deferred.fail();
                    });
                    return deferred.promise();
                }
            },
            iframe: {
                process: function(url) {
                    var deferred = new $.Deferred(), $content = $("<iframe/>").hide().attr("src", url).css(structure(this, "iframe")).on("load", function() {
                        deferred.resolve($content.show());
                    }).appendTo(this.$instance.find("." + this.namespace + "-content"));
                    return deferred.promise();
                }
            },
            text: {
                process: function(text) {
                    return $("<div>", {
                        text: text
                    });
                }
            }
        },
        functionAttributes: [ "beforeOpen", "afterOpen", "beforeContent", "afterContent", "beforeClose", "afterClose" ],
        /*** class methods ***/
        /* read element's attributes starting with data-featherlight- */
        readElementConfig: function(element, namespace) {
            var Klass = this, regexp = new RegExp("^data-" + namespace + "-(.*)"), config = {};
            return element && element.attributes && $.each(element.attributes, function() {
                var match = this.name.match(regexp);
                if (match) {
                    var val = this.value, name = $.camelCase(match[1]);
                    if ($.inArray(name, Klass.functionAttributes) >= 0) /* jshint -W054 */
                    val = new Function(val); else try {
                        val = $.parseJSON(val);
                    } catch (e) {}
                    config[name] = val;
                }
            }), config;
        },
        /* Used to create a Featherlight extension
		   [Warning: guru-level]
		   Creates the extension's prototype that in turn
		   inherits Featherlight's prototype.
		   Could be used to extend an extension too...
		   This is pretty high level wizardy, it comes pretty much straight
		   from CoffeeScript and won't teach you anything about Featherlight
		   as it's not really specific to this library.
		   My suggestion: move along and keep your sanity.
		*/
        extend: function(child, defaults) {
            /* Setup class hierarchy, adapted from CoffeeScript */
            var Ctor = function() {
                this.constructor = child;
            };
            /* Copy class methods & attributes */
            return Ctor.prototype = this.prototype, child.prototype = new Ctor(), child.__super__ = this.prototype, 
            $.extend(child, this, defaults), child.defaults = child.prototype, child;
        },
        attach: function($source, $content, config) {
            var Klass = this;
            "object" != typeof $content || $content instanceof $ != !1 || config || (config = $content, 
            $content = void 0), /* make a copy */
            config = $.extend({}, config);
            /* Only for openTrigger and namespace... */
            var sharedPersist, namespace = config.namespace || Klass.defaults.namespace, tempConfig = $.extend({}, Klass.defaults, Klass.readElementConfig($source[0], namespace), config);
            return $source.on(tempConfig.openTrigger + "." + tempConfig.namespace, tempConfig.filter, function(event) {
                /* ... since we might as well compute the config on the actual target */
                var elemConfig = $.extend({
                    $source: $source,
                    $currentTarget: $(this)
                }, Klass.readElementConfig($source[0], tempConfig.namespace), Klass.readElementConfig(this, tempConfig.namespace), config), fl = sharedPersist || $(this).data("featherlight-persisted") || new Klass($content, elemConfig);
                "shared" === fl.persist ? sharedPersist = fl : fl.persist !== !1 && $(this).data("featherlight-persisted", fl), 
                fl.open(event);
            }), $source;
        },
        current: function() {
            var all = this.opened();
            return all[all.length - 1] || null;
        },
        opened: function() {
            var klass = this;
            return pruneOpened(), $.grep(opened, function(fl) {
                return fl instanceof klass;
            });
        },
        close: function() {
            var cur = this.current();
            return cur ? cur.close() : void 0;
        },
        /* Does the auto binding on startup.
		   Meant only to be used by Featherlight and its extensions
		*/
        _onReady: function() {
            var Klass = this;
            Klass.autoBind && (/* First, bind click on document, so it will work for items added dynamically */
            Klass.attach($(document), {
                filter: Klass.autoBind
            }), /* Auto bound elements with attr-featherlight-filter won't work
				   (since we already used it to bind on document), so bind these
				   directly. We can't easily support dynamically added element with filters */
            $(Klass.autoBind).filter("[data-featherlight-filter]").each(function() {
                Klass.attach($(this));
            }));
        },
        /* Featherlight uses the onKeyUp callback to intercept the escape key.
		   Private to Featherlight.
		*/
        _callbackChain: {
            onKeyUp: function(_super, event) {
                return 27 === event.keyCode ? (this.closeOnEsc && this.$instance.find("." + this.namespace + "-close:first").click(), 
                !1) : _super(event);
            },
            onResize: function(_super, event) {
                if (this.$content.naturalWidth) {
                    var w = this.$content.naturalWidth, h = this.$content.naturalHeight;
                    /* Reset apparent image size first so container grows */
                    this.$content.css("width", "").css("height", "");
                    /* Calculate the worst ratio so that dimensions fit */
                    var ratio = Math.max(w / parseInt(this.$content.parent().css("width"), 10), h / parseInt(this.$content.parent().css("height"), 10));
                    /* Resize content */
                    ratio > 1 && this.$content.css("width", "" + w / ratio + "px").css("height", "" + h / ratio + "px");
                }
                return _super(event);
            },
            afterContent: function(_super, event) {
                var r = _super(event);
                return this.onResize(event), r;
            }
        }
    }), $.featherlight = Featherlight, /* bind jQuery elements to trigger featherlight */
    $.fn.featherlight = function($content, config) {
        return Featherlight.attach(this, $content, config);
    }, /* bind featherlight on ready if config autoBind is set */
    $(document).ready(function() {
        Featherlight._onReady();
    });
}(jQuery), function($) {
    $.fn.paginate = function(options) {
        var opts = $.extend({}, $.fn.paginate.defaults, options);
        return this.each(function() {
            $this = $(this);
            var o = $.meta ? $.extend({}, opts, $this.data()) : opts, selectedpage = o.start;
            $.fn.draw(o, $this, selectedpage);
        });
    };
    var outsidewidth_tmp = 0, insidewidth = 0, bVer = (navigator.appName, navigator.appVersion);
    if (bVer.indexOf("MSIE 7.0") > 0) var ver = "ie7";
    $.fn.paginate.defaults = {
        count: 5,
        start: 12,
        display: 5,
        border: !0,
        border_color: "#fff",
        text_color: "#8cc59d",
        background_color: "black",
        border_hover_color: "#fff",
        text_hover_color: "#fff",
        background_hover_color: "#fff",
        rotate: !0,
        images: !0,
        mouse: "slide",
        onChange: function() {
            return !1;
        }
    }, $.fn.draw = function(o, obj, selectedpage) {
        if (o.display > o.count && (o.display = o.count), $this.empty(), o.images) var spreviousclass = "jPag-sprevious-img", snextclass = "jPag-snext-img"; else var spreviousclass = "jPag-sprevious", snextclass = "jPag-snext";
        var _first = $(document.createElement("a")).addClass("jPag-first").html("First");
        if (o.rotate) if (o.images) var _rotleft = $(document.createElement("span")).addClass(spreviousclass); else var _rotleft = $(document.createElement("span")).addClass(spreviousclass).html("&laquo;");
        var _divwrapleft = $(document.createElement("div")).addClass("jPag-control-back");
        _divwrapleft.append(_first).append(_rotleft);
        for (var selobj, _ulwrapdiv = $(document.createElement("div")).css("overflow", "hidden"), _ul = $(document.createElement("ul")).addClass("jPag-pages"), i = ((o.display - 1) / 2, 
        0); i < o.count; i++) {
            var val = i + 1;
            if (val == selectedpage) {
                var _obj = $(document.createElement("li")).html('<span class="jPag-current">' + val + "</span>");
                selobj = _obj, _ul.append(_obj);
            } else {
                var _obj = $(document.createElement("li")).html("<a>" + val + "</a>");
                _ul.append(_obj);
            }
        }
        if (_ulwrapdiv.append(_ul), o.rotate) if (o.images) var _rotright = $(document.createElement("span")).addClass(snextclass); else var _rotright = $(document.createElement("span")).addClass(snextclass).html("&raquo;");
        var _last = $(document.createElement("a")).addClass("jPag-last").html("Last"), _divwrapright = $(document.createElement("div")).addClass("jPag-control-front");
        if (_divwrapright.append(_rotright).append(_last), //append all:
        $this.addClass("jPaginate").append(_divwrapleft).append(_ulwrapdiv).append(_divwrapright), 
        o.border) {
            if ("none" == o.background_color) var a_css = {
                color: o.text_color,
                border: "1px solid " + o.border_color
            }; else var a_css = {
                color: o.text_color,
                "background-color": o.background_color,
                border: "1px solid " + o.border_color
            };
            if ("none" == o.background_hover_color) var hover_css = {
                color: o.text_hover_color,
                border: "1px solid " + o.border_hover_color
            }; else var hover_css = {
                color: o.text_hover_color,
                "background-color": o.background_hover_color,
                border: "1px solid " + o.border_hover_color
            };
        } else {
            if ("none" == o.background_color) var a_css = {
                color: o.text_color
            }; else var a_css = {
                color: o.text_color,
                "background-color": o.background_color
            };
            if ("none" == o.background_hover_color) var hover_css = {
                color: o.text_hover_color
            }; else var hover_css = {
                color: o.text_hover_color,
                "background-color": o.background_hover_color
            };
        }
        $.fn.applystyle(o, $this, a_css, hover_css, _first, _ul, _ulwrapdiv, _divwrapright);
        //calculate width of the ones displayed:
        var outsidewidth = outsidewidth_tmp - _first.parent().width() - 3;
        "ie7" == ver ? (_ulwrapdiv.css("width", outsidewidth + 72 + "px"), _divwrapright.css("left", outsidewidth_tmp + 6 + 72 + "px")) : (_ulwrapdiv.css("width", outsidewidth + "px"), 
        _divwrapright.css("left", outsidewidth_tmp + 6 + "px")), o.rotate && (_rotright.hover(function() {
            thumbs_scroll_interval = setInterval(function() {
                var left = _ulwrapdiv.scrollLeft() + 1;
                _ulwrapdiv.scrollLeft(left);
            }, 20);
        }, function() {
            clearInterval(thumbs_scroll_interval);
        }), _rotleft.hover(function() {
            thumbs_scroll_interval = setInterval(function() {
                var left = _ulwrapdiv.scrollLeft() - 1;
                _ulwrapdiv.scrollLeft(left);
            }, 20);
        }, function() {
            clearInterval(thumbs_scroll_interval);
        }), "press" == o.mouse ? (_rotright.mousedown(function() {
            thumbs_mouse_interval = setInterval(function() {
                var left = _ulwrapdiv.scrollLeft() + 5;
                _ulwrapdiv.scrollLeft(left);
            }, 20);
        }).mouseup(function() {
            clearInterval(thumbs_mouse_interval);
        }), _rotleft.mousedown(function() {
            thumbs_mouse_interval = setInterval(function() {
                var left = _ulwrapdiv.scrollLeft() - 5;
                _ulwrapdiv.scrollLeft(left);
            }, 20);
        }).mouseup(function() {
            clearInterval(thumbs_mouse_interval);
        })) : (_rotleft.click(function(e) {
            var width = outsidewidth - 10, left = _ulwrapdiv.scrollLeft() - width;
            _ulwrapdiv.animate({
                scrollLeft: left + "px"
            });
        }), _rotright.click(function(e) {
            var width = outsidewidth - 10, left = _ulwrapdiv.scrollLeft() + width;
            _ulwrapdiv.animate({
                scrollLeft: left + "px"
            });
        }))), //first and last:
        _first.click(function(e) {
            _ulwrapdiv.animate({
                scrollLeft: "0px"
            }), _ulwrapdiv.find("li").eq(0).click();
        }), _last.click(function(e) {
            _ulwrapdiv.animate({
                scrollLeft: insidewidth + "px"
            }), _ulwrapdiv.find("li").eq(o.count - 1).click();
        }), //click a page
        _ulwrapdiv.find("li").click(function(e) {
            selobj.html("<a>" + selobj.find(".jPag-current").html() + "</a>");
            var currval = $(this).find("a").html();
            $(this).html('<span class="jPag-current">' + currval + "</span>"), selobj = $(this), 
            $.fn.applystyle(o, $(this).parent().parent().parent(), a_css, hover_css, _first, _ul, _ulwrapdiv, _divwrapright);
            var left = this.offsetLeft / 2, tmp = (_ulwrapdiv.scrollLeft() + left, left - outsidewidth / 2);
            "ie7" == ver ? _ulwrapdiv.animate({
                scrollLeft: left + tmp - _first.parent().width() + 52 + "px"
            }) : _ulwrapdiv.animate({
                scrollLeft: left + tmp - _first.parent().width() + "px"
            }), o.onChange(currval);
        });
        var last = _ulwrapdiv.find("li").eq(o.start - 1);
        last.attr("id", "tmp");
        var left = document.getElementById("tmp").offsetLeft / 2;
        last.removeAttr("id");
        var tmp = left - outsidewidth / 2;
        "ie7" == ver ? _ulwrapdiv.animate({
            scrollLeft: left + tmp - _first.parent().width() + 52 + "px"
        }) : _ulwrapdiv.animate({
            scrollLeft: left + tmp - _first.parent().width() + "px"
        });
    }, $.fn.applystyle = function(o, obj, a_css, hover_css, _first, _ul, _ulwrapdiv, _divwrapright) {
        obj.find("a").css(a_css), obj.find("span.jPag-current").css(hover_css), obj.find("a").hover(function() {
            $(this).css(hover_css);
        }, function() {
            $(this).css(a_css);
        }), obj.css("padding-left", _first.parent().width() + 5 + "px"), insidewidth = 0, 
        obj.find("li").each(function(i, n) {
            i == o.display - 1 && (outsidewidth_tmp = this.offsetLeft + this.offsetWidth), insidewidth += this.offsetWidth;
        }), _ul.css("width", insidewidth + "px");
    };
}(jQuery), /*! jQuery UI - v1.11.4 - 2015-03-11
* http://jqueryui.com
* Includes: core.js, widget.js, mouse.js, position.js, accordion.js, autocomplete.js, button.js, datepicker.js, dialog.js, draggable.js, droppable.js, effect.js, effect-blind.js, effect-bounce.js, effect-clip.js, effect-drop.js, effect-explode.js, effect-fade.js, effect-fold.js, effect-highlight.js, effect-puff.js, effect-pulsate.js, effect-scale.js, effect-shake.js, effect-size.js, effect-slide.js, effect-transfer.js, menu.js, progressbar.js, resizable.js, selectable.js, selectmenu.js, slider.js, sortable.js, spinner.js, tabs.js, tooltip.js
* Copyright 2015 jQuery Foundation and other contributors; Licensed MIT */
function(factory) {
    "function" == typeof define && define.amd ? // AMD. Register as an anonymous module.
    define([ "jquery" ], factory) : // Browser globals
    factory(jQuery);
}(function($) {
    // selectors
    function focusable(element, isTabIndexNotNaN) {
        var map, mapName, img, nodeName = element.nodeName.toLowerCase();
        // the element and all of its ancestors must be visible
        return "area" === nodeName ? (map = element.parentNode, mapName = map.name, element.href && mapName && "map" === map.nodeName.toLowerCase() ? (img = $("img[usemap='#" + mapName + "']")[0], 
        !!img && visible(img)) : !1) : (/^(input|select|textarea|button|object)$/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
    }
    function visible(element) {
        return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function() {
            return "hidden" === $.css(this, "visibility");
        }).length;
    }
    function datepicker_getZindex(elem) {
        for (var position, value; elem.length && elem[0] !== document; ) {
            if (// Ignore z-index if position is set to a value where z-index is ignored by the browser
            // This makes behavior of this function consistent across browsers
            // WebKit always returns auto if the element is positioned
            position = elem.css("position"), ("absolute" === position || "relative" === position || "fixed" === position) && (// IE returns 0 when zIndex is not specified
            // other browsers return a string
            // we ignore the case of nested elements with an explicit value of 0
            // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
            value = parseInt(elem.css("zIndex"), 10), !isNaN(value) && 0 !== value)) return value;
            elem = elem.parent();
        }
        return 0;
    }
    /* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */
    function Datepicker() {
        this._curInst = null, // The current instance in use
        this._keyEvent = !1, // If the last event was a key event
        this._disabledInputs = [], // List of date picker inputs that have been disabled
        this._datepickerShowing = !1, // True if the popup picker is showing , false if not
        this._inDialog = !1, // True if showing within a "dialog", false if not
        this._mainDivId = "ui-datepicker-div", // The ID of the main datepicker division
        this._inlineClass = "ui-datepicker-inline", // The name of the inline marker class
        this._appendClass = "ui-datepicker-append", // The name of the append marker class
        this._triggerClass = "ui-datepicker-trigger", // The name of the trigger marker class
        this._dialogClass = "ui-datepicker-dialog", // The name of the dialog marker class
        this._disableClass = "ui-datepicker-disabled", // The name of the disabled covering marker class
        this._unselectableClass = "ui-datepicker-unselectable", // The name of the unselectable cell marker class
        this._currentClass = "ui-datepicker-current-day", // The name of the current day marker class
        this._dayOverClass = "ui-datepicker-days-cell-over", // The name of the day hover marker class
        this.regional = [], // Available regional settings, indexed by language code
        this.regional[""] = {
            // Default regional settings
            closeText: "Done",
            // Display text for close link
            prevText: "Prev",
            // Display text for previous month link
            nextText: "Next",
            // Display text for next month link
            currentText: "Today",
            // Display text for current month link
            monthNames: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
            // Names of months for drop-down and formatting
            monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
            // For formatting
            dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
            // For formatting
            dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
            // For formatting
            dayNamesMin: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ],
            // Column headings for days starting at Sunday
            weekHeader: "Wk",
            // Column header for week of the year
            dateFormat: "mm/dd/yy",
            // See format options on parseDate
            firstDay: 0,
            // The first day of the week, Sun = 0, Mon = 1, ...
            isRTL: !1,
            // True if right-to-left language, false if left-to-right
            showMonthAfterYear: !1,
            // True if the year select precedes month, false for month then year
            yearSuffix: ""
        }, this._defaults = {
            // Global defaults for all the date picker instances
            showOn: "focus",
            // "focus" for popup on focus,
            // "button" for trigger button, or "both" for either
            showAnim: "fadeIn",
            // Name of jQuery animation for popup
            showOptions: {},
            // Options for enhanced animations
            defaultDate: null,
            // Used when field is blank: actual date,
            // +/-number for offset from today, null for today
            appendText: "",
            // Display text following the input box, e.g. showing the format
            buttonText: "...",
            // Text for trigger button
            buttonImage: "",
            // URL for trigger button image
            buttonImageOnly: !1,
            // True if the image appears alone, false if it appears on a button
            hideIfNoPrevNext: !1,
            // True to hide next/previous month links
            // if not applicable, false to just disable them
            navigationAsDateFormat: !1,
            // True if date formatting applied to prev/today/next links
            gotoCurrent: !1,
            // True if today link goes back to current selection instead
            changeMonth: !1,
            // True if month can be selected directly, false if only prev/next
            changeYear: !1,
            // True if year can be selected directly, false if only prev/next
            yearRange: "c-10:c+10",
            // Range of years to display in drop-down,
            // either relative to today's year (-nn:+nn), relative to currently displayed year
            // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
            showOtherMonths: !1,
            // True to show dates in other months, false to leave blank
            selectOtherMonths: !1,
            // True to allow selection of dates in other months, false for unselectable
            showWeek: !1,
            // True to show week of the year, false to not show it
            calculateWeek: this.iso8601Week,
            // How to calculate the week of the year,
            // takes a Date and returns the number of the week for it
            shortYearCutoff: "+10",
            // Short year values < this are in the current century,
            // > this are in the previous century,
            // string value starting with "+" for current year + value
            minDate: null,
            // The earliest selectable date, or null for no limit
            maxDate: null,
            // The latest selectable date, or null for no limit
            duration: "fast",
            // Duration of display/closure
            beforeShowDay: null,
            // Function that takes a date and returns an array with
            // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
            // [2] = cell title (optional), e.g. $.datepicker.noWeekends
            beforeShow: null,
            // Function that takes an input field and
            // returns a set of custom settings for the date picker
            onSelect: null,
            // Define a callback function when a date is selected
            onChangeMonthYear: null,
            // Define a callback function when the month or year is changed
            onClose: null,
            // Define a callback function when the datepicker is closed
            numberOfMonths: 1,
            // Number of months to show at a time
            showCurrentAtPos: 0,
            // The position in multipe months at which to show the current month (starting at 0)
            stepMonths: 1,
            // Number of months to step back/forward
            stepBigMonths: 12,
            // Number of months to step back/forward for the big links
            altField: "",
            // Selector for an alternate field to store selected dates into
            altFormat: "",
            // The date format to use for the alternate field
            constrainInput: !0,
            // The input is constrained by the current date format
            showButtonPanel: !1,
            // True to show button panel, false to not show it
            autoSize: !1,
            // True to size the input for the date format, false to leave as is
            disabled: !1
        }, $.extend(this._defaults, this.regional[""]), this.regional.en = $.extend(!0, {}, this.regional[""]), 
        this.regional["en-US"] = $.extend(!0, {}, this.regional.en), this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
    }
    /*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
    function datepicker_bindHover(dpDiv) {
        var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
        return dpDiv.delegate(selector, "mouseout", function() {
            $(this).removeClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && $(this).removeClass("ui-datepicker-prev-hover"), 
            -1 !== this.className.indexOf("ui-datepicker-next") && $(this).removeClass("ui-datepicker-next-hover");
        }).delegate(selector, "mouseover", datepicker_handleMouseover);
    }
    function datepicker_handleMouseover() {
        $.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0]) || ($(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"), 
        $(this).addClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && $(this).addClass("ui-datepicker-prev-hover"), 
        -1 !== this.className.indexOf("ui-datepicker-next") && $(this).addClass("ui-datepicker-next-hover"));
    }
    /* jQuery extend now ignores nulls! */
    function datepicker_extendRemove(target, props) {
        $.extend(target, props);
        for (var name in props) null == props[name] && (target[name] = props[name]);
        return target;
    }
    /*!
 * jQuery UI Spinner 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/spinner/
 */
    function spinner_modifier(fn) {
        return function() {
            var previous = this.element.val();
            fn.apply(this, arguments), this._refresh(), previous !== this.element.val() && this._trigger("change");
        };
    }
    /*!
 * jQuery UI Core 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
    // $.ui might exist from components with no dependencies, e.g., $.ui.position
    $.ui = $.ui || {}, $.extend($.ui, {
        version: "1.11.4",
        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        }
    }), // plugins
    $.fn.extend({
        scrollParent: function(includeHidden) {
            var position = this.css("position"), excludeStaticParent = "absolute" === position, overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/, scrollParent = this.parents().filter(function() {
                var parent = $(this);
                return excludeStaticParent && "static" === parent.css("position") ? !1 : overflowRegex.test(parent.css("overflow") + parent.css("overflow-y") + parent.css("overflow-x"));
            }).eq(0);
            return "fixed" !== position && scrollParent.length ? scrollParent : $(this[0].ownerDocument || document);
        },
        uniqueId: function() {
            var uuid = 0;
            return function() {
                return this.each(function() {
                    this.id || (this.id = "ui-id-" + ++uuid);
                });
            };
        }(),
        removeUniqueId: function() {
            return this.each(function() {
                /^ui-id-\d+$/.test(this.id) && $(this).removeAttr("id");
            });
        }
    }), $.extend($.expr[":"], {
        data: $.expr.createPseudo ? $.expr.createPseudo(function(dataName) {
            return function(elem) {
                return !!$.data(elem, dataName);
            };
        }) : // support: jQuery <1.8
        function(elem, i, match) {
            return !!$.data(elem, match[3]);
        },
        focusable: function(element) {
            return focusable(element, !isNaN($.attr(element, "tabindex")));
        },
        tabbable: function(element) {
            var tabIndex = $.attr(element, "tabindex"), isTabIndexNaN = isNaN(tabIndex);
            return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
        }
    }), // support: jQuery <1.8
    $("<a>").outerWidth(1).jquery || $.each([ "Width", "Height" ], function(i, name) {
        function reduce(elem, size, border, margin) {
            return $.each(side, function() {
                size -= parseFloat($.css(elem, "padding" + this)) || 0, border && (size -= parseFloat($.css(elem, "border" + this + "Width")) || 0), 
                margin && (size -= parseFloat($.css(elem, "margin" + this)) || 0);
            }), size;
        }
        var side = "Width" === name ? [ "Left", "Right" ] : [ "Top", "Bottom" ], type = name.toLowerCase(), orig = {
            innerWidth: $.fn.innerWidth,
            innerHeight: $.fn.innerHeight,
            outerWidth: $.fn.outerWidth,
            outerHeight: $.fn.outerHeight
        };
        $.fn["inner" + name] = function(size) {
            return void 0 === size ? orig["inner" + name].call(this) : this.each(function() {
                $(this).css(type, reduce(this, size) + "px");
            });
        }, $.fn["outer" + name] = function(size, margin) {
            return "number" != typeof size ? orig["outer" + name].call(this, size) : this.each(function() {
                $(this).css(type, reduce(this, size, !0, margin) + "px");
            });
        };
    }), // support: jQuery <1.8
    $.fn.addBack || ($.fn.addBack = function(selector) {
        return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
    }), // support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
    $("<a>").data("a-b", "a").removeData("a-b").data("a-b") && ($.fn.removeData = function(removeData) {
        return function(key) {
            return arguments.length ? removeData.call(this, $.camelCase(key)) : removeData.call(this);
        };
    }($.fn.removeData)), // deprecated
    $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()), $.fn.extend({
        focus: function(orig) {
            return function(delay, fn) {
                return "number" == typeof delay ? this.each(function() {
                    var elem = this;
                    setTimeout(function() {
                        $(elem).focus(), fn && fn.call(elem);
                    }, delay);
                }) : orig.apply(this, arguments);
            };
        }($.fn.focus),
        disableSelection: function() {
            var eventType = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";
            return function() {
                return this.bind(eventType + ".ui-disableSelection", function(event) {
                    event.preventDefault();
                });
            };
        }(),
        enableSelection: function() {
            return this.unbind(".ui-disableSelection");
        },
        zIndex: function(zIndex) {
            if (void 0 !== zIndex) return this.css("zIndex", zIndex);
            if (this.length) for (var position, value, elem = $(this[0]); elem.length && elem[0] !== document; ) {
                if (// Ignore z-index if position is set to a value where z-index is ignored by the browser
                // This makes behavior of this function consistent across browsers
                // WebKit always returns auto if the element is positioned
                position = elem.css("position"), ("absolute" === position || "relative" === position || "fixed" === position) && (// IE returns 0 when zIndex is not specified
                // other browsers return a string
                // we ignore the case of nested elements with an explicit value of 0
                // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
                value = parseInt(elem.css("zIndex"), 10), !isNaN(value) && 0 !== value)) return value;
                elem = elem.parent();
            }
            return 0;
        }
    }), // $.ui.plugin is deprecated. Use $.widget() extensions instead.
    $.ui.plugin = {
        add: function(module, option, set) {
            var i, proto = $.ui[module].prototype;
            for (i in set) proto.plugins[i] = proto.plugins[i] || [], proto.plugins[i].push([ option, set[i] ]);
        },
        call: function(instance, name, args, allowDisconnected) {
            var i, set = instance.plugins[name];
            if (set && (allowDisconnected || instance.element[0].parentNode && 11 !== instance.element[0].parentNode.nodeType)) for (i = 0; i < set.length; i++) instance.options[set[i][0]] && set[i][1].apply(instance.element, args);
        }
    };
    /*!
 * jQuery UI Widget 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/jQuery.widget/
 */
    var widget_uuid = 0, widget_slice = Array.prototype.slice;
    $.cleanData = function(orig) {
        return function(elems) {
            var events, elem, i;
            for (i = 0; null != (elem = elems[i]); i++) try {
                // Only trigger remove when necessary to save time
                events = $._data(elem, "events"), events && events.remove && $(elem).triggerHandler("remove");
            } catch (e) {}
            orig(elems);
        };
    }($.cleanData), $.widget = function(name, base, prototype) {
        var fullName, existingConstructor, constructor, basePrototype, // proxiedPrototype allows the provided prototype to remain unmodified
        // so that it can be used as a mixin for multiple widgets (#8876)
        proxiedPrototype = {}, namespace = name.split(".")[0];
        // create selector for plugin
        // extend with the existing constructor to carry over any static properties
        // we need to make the options hash a property directly on the new instance
        // otherwise we'll modify the options hash on the prototype that we're
        // inheriting from
        // If this widget is being redefined then we need to find all widgets that
        // are inheriting from it and redefine all of them so that they inherit from
        // the new version of this widget. We're essentially trying to replace one
        // level in the prototype chain.
        // remove the list of existing child constructors from the old constructor
        // so the old child constructors can be garbage collected
        return name = name.split(".")[1], fullName = namespace + "-" + name, prototype || (prototype = base, 
        base = $.Widget), $.expr[":"][fullName.toLowerCase()] = function(elem) {
            return !!$.data(elem, fullName);
        }, $[namespace] = $[namespace] || {}, existingConstructor = $[namespace][name], 
        constructor = $[namespace][name] = function(options, element) {
            // allow instantiation without "new" keyword
            // allow instantiation without "new" keyword
            // allow instantiation without initializing for simple inheritance
            // must use "new" keyword (the code above always passes args)
            return this._createWidget ? void (arguments.length && this._createWidget(options, element)) : new constructor(options, element);
        }, $.extend(constructor, existingConstructor, {
            version: prototype.version,
            // copy the object used to create the prototype in case we need to
            // redefine the widget later
            _proto: $.extend({}, prototype),
            // track widgets that inherit from this widget in case this widget is
            // redefined after a widget inherits from it
            _childConstructors: []
        }), basePrototype = new base(), basePrototype.options = $.widget.extend({}, basePrototype.options), 
        $.each(prototype, function(prop, value) {
            return $.isFunction(value) ? void (proxiedPrototype[prop] = function() {
                var _super = function() {
                    return base.prototype[prop].apply(this, arguments);
                }, _superApply = function(args) {
                    return base.prototype[prop].apply(this, args);
                };
                return function() {
                    var returnValue, __super = this._super, __superApply = this._superApply;
                    return this._super = _super, this._superApply = _superApply, returnValue = value.apply(this, arguments), 
                    this._super = __super, this._superApply = __superApply, returnValue;
                };
            }()) : void (proxiedPrototype[prop] = value);
        }), constructor.prototype = $.widget.extend(basePrototype, {
            // TODO: remove support for widgetEventPrefix
            // always use the name + a colon as the prefix, e.g., draggable:start
            // don't prefix for widgets that aren't DOM-based
            widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name
        }, proxiedPrototype, {
            constructor: constructor,
            namespace: namespace,
            widgetName: name,
            widgetFullName: fullName
        }), existingConstructor ? ($.each(existingConstructor._childConstructors, function(i, child) {
            var childPrototype = child.prototype;
            // redefine the child widget using the same prototype that was
            // originally used, but inherit from the new version of the base
            $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
        }), delete existingConstructor._childConstructors) : base._childConstructors.push(constructor), 
        $.widget.bridge(name, constructor), constructor;
    }, $.widget.extend = function(target) {
        for (var key, value, input = widget_slice.call(arguments, 1), inputIndex = 0, inputLength = input.length; inputLength > inputIndex; inputIndex++) for (key in input[inputIndex]) value = input[inputIndex][key], 
        input[inputIndex].hasOwnProperty(key) && void 0 !== value && (// Clone objects
        $.isPlainObject(value) ? target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : // Don't extend strings, arrays, etc. with objects
        $.widget.extend({}, value) : target[key] = value);
        return target;
    }, $.widget.bridge = function(name, object) {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[name] = function(options) {
            var isMethodCall = "string" == typeof options, args = widget_slice.call(arguments, 1), returnValue = this;
            // Allow multiple hashes to be passed on init
            return isMethodCall ? this.each(function() {
                var methodValue, instance = $.data(this, fullName);
                return "instance" === options ? (returnValue = instance, !1) : instance ? $.isFunction(instance[options]) && "_" !== options.charAt(0) ? (methodValue = instance[options].apply(instance, args), 
                methodValue !== instance && void 0 !== methodValue ? (returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue, 
                !1) : void 0) : $.error("no such method '" + options + "' for " + name + " widget instance") : $.error("cannot call methods on " + name + " prior to initialization; attempted to call method '" + options + "'");
            }) : (args.length && (options = $.widget.extend.apply(null, [ options ].concat(args))), 
            this.each(function() {
                var instance = $.data(this, fullName);
                instance ? (instance.option(options || {}), instance._init && instance._init()) : $.data(this, fullName, new object(options, this));
            })), returnValue;
        };
    }, $.Widget = function() {}, $.Widget._childConstructors = [], $.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {
            disabled: !1,
            // callbacks
            create: null
        },
        _createWidget: function(options, element) {
            element = $(element || this.defaultElement || this)[0], this.element = $(element), 
            this.uuid = widget_uuid++, this.eventNamespace = "." + this.widgetName + this.uuid, 
            this.bindings = $(), this.hoverable = $(), this.focusable = $(), element !== this && ($.data(element, this.widgetFullName, this), 
            this._on(!0, this.element, {
                remove: function(event) {
                    event.target === element && this.destroy();
                }
            }), this.document = $(element.style ? // element within the document
            element.ownerDocument : // element is window or document
            element.document || element), this.window = $(this.document[0].defaultView || this.document[0].parentWindow)), 
            this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options), 
            this._create(), this._trigger("create", null, this._getCreateEventData()), this._init();
        },
        _getCreateOptions: $.noop,
        _getCreateEventData: $.noop,
        _create: $.noop,
        _init: $.noop,
        destroy: function() {
            this._destroy(), // we can probably remove the unbind calls in 2.0
            // all event bindings should go through this._on()
            this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName)), 
            this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled ui-state-disabled"), 
            // clean up events and states
            this.bindings.unbind(this.eventNamespace), this.hoverable.removeClass("ui-state-hover"), 
            this.focusable.removeClass("ui-state-focus");
        },
        _destroy: $.noop,
        widget: function() {
            return this.element;
        },
        option: function(key, value) {
            var parts, curOption, i, options = key;
            if (0 === arguments.length) // don't return a reference to the internal hash
            return $.widget.extend({}, this.options);
            if ("string" == typeof key) if (// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
            options = {}, parts = key.split("."), key = parts.shift(), parts.length) {
                for (curOption = options[key] = $.widget.extend({}, this.options[key]), i = 0; i < parts.length - 1; i++) curOption[parts[i]] = curOption[parts[i]] || {}, 
                curOption = curOption[parts[i]];
                if (key = parts.pop(), 1 === arguments.length) return void 0 === curOption[key] ? null : curOption[key];
                curOption[key] = value;
            } else {
                if (1 === arguments.length) return void 0 === this.options[key] ? null : this.options[key];
                options[key] = value;
            }
            return this._setOptions(options), this;
        },
        _setOptions: function(options) {
            var key;
            for (key in options) this._setOption(key, options[key]);
            return this;
        },
        _setOption: function(key, value) {
            // If the widget is becoming disabled, then nothing is interactive
            return this.options[key] = value, "disabled" === key && (this.widget().toggleClass(this.widgetFullName + "-disabled", !!value), 
            value && (this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus"))), 
            this;
        },
        enable: function() {
            return this._setOptions({
                disabled: !1
            });
        },
        disable: function() {
            return this._setOptions({
                disabled: !0
            });
        },
        _on: function(suppressDisabledCheck, element, handlers) {
            var delegateElement, instance = this;
            // no suppressDisabledCheck flag, shuffle arguments
            "boolean" != typeof suppressDisabledCheck && (handlers = element, element = suppressDisabledCheck, 
            suppressDisabledCheck = !1), // no element argument, shuffle and use this.element
            handlers ? (element = delegateElement = $(element), this.bindings = this.bindings.add(element)) : (handlers = element, 
            element = this.element, delegateElement = this.widget()), $.each(handlers, function(event, handler) {
                function handlerProxy() {
                    // allow widgets to customize the disabled handling
                    // - disabled as an array instead of boolean
                    // - disabled class as method for disabling individual parts
                    // allow widgets to customize the disabled handling
                    // - disabled as an array instead of boolean
                    // - disabled class as method for disabling individual parts
                    return suppressDisabledCheck || instance.options.disabled !== !0 && !$(this).hasClass("ui-state-disabled") ? ("string" == typeof handler ? instance[handler] : handler).apply(instance, arguments) : void 0;
                }
                // copy the guid so direct unbinding works
                "string" != typeof handler && (handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++);
                var match = event.match(/^([\w:-]*)\s*(.*)$/), eventName = match[1] + instance.eventNamespace, selector = match[2];
                selector ? delegateElement.delegate(selector, eventName, handlerProxy) : element.bind(eventName, handlerProxy);
            });
        },
        _off: function(element, eventName) {
            eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, 
            element.unbind(eventName).undelegate(eventName), // Clear the stack to avoid memory leaks (#10056)
            this.bindings = $(this.bindings.not(element).get()), this.focusable = $(this.focusable.not(element).get()), 
            this.hoverable = $(this.hoverable.not(element).get());
        },
        _delay: function(handler, delay) {
            function handlerProxy() {
                return ("string" == typeof handler ? instance[handler] : handler).apply(instance, arguments);
            }
            var instance = this;
            return setTimeout(handlerProxy, delay || 0);
        },
        _hoverable: function(element) {
            this.hoverable = this.hoverable.add(element), this._on(element, {
                mouseenter: function(event) {
                    $(event.currentTarget).addClass("ui-state-hover");
                },
                mouseleave: function(event) {
                    $(event.currentTarget).removeClass("ui-state-hover");
                }
            });
        },
        _focusable: function(element) {
            this.focusable = this.focusable.add(element), this._on(element, {
                focusin: function(event) {
                    $(event.currentTarget).addClass("ui-state-focus");
                },
                focusout: function(event) {
                    $(event.currentTarget).removeClass("ui-state-focus");
                }
            });
        },
        _trigger: function(type, event, data) {
            var prop, orig, callback = this.options[type];
            if (data = data || {}, event = $.Event(event), event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase(), 
            // the original event may come from any element
            // so we need to reset the target on the new event
            event.target = this.element[0], // copy original event properties over to the new event
            orig = event.originalEvent) for (prop in orig) prop in event || (event[prop] = orig[prop]);
            return this.element.trigger(event, data), !($.isFunction(callback) && callback.apply(this.element[0], [ event ].concat(data)) === !1 || event.isDefaultPrevented());
        }
    }, $.each({
        show: "fadeIn",
        hide: "fadeOut"
    }, function(method, defaultEffect) {
        $.Widget.prototype["_" + method] = function(element, options, callback) {
            "string" == typeof options && (options = {
                effect: options
            });
            var hasOptions, effectName = options ? options === !0 || "number" == typeof options ? defaultEffect : options.effect || defaultEffect : method;
            options = options || {}, "number" == typeof options && (options = {
                duration: options
            }), hasOptions = !$.isEmptyObject(options), options.complete = callback, options.delay && element.delay(options.delay), 
            hasOptions && $.effects && $.effects.effect[effectName] ? element[method](options) : effectName !== method && element[effectName] ? element[effectName](options.duration, options.easing, callback) : element.queue(function(next) {
                $(this)[method](), callback && callback.call(element[0]), next();
            });
        };
    });
    var mouseHandled = ($.widget, !1);
    $(document).mouseup(function() {
        mouseHandled = !1;
    });
    $.widget("ui.mouse", {
        version: "1.11.4",
        options: {
            cancel: "input,textarea,button,select,option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var that = this;
            this.element.bind("mousedown." + this.widgetName, function(event) {
                return that._mouseDown(event);
            }).bind("click." + this.widgetName, function(event) {
                return !0 === $.data(event.target, that.widgetName + ".preventClickEvent") ? ($.removeData(event.target, that.widgetName + ".preventClickEvent"), 
                event.stopImmediatePropagation(), !1) : void 0;
            }), this.started = !1;
        },
        // TODO: make sure destroying one instance of mouse doesn't mess with
        // other instances of mouse
        _mouseDestroy: function() {
            this.element.unbind("." + this.widgetName), this._mouseMoveDelegate && this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
        },
        _mouseDown: function(event) {
            // don't let more than one widget handle mouseStart
            if (!mouseHandled) {
                this._mouseMoved = !1, // we may have missed mouseup (out of window)
                this._mouseStarted && this._mouseUp(event), this._mouseDownEvent = event;
                var that = this, btnIsLeft = 1 === event.which, // event.target.nodeName works around a bug in IE 8 with
                // disabled inputs (#7620)
                elIsCancel = "string" == typeof this.options.cancel && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : !1;
                // Click event may never have fired (Gecko & Opera)
                // these delegates are required to keep context
                return btnIsLeft && !elIsCancel && this._mouseCapture(event) ? (this.mouseDelayMet = !this.options.delay, 
                this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function() {
                    that.mouseDelayMet = !0;
                }, this.options.delay)), this._mouseDistanceMet(event) && this._mouseDelayMet(event) && (this._mouseStarted = this._mouseStart(event) !== !1, 
                !this._mouseStarted) ? (event.preventDefault(), !0) : (!0 === $.data(event.target, this.widgetName + ".preventClickEvent") && $.removeData(event.target, this.widgetName + ".preventClickEvent"), 
                this._mouseMoveDelegate = function(event) {
                    return that._mouseMove(event);
                }, this._mouseUpDelegate = function(event) {
                    return that._mouseUp(event);
                }, this.document.bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate), 
                event.preventDefault(), mouseHandled = !0, !0)) : !0;
            }
        },
        _mouseMove: function(event) {
            // Only check for mouseups outside the document if you've moved inside the document
            // at least once. This prevents the firing of mouseup in the case of IE<9, which will
            // fire a mousemove event if content is placed under the cursor. See #7778
            // Support: IE <9
            if (this._mouseMoved) {
                // IE mouseup check - mouseup happened when mouse was out of window
                if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) return this._mouseUp(event);
                if (!event.which) return this._mouseUp(event);
            }
            return (event.which || event.button) && (this._mouseMoved = !0), this._mouseStarted ? (this._mouseDrag(event), 
            event.preventDefault()) : (this._mouseDistanceMet(event) && this._mouseDelayMet(event) && (this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== !1, 
            this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event)), !this._mouseStarted);
        },
        _mouseUp: function(event) {
            return this.document.unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate), 
            this._mouseStarted && (this._mouseStarted = !1, event.target === this._mouseDownEvent.target && $.data(event.target, this.widgetName + ".preventClickEvent", !0), 
            this._mouseStop(event)), mouseHandled = !1, !1;
        },
        _mouseDistanceMet: function(event) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
        },
        _mouseDelayMet: function() {
            return this.mouseDelayMet;
        },
        // These are placeholder methods, to be overriden by extending plugin
        _mouseStart: function() {},
        _mouseDrag: function() {},
        _mouseStop: function() {},
        _mouseCapture: function() {
            return !0;
        }
    });
    /*!
 * jQuery UI Position 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */
    !function() {
        function getOffsets(offsets, width, height) {
            return [ parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1) ];
        }
        function parseCss(element, property) {
            return parseInt($.css(element, property), 10) || 0;
        }
        function getDimensions(elem) {
            var raw = elem[0];
            return 9 === raw.nodeType ? {
                width: elem.width(),
                height: elem.height(),
                offset: {
                    top: 0,
                    left: 0
                }
            } : $.isWindow(raw) ? {
                width: elem.width(),
                height: elem.height(),
                offset: {
                    top: elem.scrollTop(),
                    left: elem.scrollLeft()
                }
            } : raw.preventDefault ? {
                width: 0,
                height: 0,
                offset: {
                    top: raw.pageY,
                    left: raw.pageX
                }
            } : {
                width: elem.outerWidth(),
                height: elem.outerHeight(),
                offset: elem.offset()
            };
        }
        $.ui = $.ui || {};
        var cachedScrollbarWidth, supportsOffsetFractions, max = Math.max, abs = Math.abs, round = Math.round, rhorizontal = /left|center|right/, rvertical = /top|center|bottom/, roffset = /[\+\-]\d+(\.[\d]+)?%?/, rposition = /^\w+/, rpercent = /%$/, _position = $.fn.position;
        $.position = {
            scrollbarWidth: function() {
                if (void 0 !== cachedScrollbarWidth) return cachedScrollbarWidth;
                var w1, w2, div = $("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"), innerDiv = div.children()[0];
                return $("body").append(div), w1 = innerDiv.offsetWidth, div.css("overflow", "scroll"), 
                w2 = innerDiv.offsetWidth, w1 === w2 && (w2 = div[0].clientWidth), div.remove(), 
                cachedScrollbarWidth = w1 - w2;
            },
            getScrollInfo: function(within) {
                var overflowX = within.isWindow || within.isDocument ? "" : within.element.css("overflow-x"), overflowY = within.isWindow || within.isDocument ? "" : within.element.css("overflow-y"), hasOverflowX = "scroll" === overflowX || "auto" === overflowX && within.width < within.element[0].scrollWidth, hasOverflowY = "scroll" === overflowY || "auto" === overflowY && within.height < within.element[0].scrollHeight;
                return {
                    width: hasOverflowY ? $.position.scrollbarWidth() : 0,
                    height: hasOverflowX ? $.position.scrollbarWidth() : 0
                };
            },
            getWithinInfo: function(element) {
                var withinElement = $(element || window), isWindow = $.isWindow(withinElement[0]), isDocument = !!withinElement[0] && 9 === withinElement[0].nodeType;
                return {
                    element: withinElement,
                    isWindow: isWindow,
                    isDocument: isDocument,
                    offset: withinElement.offset() || {
                        left: 0,
                        top: 0
                    },
                    scrollLeft: withinElement.scrollLeft(),
                    scrollTop: withinElement.scrollTop(),
                    // support: jQuery 1.6.x
                    // jQuery 1.6 doesn't support .outerWidth/Height() on documents or windows
                    width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
                    height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
                };
            }
        }, $.fn.position = function(options) {
            if (!options || !options.of) return _position.apply(this, arguments);
            // make a copy, we don't want to modify arguments
            options = $.extend({}, options);
            var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target = $(options.of), within = $.position.getWithinInfo(options.within), scrollInfo = $.position.getScrollInfo(within), collision = (options.collision || "flip").split(" "), offsets = {};
            // force left top to allow flipping
            // clone to reuse original targetOffset later
            // force my and at to have valid horizontal and vertical positions
            // if a value is missing or invalid, it will be converted to center
            // normalize collision option
            return dimensions = getDimensions(target), target[0].preventDefault && (options.at = "left top"), 
            targetWidth = dimensions.width, targetHeight = dimensions.height, targetOffset = dimensions.offset, 
            basePosition = $.extend({}, targetOffset), $.each([ "my", "at" ], function() {
                var horizontalOffset, verticalOffset, pos = (options[this] || "").split(" ");
                1 === pos.length && (pos = rhorizontal.test(pos[0]) ? pos.concat([ "center" ]) : rvertical.test(pos[0]) ? [ "center" ].concat(pos) : [ "center", "center" ]), 
                pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center", pos[1] = rvertical.test(pos[1]) ? pos[1] : "center", 
                // calculate offsets
                horizontalOffset = roffset.exec(pos[0]), verticalOffset = roffset.exec(pos[1]), 
                offsets[this] = [ horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0 ], 
                // reduce to just the positions without the offsets
                options[this] = [ rposition.exec(pos[0])[0], rposition.exec(pos[1])[0] ];
            }), 1 === collision.length && (collision[1] = collision[0]), "right" === options.at[0] ? basePosition.left += targetWidth : "center" === options.at[0] && (basePosition.left += targetWidth / 2), 
            "bottom" === options.at[1] ? basePosition.top += targetHeight : "center" === options.at[1] && (basePosition.top += targetHeight / 2), 
            atOffset = getOffsets(offsets.at, targetWidth, targetHeight), basePosition.left += atOffset[0], 
            basePosition.top += atOffset[1], this.each(function() {
                var collisionPosition, using, elem = $(this), elemWidth = elem.outerWidth(), elemHeight = elem.outerHeight(), marginLeft = parseCss(this, "marginLeft"), marginTop = parseCss(this, "marginTop"), collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width, collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height, position = $.extend({}, basePosition), myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
                "right" === options.my[0] ? position.left -= elemWidth : "center" === options.my[0] && (position.left -= elemWidth / 2), 
                "bottom" === options.my[1] ? position.top -= elemHeight : "center" === options.my[1] && (position.top -= elemHeight / 2), 
                position.left += myOffset[0], position.top += myOffset[1], // if the browser doesn't support fractions, then round for consistent results
                supportsOffsetFractions || (position.left = round(position.left), position.top = round(position.top)), 
                collisionPosition = {
                    marginLeft: marginLeft,
                    marginTop: marginTop
                }, $.each([ "left", "top" ], function(i, dir) {
                    $.ui.position[collision[i]] && $.ui.position[collision[i]][dir](position, {
                        targetWidth: targetWidth,
                        targetHeight: targetHeight,
                        elemWidth: elemWidth,
                        elemHeight: elemHeight,
                        collisionPosition: collisionPosition,
                        collisionWidth: collisionWidth,
                        collisionHeight: collisionHeight,
                        offset: [ atOffset[0] + myOffset[0], atOffset[1] + myOffset[1] ],
                        my: options.my,
                        at: options.at,
                        within: within,
                        elem: elem
                    });
                }), options.using && (// adds feedback as second argument to using callback, if present
                using = function(props) {
                    var left = targetOffset.left - position.left, right = left + targetWidth - elemWidth, top = targetOffset.top - position.top, bottom = top + targetHeight - elemHeight, feedback = {
                        target: {
                            element: target,
                            left: targetOffset.left,
                            top: targetOffset.top,
                            width: targetWidth,
                            height: targetHeight
                        },
                        element: {
                            element: elem,
                            left: position.left,
                            top: position.top,
                            width: elemWidth,
                            height: elemHeight
                        },
                        horizontal: 0 > right ? "left" : left > 0 ? "right" : "center",
                        vertical: 0 > bottom ? "top" : top > 0 ? "bottom" : "middle"
                    };
                    elemWidth > targetWidth && abs(left + right) < targetWidth && (feedback.horizontal = "center"), 
                    elemHeight > targetHeight && abs(top + bottom) < targetHeight && (feedback.vertical = "middle"), 
                    max(abs(left), abs(right)) > max(abs(top), abs(bottom)) ? feedback.important = "horizontal" : feedback.important = "vertical", 
                    options.using.call(this, props, feedback);
                }), elem.offset($.extend(position, {
                    using: using
                }));
            });
        }, $.ui.position = {
            fit: {
                left: function(position, data) {
                    var newOverRight, within = data.within, withinOffset = within.isWindow ? within.scrollLeft : within.offset.left, outerWidth = within.width, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = withinOffset - collisionPosLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset;
                    // element is wider than within
                    data.collisionWidth > outerWidth ? // element is initially over the left side of within
                    overLeft > 0 && 0 >= overRight ? (newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset, 
                    position.left += overLeft - newOverRight) : overRight > 0 && 0 >= overLeft ? position.left = withinOffset : overLeft > overRight ? position.left = withinOffset + outerWidth - data.collisionWidth : position.left = withinOffset : overLeft > 0 ? position.left += overLeft : overRight > 0 ? position.left -= overRight : position.left = max(position.left - collisionPosLeft, position.left);
                },
                top: function(position, data) {
                    var newOverBottom, within = data.within, withinOffset = within.isWindow ? within.scrollTop : within.offset.top, outerHeight = data.within.height, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = withinOffset - collisionPosTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset;
                    // element is taller than within
                    data.collisionHeight > outerHeight ? // element is initially over the top of within
                    overTop > 0 && 0 >= overBottom ? (newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset, 
                    position.top += overTop - newOverBottom) : overBottom > 0 && 0 >= overTop ? position.top = withinOffset : overTop > overBottom ? position.top = withinOffset + outerHeight - data.collisionHeight : position.top = withinOffset : overTop > 0 ? position.top += overTop : overBottom > 0 ? position.top -= overBottom : position.top = max(position.top - collisionPosTop, position.top);
                }
            },
            flip: {
                left: function(position, data) {
                    var newOverRight, newOverLeft, within = data.within, withinOffset = within.offset.left + within.scrollLeft, outerWidth = within.width, offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = collisionPosLeft - offsetLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft, myOffset = "left" === data.my[0] ? -data.elemWidth : "right" === data.my[0] ? data.elemWidth : 0, atOffset = "left" === data.at[0] ? data.targetWidth : "right" === data.at[0] ? -data.targetWidth : 0, offset = -2 * data.offset[0];
                    0 > overLeft ? (newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset, 
                    (0 > newOverRight || newOverRight < abs(overLeft)) && (position.left += myOffset + atOffset + offset)) : overRight > 0 && (newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft, 
                    (newOverLeft > 0 || abs(newOverLeft) < overRight) && (position.left += myOffset + atOffset + offset));
                },
                top: function(position, data) {
                    var newOverTop, newOverBottom, within = data.within, withinOffset = within.offset.top + within.scrollTop, outerHeight = within.height, offsetTop = within.isWindow ? within.scrollTop : within.offset.top, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = collisionPosTop - offsetTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop, top = "top" === data.my[1], myOffset = top ? -data.elemHeight : "bottom" === data.my[1] ? data.elemHeight : 0, atOffset = "top" === data.at[1] ? data.targetHeight : "bottom" === data.at[1] ? -data.targetHeight : 0, offset = -2 * data.offset[1];
                    0 > overTop ? (newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset, 
                    (0 > newOverBottom || newOverBottom < abs(overTop)) && (position.top += myOffset + atOffset + offset)) : overBottom > 0 && (newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop, 
                    (newOverTop > 0 || abs(newOverTop) < overBottom) && (position.top += myOffset + atOffset + offset));
                }
            },
            flipfit: {
                left: function() {
                    $.ui.position.flip.left.apply(this, arguments), $.ui.position.fit.left.apply(this, arguments);
                },
                top: function() {
                    $.ui.position.flip.top.apply(this, arguments), $.ui.position.fit.top.apply(this, arguments);
                }
            }
        }, // fraction support test
        function() {
            var testElement, testElementParent, testElementStyle, offsetLeft, i, body = document.getElementsByTagName("body")[0], div = document.createElement("div");
            //Create a "fake body" for testing based on method used in jQuery.support
            testElement = document.createElement(body ? "div" : "body"), testElementStyle = {
                visibility: "hidden",
                width: 0,
                height: 0,
                border: 0,
                margin: 0,
                background: "none"
            }, body && $.extend(testElementStyle, {
                position: "absolute",
                left: "-1000px",
                top: "-1000px"
            });
            for (i in testElementStyle) testElement.style[i] = testElementStyle[i];
            testElement.appendChild(div), testElementParent = body || document.documentElement, 
            testElementParent.insertBefore(testElement, testElementParent.firstChild), div.style.cssText = "position: absolute; left: 10.7432222px;", 
            offsetLeft = $(div).offset().left, supportsOffsetFractions = offsetLeft > 10 && 11 > offsetLeft, 
            testElement.innerHTML = "", testElementParent.removeChild(testElement);
        }();
    }();
    $.ui.position, $.widget("ui.accordion", {
        version: "1.11.4",
        options: {
            active: 0,
            animate: {},
            collapsible: !1,
            event: "click",
            header: "> li > :first-child,> :not(li):even",
            heightStyle: "auto",
            icons: {
                activeHeader: "ui-icon-triangle-1-s",
                header: "ui-icon-triangle-1-e"
            },
            // callbacks
            activate: null,
            beforeActivate: null
        },
        hideProps: {
            borderTopWidth: "hide",
            borderBottomWidth: "hide",
            paddingTop: "hide",
            paddingBottom: "hide",
            height: "hide"
        },
        showProps: {
            borderTopWidth: "show",
            borderBottomWidth: "show",
            paddingTop: "show",
            paddingBottom: "show",
            height: "show"
        },
        _create: function() {
            var options = this.options;
            this.prevShow = this.prevHide = $(), this.element.addClass("ui-accordion ui-widget ui-helper-reset").attr("role", "tablist"), 
            // don't allow collapsible: false and active: false / null
            options.collapsible || options.active !== !1 && null != options.active || (options.active = 0), 
            this._processPanels(), // handle negative values
            options.active < 0 && (options.active += this.headers.length), this._refresh();
        },
        _getCreateEventData: function() {
            return {
                header: this.active,
                panel: this.active.length ? this.active.next() : $()
            };
        },
        _createIcons: function() {
            var icons = this.options.icons;
            icons && ($("<span>").addClass("ui-accordion-header-icon ui-icon " + icons.header).prependTo(this.headers), 
            this.active.children(".ui-accordion-header-icon").removeClass(icons.header).addClass(icons.activeHeader), 
            this.headers.addClass("ui-accordion-icons"));
        },
        _destroyIcons: function() {
            this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove();
        },
        _destroy: function() {
            var contents;
            // clean up main element
            this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role"), 
            // clean up headers
            this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").removeUniqueId(), 
            this._destroyIcons(), // clean up content panels
            contents = this.headers.next().removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").css("display", "").removeAttr("role").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeUniqueId(), 
            "content" !== this.options.heightStyle && contents.css("height", "");
        },
        _setOption: function(key, value) {
            // _activate() will handle invalid values and update this.options
            // setting collapsible: false while collapsed; open first panel
            // #5332 - opacity doesn't cascade to positioned elements in IE
            // so we need to add the disabled class to the headers and panels
            return "active" === key ? void this._activate(value) : ("event" === key && (this.options.event && this._off(this.headers, this.options.event), 
            this._setupEvents(value)), this._super(key, value), "collapsible" !== key || value || this.options.active !== !1 || this._activate(0), 
            "icons" === key && (this._destroyIcons(), value && this._createIcons()), void ("disabled" === key && (this.element.toggleClass("ui-state-disabled", !!value).attr("aria-disabled", value), 
            this.headers.add(this.headers.next()).toggleClass("ui-state-disabled", !!value))));
        },
        _keydown: function(event) {
            if (!event.altKey && !event.ctrlKey) {
                var keyCode = $.ui.keyCode, length = this.headers.length, currentIndex = this.headers.index(event.target), toFocus = !1;
                switch (event.keyCode) {
                  case keyCode.RIGHT:
                  case keyCode.DOWN:
                    toFocus = this.headers[(currentIndex + 1) % length];
                    break;

                  case keyCode.LEFT:
                  case keyCode.UP:
                    toFocus = this.headers[(currentIndex - 1 + length) % length];
                    break;

                  case keyCode.SPACE:
                  case keyCode.ENTER:
                    this._eventHandler(event);
                    break;

                  case keyCode.HOME:
                    toFocus = this.headers[0];
                    break;

                  case keyCode.END:
                    toFocus = this.headers[length - 1];
                }
                toFocus && ($(event.target).attr("tabIndex", -1), $(toFocus).attr("tabIndex", 0), 
                toFocus.focus(), event.preventDefault());
            }
        },
        _panelKeyDown: function(event) {
            event.keyCode === $.ui.keyCode.UP && event.ctrlKey && $(event.currentTarget).prev().focus();
        },
        refresh: function() {
            var options = this.options;
            this._processPanels(), // was collapsed or no panel
            options.active === !1 && options.collapsible === !0 || !this.headers.length ? (options.active = !1, 
            this.active = $()) : options.active === !1 ? this._activate(0) : this.active.length && !$.contains(this.element[0], this.active[0]) ? // all remaining panel are disabled
            this.headers.length === this.headers.find(".ui-state-disabled").length ? (options.active = !1, 
            this.active = $()) : this._activate(Math.max(0, options.active - 1)) : // make sure active index is correct
            options.active = this.headers.index(this.active), this._destroyIcons(), this._refresh();
        },
        _processPanels: function() {
            var prevHeaders = this.headers, prevPanels = this.panels;
            this.headers = this.element.find(this.options.header).addClass("ui-accordion-header ui-state-default ui-corner-all"), 
            this.panels = this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").filter(":not(.ui-accordion-content-active)").hide(), 
            // Avoid memory leaks (#10056)
            prevPanels && (this._off(prevHeaders.not(this.headers)), this._off(prevPanels.not(this.panels)));
        },
        _refresh: function() {
            var maxHeight, options = this.options, heightStyle = options.heightStyle, parent = this.element.parent();
            this.active = this._findActive(options.active).addClass("ui-accordion-header-active ui-state-active ui-corner-top").removeClass("ui-corner-all"), 
            this.active.next().addClass("ui-accordion-content-active").show(), this.headers.attr("role", "tab").each(function() {
                var header = $(this), headerId = header.uniqueId().attr("id"), panel = header.next(), panelId = panel.uniqueId().attr("id");
                header.attr("aria-controls", panelId), panel.attr("aria-labelledby", headerId);
            }).next().attr("role", "tabpanel"), this.headers.not(this.active).attr({
                "aria-selected": "false",
                "aria-expanded": "false",
                tabIndex: -1
            }).next().attr({
                "aria-hidden": "true"
            }).hide(), // make sure at least one header is in the tab order
            this.active.length ? this.active.attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            }).next().attr({
                "aria-hidden": "false"
            }) : this.headers.eq(0).attr("tabIndex", 0), this._createIcons(), this._setupEvents(options.event), 
            "fill" === heightStyle ? (maxHeight = parent.height(), this.element.siblings(":visible").each(function() {
                var elem = $(this), position = elem.css("position");
                "absolute" !== position && "fixed" !== position && (maxHeight -= elem.outerHeight(!0));
            }), this.headers.each(function() {
                maxHeight -= $(this).outerHeight(!0);
            }), this.headers.next().each(function() {
                $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
            }).css("overflow", "auto")) : "auto" === heightStyle && (maxHeight = 0, this.headers.next().each(function() {
                maxHeight = Math.max(maxHeight, $(this).css("height", "").height());
            }).height(maxHeight));
        },
        _activate: function(index) {
            var active = this._findActive(index)[0];
            // trying to activate the already active panel
            active !== this.active[0] && (// trying to collapse, simulate a click on the currently active header
            active = active || this.active[0], this._eventHandler({
                target: active,
                currentTarget: active,
                preventDefault: $.noop
            }));
        },
        _findActive: function(selector) {
            return "number" == typeof selector ? this.headers.eq(selector) : $();
        },
        _setupEvents: function(event) {
            var events = {
                keydown: "_keydown"
            };
            event && $.each(event.split(" "), function(index, eventName) {
                events[eventName] = "_eventHandler";
            }), this._off(this.headers.add(this.headers.next())), this._on(this.headers, events), 
            this._on(this.headers.next(), {
                keydown: "_panelKeyDown"
            }), this._hoverable(this.headers), this._focusable(this.headers);
        },
        _eventHandler: function(event) {
            var options = this.options, active = this.active, clicked = $(event.currentTarget), clickedIsActive = clicked[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : clicked.next(), toHide = active.next(), eventData = {
                oldHeader: active,
                oldPanel: toHide,
                newHeader: collapsing ? $() : clicked,
                newPanel: toShow
            };
            event.preventDefault(), // click on active header, but not collapsible
            clickedIsActive && !options.collapsible || // allow canceling activation
            this._trigger("beforeActivate", event, eventData) === !1 || (options.active = collapsing ? !1 : this.headers.index(clicked), 
            // when the call to ._toggle() comes after the class changes
            // it causes a very odd bug in IE 8 (see #6720)
            this.active = clickedIsActive ? $() : clicked, this._toggle(eventData), // switch classes
            // corner classes on the previously active header stay after the animation
            active.removeClass("ui-accordion-header-active ui-state-active"), options.icons && active.children(".ui-accordion-header-icon").removeClass(options.icons.activeHeader).addClass(options.icons.header), 
            clickedIsActive || (clicked.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top"), 
            options.icons && clicked.children(".ui-accordion-header-icon").removeClass(options.icons.header).addClass(options.icons.activeHeader), 
            clicked.next().addClass("ui-accordion-content-active")));
        },
        _toggle: function(data) {
            var toShow = data.newPanel, toHide = this.prevShow.length ? this.prevShow : data.oldPanel;
            // handle activating a panel during the animation for another activation
            this.prevShow.add(this.prevHide).stop(!0, !0), this.prevShow = toShow, this.prevHide = toHide, 
            this.options.animate ? this._animate(toShow, toHide, data) : (toHide.hide(), toShow.show(), 
            this._toggleComplete(data)), toHide.attr({
                "aria-hidden": "true"
            }), toHide.prev().attr({
                "aria-selected": "false",
                "aria-expanded": "false"
            }), // if we're switching panels, remove the old header from the tab order
            // if we're opening from collapsed state, remove the previous header from the tab order
            // if we're collapsing, then keep the collapsing header in the tab order
            toShow.length && toHide.length ? toHide.prev().attr({
                tabIndex: -1,
                "aria-expanded": "false"
            }) : toShow.length && this.headers.filter(function() {
                return 0 === parseInt($(this).attr("tabIndex"), 10);
            }).attr("tabIndex", -1), toShow.attr("aria-hidden", "false").prev().attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            });
        },
        _animate: function(toShow, toHide, data) {
            var total, easing, duration, that = this, adjust = 0, boxSizing = toShow.css("box-sizing"), down = toShow.length && (!toHide.length || toShow.index() < toHide.index()), animate = this.options.animate || {}, options = down && animate.down || animate, complete = function() {
                that._toggleComplete(data);
            };
            // fall back from options to animation in case of partial down settings
            return "number" == typeof options && (duration = options), "string" == typeof options && (easing = options), 
            easing = easing || options.easing || animate.easing, duration = duration || options.duration || animate.duration, 
            toHide.length ? toShow.length ? (total = toShow.show().outerHeight(), toHide.animate(this.hideProps, {
                duration: duration,
                easing: easing,
                step: function(now, fx) {
                    fx.now = Math.round(now);
                }
            }), void toShow.hide().animate(this.showProps, {
                duration: duration,
                easing: easing,
                complete: complete,
                step: function(now, fx) {
                    fx.now = Math.round(now), "height" !== fx.prop ? "content-box" === boxSizing && (adjust += fx.now) : "content" !== that.options.heightStyle && (fx.now = Math.round(total - toHide.outerHeight() - adjust), 
                    adjust = 0);
                }
            })) : toHide.animate(this.hideProps, duration, easing, complete) : toShow.animate(this.showProps, duration, easing, complete);
        },
        _toggleComplete: function(data) {
            var toHide = data.oldPanel;
            toHide.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all"), 
            // Work around for rendering bug in IE (#5421)
            toHide.length && (toHide.parent()[0].className = toHide.parent()[0].className), 
            this._trigger("activate", null, data);
        }
    }), $.widget("ui.menu", {
        version: "1.11.4",
        defaultElement: "<ul>",
        delay: 300,
        options: {
            icons: {
                submenu: "ui-icon-carat-1-e"
            },
            items: "> *",
            menus: "ul",
            position: {
                my: "left-1 top",
                at: "right top"
            },
            role: "menu",
            // callbacks
            blur: null,
            focus: null,
            select: null
        },
        _create: function() {
            this.activeMenu = this.element, // Flag used to prevent firing of the click handler
            // as the event bubbles up through nested menus
            this.mouseHandled = !1, this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content").toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length).attr({
                role: this.options.role,
                tabIndex: 0
            }), this.options.disabled && this.element.addClass("ui-state-disabled").attr("aria-disabled", "true"), 
            this._on({
                // Prevent focus from sticking to links inside menu after clicking
                // them (focus should always stay on UL during navigation).
                "mousedown .ui-menu-item": function(event) {
                    event.preventDefault();
                },
                "click .ui-menu-item": function(event) {
                    var target = $(event.target);
                    !this.mouseHandled && target.not(".ui-state-disabled").length && (this.select(event), 
                    // Only set the mouseHandled flag if the event will bubble, see #9469.
                    event.isPropagationStopped() || (this.mouseHandled = !0), // Open submenu on click
                    target.has(".ui-menu").length ? this.expand(event) : !this.element.is(":focus") && $(this.document[0].activeElement).closest(".ui-menu").length && (// Redirect focus to the menu
                    this.element.trigger("focus", [ !0 ]), // If the active item is on the top level, let it stay active.
                    // Otherwise, blur the active item since it is no longer visible.
                    this.active && 1 === this.active.parents(".ui-menu").length && clearTimeout(this.timer)));
                },
                "mouseenter .ui-menu-item": function(event) {
                    // Ignore mouse events while typeahead is active, see #10458.
                    // Prevents focusing the wrong item when typeahead causes a scroll while the mouse
                    // is over an item in the menu
                    if (!this.previousFilter) {
                        var target = $(event.currentTarget);
                        // Remove ui-state-active class from siblings of the newly focused menu item
                        // to avoid a jump caused by adjacent elements both having a class with a border
                        target.siblings(".ui-state-active").removeClass("ui-state-active"), this.focus(event, target);
                    }
                },
                mouseleave: "collapseAll",
                "mouseleave .ui-menu": "collapseAll",
                focus: function(event, keepActiveItem) {
                    // If there's already an active item, keep it active
                    // If not, activate the first item
                    var item = this.active || this.element.find(this.options.items).eq(0);
                    keepActiveItem || this.focus(event, item);
                },
                blur: function(event) {
                    this._delay(function() {
                        $.contains(this.element[0], this.document[0].activeElement) || this.collapseAll(event);
                    });
                },
                keydown: "_keydown"
            }), this.refresh(), // Clicks outside of a menu collapse any open menus
            this._on(this.document, {
                click: function(event) {
                    this._closeOnDocumentClick(event) && this.collapseAll(event), // Reset the mouseHandled flag
                    this.mouseHandled = !1;
                }
            });
        },
        _destroy: function() {
            // Destroy (sub)menus
            this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeClass("ui-menu ui-widget ui-widget-content ui-menu-icons ui-front").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show(), 
            // Destroy menu items
            this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").removeUniqueId().removeClass("ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function() {
                var elem = $(this);
                elem.data("ui-menu-submenu-carat") && elem.remove();
            }), // Destroy menu dividers
            this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content");
        },
        _keydown: function(event) {
            var match, prev, character, skip, preventDefault = !0;
            switch (event.keyCode) {
              case $.ui.keyCode.PAGE_UP:
                this.previousPage(event);
                break;

              case $.ui.keyCode.PAGE_DOWN:
                this.nextPage(event);
                break;

              case $.ui.keyCode.HOME:
                this._move("first", "first", event);
                break;

              case $.ui.keyCode.END:
                this._move("last", "last", event);
                break;

              case $.ui.keyCode.UP:
                this.previous(event);
                break;

              case $.ui.keyCode.DOWN:
                this.next(event);
                break;

              case $.ui.keyCode.LEFT:
                this.collapse(event);
                break;

              case $.ui.keyCode.RIGHT:
                this.active && !this.active.is(".ui-state-disabled") && this.expand(event);
                break;

              case $.ui.keyCode.ENTER:
              case $.ui.keyCode.SPACE:
                this._activate(event);
                break;

              case $.ui.keyCode.ESCAPE:
                this.collapse(event);
                break;

              default:
                preventDefault = !1, prev = this.previousFilter || "", character = String.fromCharCode(event.keyCode), 
                skip = !1, clearTimeout(this.filterTimer), character === prev ? skip = !0 : character = prev + character, 
                match = this._filterMenuItems(character), match = skip && -1 !== match.index(this.active.next()) ? this.active.nextAll(".ui-menu-item") : match, 
                // If no matches on the current filter, reset to the last character pressed
                // to move down the menu to the first item that starts with that character
                match.length || (character = String.fromCharCode(event.keyCode), match = this._filterMenuItems(character)), 
                match.length ? (this.focus(event, match), this.previousFilter = character, this.filterTimer = this._delay(function() {
                    delete this.previousFilter;
                }, 1e3)) : delete this.previousFilter;
            }
            preventDefault && event.preventDefault();
        },
        _activate: function(event) {
            this.active.is(".ui-state-disabled") || (this.active.is("[aria-haspopup='true']") ? this.expand(event) : this.select(event));
        },
        refresh: function() {
            var menus, items, that = this, icon = this.options.icons.submenu, submenus = this.element.find(this.options.menus);
            this.element.toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length), 
            // Initialize nested menus
            submenus.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-front").hide().attr({
                role: this.options.role,
                "aria-hidden": "true",
                "aria-expanded": "false"
            }).each(function() {
                var menu = $(this), item = menu.parent(), submenuCarat = $("<span>").addClass("ui-menu-icon ui-icon " + icon).data("ui-menu-submenu-carat", !0);
                item.attr("aria-haspopup", "true").prepend(submenuCarat), menu.attr("aria-labelledby", item.attr("id"));
            }), menus = submenus.add(this.element), items = menus.find(this.options.items), 
            // Initialize menu-items containing spaces and/or dashes only as dividers
            items.not(".ui-menu-item").each(function() {
                var item = $(this);
                that._isDivider(item) && item.addClass("ui-widget-content ui-menu-divider");
            }), // Don't refresh list items that are already adapted
            items.not(".ui-menu-item, .ui-menu-divider").addClass("ui-menu-item").uniqueId().attr({
                tabIndex: -1,
                role: this._itemRole()
            }), // Add aria-disabled attribute to any disabled menu item
            items.filter(".ui-state-disabled").attr("aria-disabled", "true"), // If the active item has been removed, blur the menu
            this.active && !$.contains(this.element[0], this.active[0]) && this.blur();
        },
        _itemRole: function() {
            return {
                menu: "menuitem",
                listbox: "option"
            }[this.options.role];
        },
        _setOption: function(key, value) {
            "icons" === key && this.element.find(".ui-menu-icon").removeClass(this.options.icons.submenu).addClass(value.submenu), 
            "disabled" === key && this.element.toggleClass("ui-state-disabled", !!value).attr("aria-disabled", value), 
            this._super(key, value);
        },
        focus: function(event, item) {
            var nested, focused;
            this.blur(event, event && "focus" === event.type), this._scrollIntoView(item), this.active = item.first(), 
            focused = this.active.addClass("ui-state-focus").removeClass("ui-state-active"), 
            // Only update aria-activedescendant if there's a role
            // otherwise we assume focus is managed elsewhere
            this.options.role && this.element.attr("aria-activedescendant", focused.attr("id")), 
            // Highlight active parent menu item, if any
            this.active.parent().closest(".ui-menu-item").addClass("ui-state-active"), event && "keydown" === event.type ? this._close() : this.timer = this._delay(function() {
                this._close();
            }, this.delay), nested = item.children(".ui-menu"), nested.length && event && /^mouse/.test(event.type) && this._startOpening(nested), 
            this.activeMenu = item.parent(), this._trigger("focus", event, {
                item: item
            });
        },
        _scrollIntoView: function(item) {
            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
            this._hasScroll() && (borderTop = parseFloat($.css(this.activeMenu[0], "borderTopWidth")) || 0, 
            paddingTop = parseFloat($.css(this.activeMenu[0], "paddingTop")) || 0, offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop, 
            scroll = this.activeMenu.scrollTop(), elementHeight = this.activeMenu.height(), 
            itemHeight = item.outerHeight(), 0 > offset ? this.activeMenu.scrollTop(scroll + offset) : offset + itemHeight > elementHeight && this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight));
        },
        blur: function(event, fromFocus) {
            fromFocus || clearTimeout(this.timer), this.active && (this.active.removeClass("ui-state-focus"), 
            this.active = null, this._trigger("blur", event, {
                item: this.active
            }));
        },
        _startOpening: function(submenu) {
            clearTimeout(this.timer), // Don't open if already open fixes a Firefox bug that caused a .5 pixel
            // shift in the submenu position when mousing over the carat icon
            "true" === submenu.attr("aria-hidden") && (this.timer = this._delay(function() {
                this._close(), this._open(submenu);
            }, this.delay));
        },
        _open: function(submenu) {
            var position = $.extend({
                of: this.active
            }, this.options.position);
            clearTimeout(this.timer), this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden", "true"), 
            submenu.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(position);
        },
        collapseAll: function(event, all) {
            clearTimeout(this.timer), this.timer = this._delay(function() {
                // If we were passed an event, look for the submenu that contains the event
                var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(".ui-menu"));
                // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
                currentMenu.length || (currentMenu = this.element), this._close(currentMenu), this.blur(event), 
                this.activeMenu = currentMenu;
            }, this.delay);
        },
        // With no arguments, closes the currently active menu - if nothing is active
        // it closes all menus.  If passed an argument, it will search for menus BELOW
        _close: function(startMenu) {
            startMenu || (startMenu = this.active ? this.active.parent() : this.element), startMenu.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false").end().find(".ui-state-active").not(".ui-state-focus").removeClass("ui-state-active");
        },
        _closeOnDocumentClick: function(event) {
            return !$(event.target).closest(".ui-menu").length;
        },
        _isDivider: function(item) {
            // Match hyphen, em dash, en dash
            return !/[^\-\u2014\u2013\s]/.test(item.text());
        },
        collapse: function(event) {
            var newItem = this.active && this.active.parent().closest(".ui-menu-item", this.element);
            newItem && newItem.length && (this._close(), this.focus(event, newItem));
        },
        expand: function(event) {
            var newItem = this.active && this.active.children(".ui-menu ").find(this.options.items).first();
            newItem && newItem.length && (this._open(newItem.parent()), // Delay so Firefox will not hide activedescendant change in expanding submenu from AT
            this._delay(function() {
                this.focus(event, newItem);
            }));
        },
        next: function(event) {
            this._move("next", "first", event);
        },
        previous: function(event) {
            this._move("prev", "last", event);
        },
        isFirstItem: function() {
            return this.active && !this.active.prevAll(".ui-menu-item").length;
        },
        isLastItem: function() {
            return this.active && !this.active.nextAll(".ui-menu-item").length;
        },
        _move: function(direction, filter, event) {
            var next;
            this.active && (next = "first" === direction || "last" === direction ? this.active["first" === direction ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1) : this.active[direction + "All"](".ui-menu-item").eq(0)), 
            next && next.length && this.active || (next = this.activeMenu.find(this.options.items)[filter]()), 
            this.focus(event, next);
        },
        nextPage: function(event) {
            var item, base, height;
            return this.active ? void (this.isLastItem() || (this._hasScroll() ? (base = this.active.offset().top, 
            height = this.element.height(), this.active.nextAll(".ui-menu-item").each(function() {
                return item = $(this), item.offset().top - base - height < 0;
            }), this.focus(event, item)) : this.focus(event, this.activeMenu.find(this.options.items)[this.active ? "last" : "first"]()))) : void this.next(event);
        },
        previousPage: function(event) {
            var item, base, height;
            return this.active ? void (this.isFirstItem() || (this._hasScroll() ? (base = this.active.offset().top, 
            height = this.element.height(), this.active.prevAll(".ui-menu-item").each(function() {
                return item = $(this), item.offset().top - base + height > 0;
            }), this.focus(event, item)) : this.focus(event, this.activeMenu.find(this.options.items).first()))) : void this.next(event);
        },
        _hasScroll: function() {
            return this.element.outerHeight() < this.element.prop("scrollHeight");
        },
        select: function(event) {
            // TODO: It should never be possible to not have an active item at this
            // point, but the tests don't trigger mouseenter before click.
            this.active = this.active || $(event.target).closest(".ui-menu-item");
            var ui = {
                item: this.active
            };
            this.active.has(".ui-menu").length || this.collapseAll(event, !0), this._trigger("select", event, ui);
        },
        _filterMenuItems: function(character) {
            var escapedCharacter = character.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"), regex = new RegExp("^" + escapedCharacter, "i");
            return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function() {
                return regex.test($.trim($(this).text()));
            });
        }
    });
    /*!
 * jQuery UI Autocomplete 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/autocomplete/
 */
    $.widget("ui.autocomplete", {
        version: "1.11.4",
        defaultElement: "<input>",
        options: {
            appendTo: null,
            autoFocus: !1,
            delay: 300,
            minLength: 1,
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            source: null,
            // callbacks
            change: null,
            close: null,
            focus: null,
            open: null,
            response: null,
            search: null,
            select: null
        },
        requestIndex: 0,
        pending: 0,
        _create: function() {
            // Some browsers only repeat keydown events, not keypress events,
            // so we use the suppressKeyPress flag to determine if we've already
            // handled the keydown event. #7269
            // Unfortunately the code for & in keypress is the same as the up arrow,
            // so we use the suppressKeyPressRepeat flag to avoid handling keypress
            // events when we know the keydown event was used to modify the
            // search term. #7799
            var suppressKeyPress, suppressKeyPressRepeat, suppressInput, nodeName = this.element[0].nodeName.toLowerCase(), isTextarea = "textarea" === nodeName, isInput = "input" === nodeName;
            this.isMultiLine = // Textareas are always multi-line
            isTextarea ? !0 : // Inputs are always single-line, even if inside a contentEditable element
            // IE also treats inputs as contentEditable
            isInput ? !1 : // All other element types are determined by whether or not they're contentEditable
            this.element.prop("isContentEditable"), this.valueMethod = this.element[isTextarea || isInput ? "val" : "text"], 
            this.isNewMenu = !0, this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off"), 
            this._on(this.element, {
                keydown: function(event) {
                    if (this.element.prop("readOnly")) return suppressKeyPress = !0, suppressInput = !0, 
                    void (suppressKeyPressRepeat = !0);
                    suppressKeyPress = !1, suppressInput = !1, suppressKeyPressRepeat = !1;
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                      case keyCode.PAGE_UP:
                        suppressKeyPress = !0, this._move("previousPage", event);
                        break;

                      case keyCode.PAGE_DOWN:
                        suppressKeyPress = !0, this._move("nextPage", event);
                        break;

                      case keyCode.UP:
                        suppressKeyPress = !0, this._keyEvent("previous", event);
                        break;

                      case keyCode.DOWN:
                        suppressKeyPress = !0, this._keyEvent("next", event);
                        break;

                      case keyCode.ENTER:
                        // when menu is open and has focus
                        this.menu.active && (// #6055 - Opera still allows the keypress to occur
                        // which causes forms to submit
                        suppressKeyPress = !0, event.preventDefault(), this.menu.select(event));
                        break;

                      case keyCode.TAB:
                        this.menu.active && this.menu.select(event);
                        break;

                      case keyCode.ESCAPE:
                        this.menu.element.is(":visible") && (this.isMultiLine || this._value(this.term), 
                        this.close(event), // Different browsers have different default behavior for escape
                        // Single press can mean undo or clear
                        // Double press in IE means clear the whole form
                        event.preventDefault());
                        break;

                      default:
                        suppressKeyPressRepeat = !0, // search timeout should be triggered before the input value is changed
                        this._searchTimeout(event);
                    }
                },
                keypress: function(event) {
                    if (suppressKeyPress) return suppressKeyPress = !1, void ((!this.isMultiLine || this.menu.element.is(":visible")) && event.preventDefault());
                    if (!suppressKeyPressRepeat) {
                        // replicate some key handlers to allow them to repeat in Firefox and Opera
                        var keyCode = $.ui.keyCode;
                        switch (event.keyCode) {
                          case keyCode.PAGE_UP:
                            this._move("previousPage", event);
                            break;

                          case keyCode.PAGE_DOWN:
                            this._move("nextPage", event);
                            break;

                          case keyCode.UP:
                            this._keyEvent("previous", event);
                            break;

                          case keyCode.DOWN:
                            this._keyEvent("next", event);
                        }
                    }
                },
                input: function(event) {
                    return suppressInput ? (suppressInput = !1, void event.preventDefault()) : void this._searchTimeout(event);
                },
                focus: function() {
                    this.selectedItem = null, this.previous = this._value();
                },
                blur: function(event) {
                    return this.cancelBlur ? void delete this.cancelBlur : (clearTimeout(this.searching), 
                    this.close(event), void this._change(event));
                }
            }), this._initSource(), this.menu = $("<ul>").addClass("ui-autocomplete ui-front").appendTo(this._appendTo()).menu({
                // disable ARIA support, the live region takes care of that
                role: null
            }).hide().menu("instance"), this._on(this.menu.element, {
                mousedown: function(event) {
                    // prevent moving focus out of the text field
                    event.preventDefault(), // IE doesn't prevent moving focus even with event.preventDefault()
                    // so we set a flag to know when we should ignore the blur event
                    this.cancelBlur = !0, this._delay(function() {
                        delete this.cancelBlur;
                    });
                    // clicking on the scrollbar causes focus to shift to the body
                    // but we can't detect a mouseup or a click immediately afterward
                    // so we have to track the next mousedown and close the menu if
                    // the user clicks somewhere outside of the autocomplete
                    var menuElement = this.menu.element[0];
                    $(event.target).closest(".ui-menu-item").length || this._delay(function() {
                        var that = this;
                        this.document.one("mousedown", function(event) {
                            event.target === that.element[0] || event.target === menuElement || $.contains(menuElement, event.target) || that.close();
                        });
                    });
                },
                menufocus: function(event, ui) {
                    var label, item;
                    // support: Firefox
                    // Prevent accidental activation of menu items in Firefox (#7024 #9118)
                    // support: Firefox
                    // Prevent accidental activation of menu items in Firefox (#7024 #9118)
                    // Announce the value in the liveRegion
                    return this.isNewMenu && (this.isNewMenu = !1, event.originalEvent && /^mouse/.test(event.originalEvent.type)) ? (this.menu.blur(), 
                    void this.document.one("mousemove", function() {
                        $(event.target).trigger(event.originalEvent);
                    })) : (item = ui.item.data("ui-autocomplete-item"), !1 !== this._trigger("focus", event, {
                        item: item
                    }) && event.originalEvent && /^key/.test(event.originalEvent.type) && this._value(item.value), 
                    label = ui.item.attr("aria-label") || item.value, void (label && $.trim(label).length && (this.liveRegion.children().hide(), 
                    $("<div>").text(label).appendTo(this.liveRegion))));
                },
                menuselect: function(event, ui) {
                    var item = ui.item.data("ui-autocomplete-item"), previous = this.previous;
                    // only trigger when focus was lost (click on menu)
                    this.element[0] !== this.document[0].activeElement && (this.element.focus(), this.previous = previous, 
                    // #6109 - IE triggers two focus events and the second
                    // is asynchronous, so we need to reset the previous
                    // term synchronously and asynchronously :-(
                    this._delay(function() {
                        this.previous = previous, this.selectedItem = item;
                    })), !1 !== this._trigger("select", event, {
                        item: item
                    }) && this._value(item.value), // reset the term after the select event
                    // this allows custom select handling to work properly
                    this.term = this._value(), this.close(event), this.selectedItem = item;
                }
            }), this.liveRegion = $("<span>", {
                role: "status",
                "aria-live": "assertive",
                "aria-relevant": "additions"
            }).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body), // turning off autocomplete prevents the browser from remembering the
            // value when navigating through history, so we re-enable autocomplete
            // if the page is unloaded before the widget is destroyed. #7790
            this._on(this.window, {
                beforeunload: function() {
                    this.element.removeAttr("autocomplete");
                }
            });
        },
        _destroy: function() {
            clearTimeout(this.searching), this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete"), 
            this.menu.element.remove(), this.liveRegion.remove();
        },
        _setOption: function(key, value) {
            this._super(key, value), "source" === key && this._initSource(), "appendTo" === key && this.menu.element.appendTo(this._appendTo()), 
            "disabled" === key && value && this.xhr && this.xhr.abort();
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            return element && (element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0)), 
            element && element[0] || (element = this.element.closest(".ui-front")), element.length || (element = this.document[0].body), 
            element;
        },
        _initSource: function() {
            var array, url, that = this;
            $.isArray(this.options.source) ? (array = this.options.source, this.source = function(request, response) {
                response($.ui.autocomplete.filter(array, request.term));
            }) : "string" == typeof this.options.source ? (url = this.options.source, this.source = function(request, response) {
                that.xhr && that.xhr.abort(), that.xhr = $.ajax({
                    url: url,
                    data: request,
                    dataType: "json",
                    success: function(data) {
                        response(data);
                    },
                    error: function() {
                        response([]);
                    }
                });
            }) : this.source = this.options.source;
        },
        _searchTimeout: function(event) {
            clearTimeout(this.searching), this.searching = this._delay(function() {
                // Search if the value has changed, or if the user retypes the same value (see #7434)
                var equalValues = this.term === this._value(), menuVisible = this.menu.element.is(":visible"), modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;
                (!equalValues || equalValues && !menuVisible && !modifierKey) && (this.selectedItem = null, 
                this.search(null, event));
            }, this.options.delay);
        },
        search: function(value, event) {
            // always save the actual value, not the one passed as an argument
            return value = null != value ? value : this._value(), this.term = this._value(), 
            value.length < this.options.minLength ? this.close(event) : this._trigger("search", event) !== !1 ? this._search(value) : void 0;
        },
        _search: function(value) {
            this.pending++, this.element.addClass("ui-autocomplete-loading"), this.cancelSearch = !1, 
            this.source({
                term: value
            }, this._response());
        },
        _response: function() {
            var index = ++this.requestIndex;
            return $.proxy(function(content) {
                index === this.requestIndex && this.__response(content), this.pending--, this.pending || this.element.removeClass("ui-autocomplete-loading");
            }, this);
        },
        __response: function(content) {
            content && (content = this._normalize(content)), this._trigger("response", null, {
                content: content
            }), !this.options.disabled && content && content.length && !this.cancelSearch ? (this._suggest(content), 
            this._trigger("open")) : // use ._close() instead of .close() so we don't cancel future searches
            this._close();
        },
        close: function(event) {
            this.cancelSearch = !0, this._close(event);
        },
        _close: function(event) {
            this.menu.element.is(":visible") && (this.menu.element.hide(), this.menu.blur(), 
            this.isNewMenu = !0, this._trigger("close", event));
        },
        _change: function(event) {
            this.previous !== this._value() && this._trigger("change", event, {
                item: this.selectedItem
            });
        },
        _normalize: function(items) {
            // assume all items have the right format when the first item is complete
            // assume all items have the right format when the first item is complete
            return items.length && items[0].label && items[0].value ? items : $.map(items, function(item) {
                return "string" == typeof item ? {
                    label: item,
                    value: item
                } : $.extend({}, item, {
                    label: item.label || item.value,
                    value: item.value || item.label
                });
            });
        },
        _suggest: function(items) {
            var ul = this.menu.element.empty();
            this._renderMenu(ul, items), this.isNewMenu = !0, this.menu.refresh(), // size and position menu
            ul.show(), this._resizeMenu(), ul.position($.extend({
                of: this.element
            }, this.options.position)), this.options.autoFocus && this.menu.next();
        },
        _resizeMenu: function() {
            var ul = this.menu.element;
            ul.outerWidth(Math.max(// Firefox wraps long text (possibly a rounding bug)
            // so we add 1px to avoid the wrapping (#7513)
            ul.width("").outerWidth() + 1, this.element.outerWidth()));
        },
        _renderMenu: function(ul, items) {
            var that = this;
            $.each(items, function(index, item) {
                that._renderItemData(ul, item);
            });
        },
        _renderItemData: function(ul, item) {
            return this._renderItem(ul, item).data("ui-autocomplete-item", item);
        },
        _renderItem: function(ul, item) {
            return $("<li>").text(item.label).appendTo(ul);
        },
        _move: function(direction, event) {
            return this.menu.element.is(":visible") ? this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction) ? (this.isMultiLine || this._value(this.term), 
            void this.menu.blur()) : void this.menu[direction](event) : void this.search(null, event);
        },
        widget: function() {
            return this.menu.element;
        },
        _value: function() {
            return this.valueMethod.apply(this.element, arguments);
        },
        _keyEvent: function(keyEvent, event) {
            (!this.isMultiLine || this.menu.element.is(":visible")) && (this._move(keyEvent, event), 
            // prevents moving cursor to beginning/end of the text field in some browsers
            event.preventDefault());
        }
    }), $.extend($.ui.autocomplete, {
        escapeRegex: function(value) {
            return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
        },
        filter: function(array, term) {
            var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");
            return $.grep(array, function(value) {
                return matcher.test(value.label || value.value || value);
            });
        }
    }), // live region extension, adding a `messages` option
    // NOTE: This is an experimental API. We are still investigating
    // a full solution for string manipulation and internationalization.
    $.widget("ui.autocomplete", $.ui.autocomplete, {
        options: {
            messages: {
                noResults: "No search results.",
                results: function(amount) {
                    return amount + (amount > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate.";
                }
            }
        },
        __response: function(content) {
            var message;
            this._superApply(arguments), this.options.disabled || this.cancelSearch || (message = content && content.length ? this.options.messages.results(content.length) : this.options.messages.noResults, 
            this.liveRegion.children().hide(), $("<div>").text(message).appendTo(this.liveRegion));
        }
    });
    var lastActive, baseClasses = ($.ui.autocomplete, "ui-button ui-widget ui-state-default ui-corner-all"), typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only", formResetHandler = function() {
        var form = $(this);
        setTimeout(function() {
            form.find(":ui-button").button("refresh");
        }, 1);
    }, radioGroup = function(radio) {
        var name = radio.name, form = radio.form, radios = $([]);
        return name && (name = name.replace(/'/g, "\\'"), radios = form ? $(form).find("[name='" + name + "'][type=radio]") : $("[name='" + name + "'][type=radio]", radio.ownerDocument).filter(function() {
            return !this.form;
        })), radios;
    };
    $.widget("ui.button", {
        version: "1.11.4",
        defaultElement: "<button>",
        options: {
            disabled: null,
            text: !0,
            label: null,
            icons: {
                primary: null,
                secondary: null
            }
        },
        _create: function() {
            this.element.closest("form").unbind("reset" + this.eventNamespace).bind("reset" + this.eventNamespace, formResetHandler), 
            "boolean" != typeof this.options.disabled ? this.options.disabled = !!this.element.prop("disabled") : this.element.prop("disabled", this.options.disabled), 
            this._determineButtonType(), this.hasTitle = !!this.buttonElement.attr("title");
            var that = this, options = this.options, toggleButton = "checkbox" === this.type || "radio" === this.type, activeClass = toggleButton ? "" : "ui-state-active";
            null === options.label && (options.label = "input" === this.type ? this.buttonElement.val() : this.buttonElement.html()), 
            this._hoverable(this.buttonElement), this.buttonElement.addClass(baseClasses).attr("role", "button").bind("mouseenter" + this.eventNamespace, function() {
                options.disabled || this === lastActive && $(this).addClass("ui-state-active");
            }).bind("mouseleave" + this.eventNamespace, function() {
                options.disabled || $(this).removeClass(activeClass);
            }).bind("click" + this.eventNamespace, function(event) {
                options.disabled && (event.preventDefault(), event.stopImmediatePropagation());
            }), // Can't use _focusable() because the element that receives focus
            // and the element that gets the ui-state-focus class are different
            this._on({
                focus: function() {
                    this.buttonElement.addClass("ui-state-focus");
                },
                blur: function() {
                    this.buttonElement.removeClass("ui-state-focus");
                }
            }), toggleButton && this.element.bind("change" + this.eventNamespace, function() {
                that.refresh();
            }), "checkbox" === this.type ? this.buttonElement.bind("click" + this.eventNamespace, function() {
                return options.disabled ? !1 : void 0;
            }) : "radio" === this.type ? this.buttonElement.bind("click" + this.eventNamespace, function() {
                if (options.disabled) return !1;
                $(this).addClass("ui-state-active"), that.buttonElement.attr("aria-pressed", "true");
                var radio = that.element[0];
                radioGroup(radio).not(radio).map(function() {
                    return $(this).button("widget")[0];
                }).removeClass("ui-state-active").attr("aria-pressed", "false");
            }) : (this.buttonElement.bind("mousedown" + this.eventNamespace, function() {
                return options.disabled ? !1 : ($(this).addClass("ui-state-active"), lastActive = this, 
                void that.document.one("mouseup", function() {
                    lastActive = null;
                }));
            }).bind("mouseup" + this.eventNamespace, function() {
                return options.disabled ? !1 : void $(this).removeClass("ui-state-active");
            }).bind("keydown" + this.eventNamespace, function(event) {
                return options.disabled ? !1 : void ((event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) && $(this).addClass("ui-state-active"));
            }).bind("keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
                $(this).removeClass("ui-state-active");
            }), this.buttonElement.is("a") && this.buttonElement.keyup(function(event) {
                event.keyCode === $.ui.keyCode.SPACE && // TODO pass through original event correctly (just as 2nd argument doesn't work)
                $(this).click();
            })), this._setOption("disabled", options.disabled), this._resetButton();
        },
        _determineButtonType: function() {
            var ancestor, labelSelector, checked;
            this.element.is("[type=checkbox]") ? this.type = "checkbox" : this.element.is("[type=radio]") ? this.type = "radio" : this.element.is("input") ? this.type = "input" : this.type = "button", 
            "checkbox" === this.type || "radio" === this.type ? (// we don't search against the document in case the element
            // is disconnected from the DOM
            ancestor = this.element.parents().last(), labelSelector = "label[for='" + this.element.attr("id") + "']", 
            this.buttonElement = ancestor.find(labelSelector), this.buttonElement.length || (ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings(), 
            this.buttonElement = ancestor.filter(labelSelector), this.buttonElement.length || (this.buttonElement = ancestor.find(labelSelector))), 
            this.element.addClass("ui-helper-hidden-accessible"), checked = this.element.is(":checked"), 
            checked && this.buttonElement.addClass("ui-state-active"), this.buttonElement.prop("aria-pressed", checked)) : this.buttonElement = this.element;
        },
        widget: function() {
            return this.buttonElement;
        },
        _destroy: function() {
            this.element.removeClass("ui-helper-hidden-accessible"), this.buttonElement.removeClass(baseClasses + " ui-state-active " + typeClasses).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html()), 
            this.hasTitle || this.buttonElement.removeAttr("title");
        },
        _setOption: function(key, value) {
            return this._super(key, value), "disabled" === key ? (this.widget().toggleClass("ui-state-disabled", !!value), 
            this.element.prop("disabled", !!value), void (value && ("checkbox" === this.type || "radio" === this.type ? this.buttonElement.removeClass("ui-state-focus") : this.buttonElement.removeClass("ui-state-focus ui-state-active")))) : void this._resetButton();
        },
        refresh: function() {
            //See #8237 & #8828
            var isDisabled = this.element.is("input, button") ? this.element.is(":disabled") : this.element.hasClass("ui-button-disabled");
            isDisabled !== this.options.disabled && this._setOption("disabled", isDisabled), 
            "radio" === this.type ? radioGroup(this.element[0]).each(function() {
                $(this).is(":checked") ? $(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true") : $(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false");
            }) : "checkbox" === this.type && (this.element.is(":checked") ? this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true") : this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false"));
        },
        _resetButton: function() {
            if ("input" === this.type) return void (this.options.label && this.element.val(this.options.label));
            var buttonElement = this.buttonElement.removeClass(typeClasses), buttonText = $("<span></span>", this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(buttonElement.empty()).text(), icons = this.options.icons, multipleIcons = icons.primary && icons.secondary, buttonClasses = [];
            icons.primary || icons.secondary ? (this.options.text && buttonClasses.push("ui-button-text-icon" + (multipleIcons ? "s" : icons.primary ? "-primary" : "-secondary")), 
            icons.primary && buttonElement.prepend("<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>"), 
            icons.secondary && buttonElement.append("<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>"), 
            this.options.text || (buttonClasses.push(multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only"), 
            this.hasTitle || buttonElement.attr("title", $.trim(buttonText)))) : buttonClasses.push("ui-button-text-only"), 
            buttonElement.addClass(buttonClasses.join(" "));
        }
    }), $.widget("ui.buttonset", {
        version: "1.11.4",
        options: {
            items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
        },
        _create: function() {
            this.element.addClass("ui-buttonset");
        },
        _init: function() {
            this.refresh();
        },
        _setOption: function(key, value) {
            "disabled" === key && this.buttons.button("option", key, value), this._super(key, value);
        },
        refresh: function() {
            var rtl = "rtl" === this.element.css("direction"), allButtons = this.element.find(this.options.items), existingButtons = allButtons.filter(":ui-button");
            // Initialize new buttons
            allButtons.not(":ui-button").button(), // Refresh existing buttons
            existingButtons.button("refresh"), this.buttons = allButtons.map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(rtl ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(rtl ? "ui-corner-left" : "ui-corner-right").end().end();
        },
        _destroy: function() {
            this.element.removeClass("ui-buttonset"), this.buttons.map(function() {
                return $(this).button("widget")[0];
            }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
        }
    });
    $.ui.button;
    /*!
 * jQuery UI Datepicker 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/datepicker/
 */
    $.extend($.ui, {
        datepicker: {
            version: "1.11.4"
        }
    });
    var datepicker_instActive;
    $.extend(Datepicker.prototype, {
        /* Class name added to elements to indicate already configured with a date picker. */
        markerClassName: "hasDatepicker",
        //Keep track of the maximum number of rows displayed (see #7043)
        maxRows: 4,
        // TODO rename to "widget" when switching to widget factory
        _widgetDatepicker: function() {
            return this.dpDiv;
        },
        /* Override the default settings for all instances of the date picker.
	 * @param  settings  object - the new settings to use as defaults (anonymous object)
	 * @return the manager object
	 */
        setDefaults: function(settings) {
            return datepicker_extendRemove(this._defaults, settings || {}), this;
        },
        /* Attach the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
	 */
        _attachDatepicker: function(target, settings) {
            var nodeName, inline, inst;
            nodeName = target.nodeName.toLowerCase(), inline = "div" === nodeName || "span" === nodeName, 
            target.id || (this.uuid += 1, target.id = "dp" + this.uuid), inst = this._newInst($(target), inline), 
            inst.settings = $.extend({}, settings || {}), "input" === nodeName ? this._connectDatepicker(target, inst) : inline && this._inlineDatepicker(target, inst);
        },
        /* Create a new instance object. */
        _newInst: function(target, inline) {
            var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
            // escape jQuery meta chars
            return {
                id: id,
                input: target,
                // associated target
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0,
                // current selection
                drawMonth: 0,
                drawYear: 0,
                // month being drawn
                inline: inline,
                // is datepicker inline or not
                dpDiv: inline ? // presentation div
                datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) : this.dpDiv
            };
        },
        /* Attach the date picker to an input field. */
        _connectDatepicker: function(target, inst) {
            var input = $(target);
            inst.append = $([]), inst.trigger = $([]), input.hasClass(this.markerClassName) || (this._attachments(input, inst), 
            input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp), 
            this._autoSize(inst), $.data(target, "datepicker", inst), //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
            inst.settings.disabled && this._disableDatepicker(target));
        },
        /* Make attachments based on settings. */
        _attachments: function(input, inst) {
            var showOn, buttonText, buttonImage, appendText = this._get(inst, "appendText"), isRTL = this._get(inst, "isRTL");
            inst.append && inst.append.remove(), appendText && (inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>"), 
            input[isRTL ? "before" : "after"](inst.append)), input.unbind("focus", this._showDatepicker), 
            inst.trigger && inst.trigger.remove(), showOn = this._get(inst, "showOn"), ("focus" === showOn || "both" === showOn) && // pop-up date picker when in the marked field
            input.focus(this._showDatepicker), ("button" === showOn || "both" === showOn) && (// pop-up date picker when button clicked
            buttonText = this._get(inst, "buttonText"), buttonImage = this._get(inst, "buttonImage"), 
            inst.trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({
                src: buttonImage,
                alt: buttonText,
                title: buttonText
            }) : $("<button type='button'></button>").addClass(this._triggerClass).html(buttonImage ? $("<img/>").attr({
                src: buttonImage,
                alt: buttonText,
                title: buttonText
            }) : buttonText)), input[isRTL ? "before" : "after"](inst.trigger), inst.trigger.click(function() {
                return $.datepicker._datepickerShowing && $.datepicker._lastInput === input[0] ? $.datepicker._hideDatepicker() : $.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0] ? ($.datepicker._hideDatepicker(), 
                $.datepicker._showDatepicker(input[0])) : $.datepicker._showDatepicker(input[0]), 
                !1;
            }));
        },
        /* Apply the maximum length for the date format. */
        _autoSize: function(inst) {
            if (this._get(inst, "autoSize") && !inst.inline) {
                var findMax, max, maxI, i, date = new Date(2009, 11, 20), // Ensure double digits
                dateFormat = this._get(inst, "dateFormat");
                dateFormat.match(/[DM]/) && (findMax = function(names) {
                    for (max = 0, maxI = 0, i = 0; i < names.length; i++) names[i].length > max && (max = names[i].length, 
                    maxI = i);
                    return maxI;
                }, date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort"))), 
                date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - date.getDay())), 
                inst.input.attr("size", this._formatDate(inst, date).length);
            }
        },
        /* Attach an inline date picker to a div. */
        _inlineDatepicker: function(target, inst) {
            var divSpan = $(target);
            divSpan.hasClass(this.markerClassName) || (divSpan.addClass(this.markerClassName).append(inst.dpDiv), 
            $.data(target, "datepicker", inst), this._setDate(inst, this._getDefaultDate(inst), !0), 
            this._updateDatepicker(inst), this._updateAlternate(inst), //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
            inst.settings.disabled && this._disableDatepicker(target), // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
            // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
            inst.dpDiv.css("display", "block"));
        },
        /* Pop-up the date picker in a "dialog" box.
	 * @param  input element - ignored
	 * @param  date	string or Date - the initial date to display
	 * @param  onSelect  function - the function to call when a date is selected
	 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	 * @param  pos int[2] - coordinates for the dialog's position within the screen or
	 *					event - with x/y coordinates or
	 *					leave empty for default (screen centre)
	 * @return the manager object
	 */
        _dialogDatepicker: function(input, date, onSelect, settings, pos) {
            var id, browserWidth, browserHeight, scrollX, scrollY, inst = this._dialogInst;
            // internal instance
            // should use actual width/height below
            // move input on screen for focus, but hidden behind dialog
            return inst || (this.uuid += 1, id = "dp" + this.uuid, this._dialogInput = $("<input type='text' id='" + id + "' style='position: absolute; top: -100px; width: 0px;'/>"), 
            this._dialogInput.keydown(this._doKeyDown), $("body").append(this._dialogInput), 
            inst = this._dialogInst = this._newInst(this._dialogInput, !1), inst.settings = {}, 
            $.data(this._dialogInput[0], "datepicker", inst)), datepicker_extendRemove(inst.settings, settings || {}), 
            date = date && date.constructor === Date ? this._formatDate(inst, date) : date, 
            this._dialogInput.val(date), this._pos = pos ? pos.length ? pos : [ pos.pageX, pos.pageY ] : null, 
            this._pos || (browserWidth = document.documentElement.clientWidth, browserHeight = document.documentElement.clientHeight, 
            scrollX = document.documentElement.scrollLeft || document.body.scrollLeft, scrollY = document.documentElement.scrollTop || document.body.scrollTop, 
            this._pos = [ browserWidth / 2 - 100 + scrollX, browserHeight / 2 - 150 + scrollY ]), 
            this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px"), 
            inst.settings.onSelect = onSelect, this._inDialog = !0, this.dpDiv.addClass(this._dialogClass), 
            this._showDatepicker(this._dialogInput[0]), $.blockUI && $.blockUI(this.dpDiv), 
            $.data(this._dialogInput[0], "datepicker", inst), this;
        },
        /* Detach a datepicker from its control.
	 * @param  target	element - the target input field or division or span
	 */
        _destroyDatepicker: function(target) {
            var nodeName, $target = $(target), inst = $.data(target, "datepicker");
            $target.hasClass(this.markerClassName) && (nodeName = target.nodeName.toLowerCase(), 
            $.removeData(target, "datepicker"), "input" === nodeName ? (inst.append.remove(), 
            inst.trigger.remove(), $target.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp)) : ("div" === nodeName || "span" === nodeName) && $target.removeClass(this.markerClassName).empty(), 
            datepicker_instActive === inst && (datepicker_instActive = null));
        },
        /* Enable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
        _enableDatepicker: function(target) {
            var nodeName, inline, $target = $(target), inst = $.data(target, "datepicker");
            $target.hasClass(this.markerClassName) && (nodeName = target.nodeName.toLowerCase(), 
            "input" === nodeName ? (target.disabled = !1, inst.trigger.filter("button").each(function() {
                this.disabled = !1;
            }).end().filter("img").css({
                opacity: "1.0",
                cursor: ""
            })) : ("div" === nodeName || "span" === nodeName) && (inline = $target.children("." + this._inlineClass), 
            inline.children().removeClass("ui-state-disabled"), inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !1)), 
            this._disabledInputs = $.map(this._disabledInputs, function(value) {
                return value === target ? null : value;
            }));
        },
        /* Disable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
        _disableDatepicker: function(target) {
            var nodeName, inline, $target = $(target), inst = $.data(target, "datepicker");
            $target.hasClass(this.markerClassName) && (nodeName = target.nodeName.toLowerCase(), 
            "input" === nodeName ? (target.disabled = !0, inst.trigger.filter("button").each(function() {
                this.disabled = !0;
            }).end().filter("img").css({
                opacity: "0.5",
                cursor: "default"
            })) : ("div" === nodeName || "span" === nodeName) && (inline = $target.children("." + this._inlineClass), 
            inline.children().addClass("ui-state-disabled"), inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !0)), 
            this._disabledInputs = $.map(this._disabledInputs, function(value) {
                return value === target ? null : value;
            }), // delete entry
            this._disabledInputs[this._disabledInputs.length] = target);
        },
        /* Is the first field in a jQuery collection disabled as a datepicker?
	 * @param  target	element - the target input field or division or span
	 * @return boolean - true if disabled, false if enabled
	 */
        _isDisabledDatepicker: function(target) {
            if (!target) return !1;
            for (var i = 0; i < this._disabledInputs.length; i++) if (this._disabledInputs[i] === target) return !0;
            return !1;
        },
        /* Retrieve the instance data for the target control.
	 * @param  target  element - the target input field or division or span
	 * @return  object - the associated instance data
	 * @throws  error if a jQuery problem getting data
	 */
        _getInst: function(target) {
            try {
                return $.data(target, "datepicker");
            } catch (err) {
                throw "Missing instance data for this datepicker";
            }
        },
        /* Update or retrieve the settings for a date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 * @param  name	object - the new settings to update or
	 *				string - the name of the setting to change or retrieve,
	 *				when retrieving also "all" for all instance settings or
	 *				"defaults" for all global defaults
	 * @param  value   any - the new value for the setting
	 *				(omit if above is an object or to retrieve a value)
	 */
        _optionDatepicker: function(target, name, value) {
            var settings, date, minDate, maxDate, inst = this._getInst(target);
            // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
            return 2 === arguments.length && "string" == typeof name ? "defaults" === name ? $.extend({}, $.datepicker._defaults) : inst ? "all" === name ? $.extend({}, inst.settings) : this._get(inst, name) : null : (settings = name || {}, 
            "string" == typeof name && (settings = {}, settings[name] = value), void (inst && (this._curInst === inst && this._hideDatepicker(), 
            date = this._getDateDatepicker(target, !0), minDate = this._getMinMaxDate(inst, "min"), 
            maxDate = this._getMinMaxDate(inst, "max"), datepicker_extendRemove(inst.settings, settings), 
            null !== minDate && void 0 !== settings.dateFormat && void 0 === settings.minDate && (inst.settings.minDate = this._formatDate(inst, minDate)), 
            null !== maxDate && void 0 !== settings.dateFormat && void 0 === settings.maxDate && (inst.settings.maxDate = this._formatDate(inst, maxDate)), 
            "disabled" in settings && (settings.disabled ? this._disableDatepicker(target) : this._enableDatepicker(target)), 
            this._attachments($(target), inst), this._autoSize(inst), this._setDate(inst, date), 
            this._updateAlternate(inst), this._updateDatepicker(inst))));
        },
        // change method deprecated
        _changeDatepicker: function(target, name, value) {
            this._optionDatepicker(target, name, value);
        },
        /* Redraw the date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 */
        _refreshDatepicker: function(target) {
            var inst = this._getInst(target);
            inst && this._updateDatepicker(inst);
        },
        /* Set the dates for a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  date	Date - the new date
	 */
        _setDateDatepicker: function(target, date) {
            var inst = this._getInst(target);
            inst && (this._setDate(inst, date), this._updateDatepicker(inst), this._updateAlternate(inst));
        },
        /* Get the date(s) for the first entry in a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  noDefault boolean - true if no default date is to be used
	 * @return Date - the current date
	 */
        _getDateDatepicker: function(target, noDefault) {
            var inst = this._getInst(target);
            return inst && !inst.inline && this._setDateFromField(inst, noDefault), inst ? this._getDate(inst) : null;
        },
        /* Handle keystrokes. */
        _doKeyDown: function(event) {
            var onSelect, dateStr, sel, inst = $.datepicker._getInst(event.target), handled = !0, isRTL = inst.dpDiv.is(".ui-datepicker-rtl");
            if (inst._keyEvent = !0, $.datepicker._datepickerShowing) switch (event.keyCode) {
              case 9:
                $.datepicker._hideDatepicker(), handled = !1;
                break;

              // hide on tab out
                case 13:
                // trigger custom callback
                return sel = $("td." + $.datepicker._dayOverClass + ":not(." + $.datepicker._currentClass + ")", inst.dpDiv), 
                sel[0] && $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]), 
                onSelect = $.datepicker._get(inst, "onSelect"), onSelect ? (dateStr = $.datepicker._formatDate(inst), 
                onSelect.apply(inst.input ? inst.input[0] : null, [ dateStr, inst ])) : $.datepicker._hideDatepicker(), 
                !1;

              // don't submit the form
                case 27:
                $.datepicker._hideDatepicker();
                break;

              // hide on escape
                case 33:
                $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
                break;

              // previous month/year on page up/+ ctrl
                case 34:
                $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
                break;

              // next month/year on page down/+ ctrl
                case 35:
                (event.ctrlKey || event.metaKey) && $.datepicker._clearDate(event.target), handled = event.ctrlKey || event.metaKey;
                break;

              // clear on ctrl or command +end
                case 36:
                (event.ctrlKey || event.metaKey) && $.datepicker._gotoToday(event.target), handled = event.ctrlKey || event.metaKey;
                break;

              // current on ctrl or command +home
                case 37:
                (event.ctrlKey || event.metaKey) && $.datepicker._adjustDate(event.target, isRTL ? 1 : -1, "D"), 
                handled = event.ctrlKey || event.metaKey, // -1 day on ctrl or command +left
                event.originalEvent.altKey && $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
                // next month/year on alt +left on Mac
                break;

              case 38:
                (event.ctrlKey || event.metaKey) && $.datepicker._adjustDate(event.target, -7, "D"), 
                handled = event.ctrlKey || event.metaKey;
                break;

              // -1 week on ctrl or command +up
                case 39:
                (event.ctrlKey || event.metaKey) && $.datepicker._adjustDate(event.target, isRTL ? -1 : 1, "D"), 
                handled = event.ctrlKey || event.metaKey, // +1 day on ctrl or command +right
                event.originalEvent.altKey && $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
                // next month/year on alt +right
                break;

              case 40:
                (event.ctrlKey || event.metaKey) && $.datepicker._adjustDate(event.target, 7, "D"), 
                handled = event.ctrlKey || event.metaKey;
                break;

              // +1 week on ctrl or command +down
                default:
                handled = !1;
            } else 36 === event.keyCode && event.ctrlKey ? // display the date picker on ctrl+home
            $.datepicker._showDatepicker(this) : handled = !1;
            handled && (event.preventDefault(), event.stopPropagation());
        },
        /* Filter entered characters - based on date format. */
        _doKeyPress: function(event) {
            var chars, chr, inst = $.datepicker._getInst(event.target);
            return $.datepicker._get(inst, "constrainInput") ? (chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat")), 
            chr = String.fromCharCode(null == event.charCode ? event.keyCode : event.charCode), 
            event.ctrlKey || event.metaKey || " " > chr || !chars || chars.indexOf(chr) > -1) : void 0;
        },
        /* Synchronise manual entry and field/alternate field. */
        _doKeyUp: function(event) {
            var date, inst = $.datepicker._getInst(event.target);
            if (inst.input.val() !== inst.lastVal) try {
                date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst)), 
                date && (// only if valid
                $.datepicker._setDateFromField(inst), $.datepicker._updateAlternate(inst), $.datepicker._updateDatepicker(inst));
            } catch (err) {}
            return !0;
        },
        /* Pop-up the date picker for a given input field.
	 * If false returned from beforeShow event handler do not show.
	 * @param  input  element - the input field attached to the date picker or
	 *					event - if triggered by focus
	 */
        _showDatepicker: function(input) {
            if (input = input.target || input, "input" !== input.nodeName.toLowerCase() && (// find from button/image trigger
            input = $("input", input.parentNode)[0]), !$.datepicker._isDisabledDatepicker(input) && $.datepicker._lastInput !== input) {
                var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;
                inst = $.datepicker._getInst(input), $.datepicker._curInst && $.datepicker._curInst !== inst && ($.datepicker._curInst.dpDiv.stop(!0, !0), 
                inst && $.datepicker._datepickerShowing && $.datepicker._hideDatepicker($.datepicker._curInst.input[0])), 
                beforeShow = $.datepicker._get(inst, "beforeShow"), beforeShowSettings = beforeShow ? beforeShow.apply(input, [ input, inst ]) : {}, 
                beforeShowSettings !== !1 && (datepicker_extendRemove(inst.settings, beforeShowSettings), 
                inst.lastVal = null, $.datepicker._lastInput = input, $.datepicker._setDateFromField(inst), 
                $.datepicker._inDialog && (// hide cursor
                input.value = ""), $.datepicker._pos || (// position below input
                $.datepicker._pos = $.datepicker._findPos(input), $.datepicker._pos[1] += input.offsetHeight), 
                isFixed = !1, $(input).parents().each(function() {
                    return isFixed |= "fixed" === $(this).css("position"), !isFixed;
                }), offset = {
                    left: $.datepicker._pos[0],
                    top: $.datepicker._pos[1]
                }, $.datepicker._pos = null, //to avoid flashes on Firefox
                inst.dpDiv.empty(), // determine sizing offscreen
                inst.dpDiv.css({
                    position: "absolute",
                    display: "block",
                    top: "-1000px"
                }), $.datepicker._updateDatepicker(inst), // fix width for dynamic number of date pickers
                // and adjust position before showing
                offset = $.datepicker._checkOffset(inst, offset, isFixed), inst.dpDiv.css({
                    position: $.datepicker._inDialog && $.blockUI ? "static" : isFixed ? "fixed" : "absolute",
                    display: "none",
                    left: offset.left + "px",
                    top: offset.top + "px"
                }), inst.inline || (showAnim = $.datepicker._get(inst, "showAnim"), duration = $.datepicker._get(inst, "duration"), 
                inst.dpDiv.css("z-index", datepicker_getZindex($(input)) + 1), $.datepicker._datepickerShowing = !0, 
                $.effects && $.effects.effect[showAnim] ? inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration) : inst.dpDiv[showAnim || "show"](showAnim ? duration : null), 
                $.datepicker._shouldFocusInput(inst) && inst.input.focus(), $.datepicker._curInst = inst));
            }
        },
        /* Generate the date picker content. */
        _updateDatepicker: function(inst) {
            this.maxRows = 4, //Reset the max number of rows being displayed (see #7043)
            datepicker_instActive = inst, // for delegate hover events
            inst.dpDiv.empty().append(this._generateHTML(inst)), this._attachHandlers(inst);
            var origyearshtml, numMonths = this._getNumberOfMonths(inst), cols = numMonths[1], width = 17, activeCell = inst.dpDiv.find("." + this._dayOverClass + " a");
            activeCell.length > 0 && datepicker_handleMouseover.apply(activeCell.get(0)), inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""), 
            cols > 1 && inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", width * cols + "em"), 
            inst.dpDiv[(1 !== numMonths[0] || 1 !== numMonths[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi"), 
            inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl"), 
            inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst) && inst.input.focus(), 
            // deffered render of the years select (to avoid flashes on Firefox)
            inst.yearshtml && (origyearshtml = inst.yearshtml, setTimeout(function() {
                //assure that inst.yearshtml didn't change.
                origyearshtml === inst.yearshtml && inst.yearshtml && inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml), 
                origyearshtml = inst.yearshtml = null;
            }, 0));
        },
        // #6694 - don't focus the input if it's already focused
        // this breaks the change event in IE
        // Support: IE and jQuery <1.9
        _shouldFocusInput: function(inst) {
            return inst.input && inst.input.is(":visible") && !inst.input.is(":disabled") && !inst.input.is(":focus");
        },
        /* Check positioning to remain on screen. */
        _checkOffset: function(inst, offset, isFixed) {
            var dpWidth = inst.dpDiv.outerWidth(), dpHeight = inst.dpDiv.outerHeight(), inputWidth = inst.input ? inst.input.outerWidth() : 0, inputHeight = inst.input ? inst.input.outerHeight() : 0, viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()), viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());
            // now check if datepicker is showing outside window viewport - move to a better place if so.
            return offset.left -= this._get(inst, "isRTL") ? dpWidth - inputWidth : 0, offset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0, 
            offset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0, 
            offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0), 
            offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0), 
            offset;
        },
        /* Find an object's position on the screen. */
        _findPos: function(obj) {
            for (var position, inst = this._getInst(obj), isRTL = this._get(inst, "isRTL"); obj && ("hidden" === obj.type || 1 !== obj.nodeType || $.expr.filters.hidden(obj)); ) obj = obj[isRTL ? "previousSibling" : "nextSibling"];
            return position = $(obj).offset(), [ position.left, position.top ];
        },
        /* Hide the date picker from view.
	 * @param  input  element - the input field attached to the date picker
	 */
        _hideDatepicker: function(input) {
            var showAnim, duration, postProcess, onClose, inst = this._curInst;
            !inst || input && inst !== $.data(input, "datepicker") || this._datepickerShowing && (showAnim = this._get(inst, "showAnim"), 
            duration = this._get(inst, "duration"), postProcess = function() {
                $.datepicker._tidyDialog(inst);
            }, // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
            $.effects && ($.effects.effect[showAnim] || $.effects[showAnim]) ? inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess) : inst.dpDiv["slideDown" === showAnim ? "slideUp" : "fadeIn" === showAnim ? "fadeOut" : "hide"](showAnim ? duration : null, postProcess), 
            showAnim || postProcess(), this._datepickerShowing = !1, onClose = this._get(inst, "onClose"), 
            onClose && onClose.apply(inst.input ? inst.input[0] : null, [ inst.input ? inst.input.val() : "", inst ]), 
            this._lastInput = null, this._inDialog && (this._dialogInput.css({
                position: "absolute",
                left: "0",
                top: "-100px"
            }), $.blockUI && ($.unblockUI(), $("body").append(this.dpDiv))), this._inDialog = !1);
        },
        /* Tidy up after a dialog display. */
        _tidyDialog: function(inst) {
            inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
        },
        /* Close date picker if clicked elsewhere. */
        _checkExternalClick: function(event) {
            if ($.datepicker._curInst) {
                var $target = $(event.target), inst = $.datepicker._getInst($target[0]);
                ($target[0].id !== $.datepicker._mainDivId && 0 === $target.parents("#" + $.datepicker._mainDivId).length && !$target.hasClass($.datepicker.markerClassName) && !$target.closest("." + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && (!$.datepicker._inDialog || !$.blockUI) || $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst) && $.datepicker._hideDatepicker();
            }
        },
        /* Adjust one of the date sub-fields. */
        _adjustDate: function(id, offset, period) {
            var target = $(id), inst = this._getInst(target[0]);
            this._isDisabledDatepicker(target[0]) || (this._adjustInstDate(inst, offset + ("M" === period ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
            period), this._updateDatepicker(inst));
        },
        /* Action for current link. */
        _gotoToday: function(id) {
            var date, target = $(id), inst = this._getInst(target[0]);
            this._get(inst, "gotoCurrent") && inst.currentDay ? (inst.selectedDay = inst.currentDay, 
            inst.drawMonth = inst.selectedMonth = inst.currentMonth, inst.drawYear = inst.selectedYear = inst.currentYear) : (date = new Date(), 
            inst.selectedDay = date.getDate(), inst.drawMonth = inst.selectedMonth = date.getMonth(), 
            inst.drawYear = inst.selectedYear = date.getFullYear()), this._notifyChange(inst), 
            this._adjustDate(target);
        },
        /* Action for selecting a new month/year. */
        _selectMonthYear: function(id, select, period) {
            var target = $(id), inst = this._getInst(target[0]);
            inst["selected" + ("M" === period ? "Month" : "Year")] = inst["draw" + ("M" === period ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10), 
            this._notifyChange(inst), this._adjustDate(target);
        },
        /* Action for selecting a day. */
        _selectDay: function(id, month, year, td) {
            var inst, target = $(id);
            $(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0]) || (inst = this._getInst(target[0]), 
            inst.selectedDay = inst.currentDay = $("a", td).html(), inst.selectedMonth = inst.currentMonth = month, 
            inst.selectedYear = inst.currentYear = year, this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear)));
        },
        /* Erase the input field and hide the date picker. */
        _clearDate: function(id) {
            var target = $(id);
            this._selectDate(target, "");
        },
        /* Update the input field with the selected date. */
        _selectDate: function(id, dateStr) {
            var onSelect, target = $(id), inst = this._getInst(target[0]);
            dateStr = null != dateStr ? dateStr : this._formatDate(inst), inst.input && inst.input.val(dateStr), 
            this._updateAlternate(inst), onSelect = this._get(inst, "onSelect"), onSelect ? onSelect.apply(inst.input ? inst.input[0] : null, [ dateStr, inst ]) : inst.input && inst.input.trigger("change"), 
            inst.inline ? this._updateDatepicker(inst) : (this._hideDatepicker(), this._lastInput = inst.input[0], 
            "object" != typeof inst.input[0] && inst.input.focus(), this._lastInput = null);
        },
        /* Update any alternate field to synchronise with the main field. */
        _updateAlternate: function(inst) {
            var altFormat, date, dateStr, altField = this._get(inst, "altField");
            altField && (// update alternate field too
            altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat"), date = this._getDate(inst), 
            dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst)), $(altField).each(function() {
                $(this).val(dateStr);
            }));
        },
        /* Set as beforeShowDay function to prevent selection of weekends.
	 * @param  date  Date - the date to customise
	 * @return [boolean, string] - is this date selectable?, what is its CSS class?
	 */
        noWeekends: function(date) {
            var day = date.getDay();
            return [ day > 0 && 6 > day, "" ];
        },
        /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	 * @param  date  Date - the date to get the week for
	 * @return  number - the number of the week within the year that contains this date
	 */
        iso8601Week: function(date) {
            var time, checkDate = new Date(date.getTime());
            // Find Thursday of this week starting on Monday
            // Compare with Jan 1
            return checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)), time = checkDate.getTime(), 
            checkDate.setMonth(0), checkDate.setDate(1), Math.floor(Math.round((time - checkDate) / 864e5) / 7) + 1;
        },
        /* Parse a string value into a date object.
	 * See formatDate below for the possible formats.
	 *
	 * @param  format string - the expected format of the date
	 * @param  value string - the date in the above format
	 * @param  settings Object - attributes include:
	 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  Date - the extracted date value or null if value is blank
	 */
        parseDate: function(format, value, settings) {
            if (null == format || null == value) throw "Invalid arguments";
            if (value = "object" == typeof value ? value.toString() : value + "", "" === value) return null;
            var iFormat, dim, extra, date, iValue = 0, shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff, shortYearCutoff = "string" != typeof shortYearCutoffTemp ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10), dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, year = -1, month = -1, day = -1, doy = -1, literal = !1, // Check whether a format character is doubled
            lookAhead = function(match) {
                var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                return matches && iFormat++, matches;
            }, // Extract a number from the string value
            getNumber = function(match) {
                var isDoubled = lookAhead(match), size = "@" === match ? 14 : "!" === match ? 20 : "y" === match && isDoubled ? 4 : "o" === match ? 3 : 2, minSize = "y" === match ? size : 1, digits = new RegExp("^\\d{" + minSize + "," + size + "}"), num = value.substring(iValue).match(digits);
                if (!num) throw "Missing number at position " + iValue;
                return iValue += num[0].length, parseInt(num[0], 10);
            }, // Extract a name from the string value and convert to an index
            getName = function(match, shortNames, longNames) {
                var index = -1, names = $.map(lookAhead(match) ? longNames : shortNames, function(v, k) {
                    return [ [ k, v ] ];
                }).sort(function(a, b) {
                    return -(a[1].length - b[1].length);
                });
                if ($.each(names, function(i, pair) {
                    var name = pair[1];
                    return value.substr(iValue, name.length).toLowerCase() === name.toLowerCase() ? (index = pair[0], 
                    iValue += name.length, !1) : void 0;
                }), -1 !== index) return index + 1;
                throw "Unknown name at position " + iValue;
            }, // Confirm that a literal character matches the string value
            checkLiteral = function() {
                if (value.charAt(iValue) !== format.charAt(iFormat)) throw "Unexpected literal at position " + iValue;
                iValue++;
            };
            for (iFormat = 0; iFormat < format.length; iFormat++) if (literal) "'" !== format.charAt(iFormat) || lookAhead("'") ? checkLiteral() : literal = !1; else switch (format.charAt(iFormat)) {
              case "d":
                day = getNumber("d");
                break;

              case "D":
                getName("D", dayNamesShort, dayNames);
                break;

              case "o":
                doy = getNumber("o");
                break;

              case "m":
                month = getNumber("m");
                break;

              case "M":
                month = getName("M", monthNamesShort, monthNames);
                break;

              case "y":
                year = getNumber("y");
                break;

              case "@":
                date = new Date(getNumber("@")), year = date.getFullYear(), month = date.getMonth() + 1, 
                day = date.getDate();
                break;

              case "!":
                date = new Date((getNumber("!") - this._ticksTo1970) / 1e4), year = date.getFullYear(), 
                month = date.getMonth() + 1, day = date.getDate();
                break;

              case "'":
                lookAhead("'") ? checkLiteral() : literal = !0;
                break;

              default:
                checkLiteral();
            }
            if (iValue < value.length && (extra = value.substr(iValue), !/^\s+/.test(extra))) throw "Extra/unparsed characters found in date: " + extra;
            if (-1 === year ? year = new Date().getFullYear() : 100 > year && (year += new Date().getFullYear() - new Date().getFullYear() % 100 + (shortYearCutoff >= year ? 0 : -100)), 
            doy > -1) for (month = 1, day = doy; ;) {
                if (dim = this._getDaysInMonth(year, month - 1), dim >= day) break;
                month++, day -= dim;
            }
            if (date = this._daylightSavingAdjust(new Date(year, month - 1, day)), date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) throw "Invalid date";
            return date;
        },
        /* Standard date formats. */
        ATOM: "yy-mm-dd",
        // RFC 3339 (ISO 8601)
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y",
        // RFC 822
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd",
        // ISO 8601
        _ticksTo1970: 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)) * 60 * 60 * 1e7,
        /* Format a date object into a string value.
	 * The format can be combinations of the following:
	 * d  - day of month (no leading zero)
	 * dd - day of month (two digit)
	 * o  - day of year (no leading zeros)
	 * oo - day of year (three digit)
	 * D  - day name short
	 * DD - day name long
	 * m  - month of year (no leading zero)
	 * mm - month of year (two digit)
	 * M  - month name short
	 * MM - month name long
	 * y  - year (two digit)
	 * yy - year (four digit)
	 * @ - Unix timestamp (ms since 01/01/1970)
	 * ! - Windows ticks (100ns since 01/01/0001)
	 * "..." - literal text
	 * '' - single quote
	 *
	 * @param  format string - the desired format of the date
	 * @param  date Date - the date value to format
	 * @param  settings Object - attributes include:
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  string - the date in the above format
	 */
        formatDate: function(format, date, settings) {
            if (!date) return "";
            var iFormat, dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, // Check whether a format character is doubled
            lookAhead = function(match) {
                var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                return matches && iFormat++, matches;
            }, // Format a number, with leading zero if necessary
            formatNumber = function(match, value, len) {
                var num = "" + value;
                if (lookAhead(match)) for (;num.length < len; ) num = "0" + num;
                return num;
            }, // Format a name, short or long as requested
            formatName = function(match, value, shortNames, longNames) {
                return lookAhead(match) ? longNames[value] : shortNames[value];
            }, output = "", literal = !1;
            if (date) for (iFormat = 0; iFormat < format.length; iFormat++) if (literal) "'" !== format.charAt(iFormat) || lookAhead("'") ? output += format.charAt(iFormat) : literal = !1; else switch (format.charAt(iFormat)) {
              case "d":
                output += formatNumber("d", date.getDate(), 2);
                break;

              case "D":
                output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                break;

              case "o":
                output += formatNumber("o", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 864e5), 3);
                break;

              case "m":
                output += formatNumber("m", date.getMonth() + 1, 2);
                break;

              case "M":
                output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                break;

              case "y":
                output += lookAhead("y") ? date.getFullYear() : (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100;
                break;

              case "@":
                output += date.getTime();
                break;

              case "!":
                output += 1e4 * date.getTime() + this._ticksTo1970;
                break;

              case "'":
                lookAhead("'") ? output += "'" : literal = !0;
                break;

              default:
                output += format.charAt(iFormat);
            }
            return output;
        },
        /* Extract all possible characters from the date format. */
        _possibleChars: function(format) {
            var iFormat, chars = "", literal = !1, // Check whether a format character is doubled
            lookAhead = function(match) {
                var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                return matches && iFormat++, matches;
            };
            for (iFormat = 0; iFormat < format.length; iFormat++) if (literal) "'" !== format.charAt(iFormat) || lookAhead("'") ? chars += format.charAt(iFormat) : literal = !1; else switch (format.charAt(iFormat)) {
              case "d":
              case "m":
              case "y":
              case "@":
                chars += "0123456789";
                break;

              case "D":
              case "M":
                return null;

              // Accept anything
                case "'":
                lookAhead("'") ? chars += "'" : literal = !0;
                break;

              default:
                chars += format.charAt(iFormat);
            }
            return chars;
        },
        /* Get a setting value, defaulting if necessary. */
        _get: function(inst, name) {
            return void 0 !== inst.settings[name] ? inst.settings[name] : this._defaults[name];
        },
        /* Parse existing date and initialise date picker. */
        _setDateFromField: function(inst, noDefault) {
            if (inst.input.val() !== inst.lastVal) {
                var dateFormat = this._get(inst, "dateFormat"), dates = inst.lastVal = inst.input ? inst.input.val() : null, defaultDate = this._getDefaultDate(inst), date = defaultDate, settings = this._getFormatConfig(inst);
                try {
                    date = this.parseDate(dateFormat, dates, settings) || defaultDate;
                } catch (event) {
                    dates = noDefault ? "" : dates;
                }
                inst.selectedDay = date.getDate(), inst.drawMonth = inst.selectedMonth = date.getMonth(), 
                inst.drawYear = inst.selectedYear = date.getFullYear(), inst.currentDay = dates ? date.getDate() : 0, 
                inst.currentMonth = dates ? date.getMonth() : 0, inst.currentYear = dates ? date.getFullYear() : 0, 
                this._adjustInstDate(inst);
            }
        },
        /* Retrieve the default date shown on opening. */
        _getDefaultDate: function(inst) {
            return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
        },
        /* A date may be specified as an exact value or a relative one. */
        _determineDate: function(inst, date, defaultDate) {
            var offsetNumeric = function(offset) {
                var date = new Date();
                return date.setDate(date.getDate() + offset), date;
            }, offsetString = function(offset) {
                try {
                    return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), offset, $.datepicker._getFormatConfig(inst));
                } catch (e) {}
                for (var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(), year = date.getFullYear(), month = date.getMonth(), day = date.getDate(), pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, matches = pattern.exec(offset); matches; ) {
                    switch (matches[2] || "d") {
                      case "d":
                      case "D":
                        day += parseInt(matches[1], 10);
                        break;

                      case "w":
                      case "W":
                        day += 7 * parseInt(matches[1], 10);
                        break;

                      case "m":
                      case "M":
                        month += parseInt(matches[1], 10), day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                        break;

                      case "y":
                      case "Y":
                        year += parseInt(matches[1], 10), day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                    }
                    matches = pattern.exec(offset);
                }
                return new Date(year, month, day);
            }, newDate = null == date || "" === date ? defaultDate : "string" == typeof date ? offsetString(date) : "number" == typeof date ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());
            return newDate = newDate && "Invalid Date" === newDate.toString() ? defaultDate : newDate, 
            newDate && (newDate.setHours(0), newDate.setMinutes(0), newDate.setSeconds(0), newDate.setMilliseconds(0)), 
            this._daylightSavingAdjust(newDate);
        },
        /* Handle switch to/from daylight saving.
	 * Hours may be non-zero on daylight saving cut-over:
	 * > 12 when midnight changeover, but then cannot generate
	 * midnight datetime, so jump to 1AM, otherwise reset.
	 * @param  date  (Date) the date to check
	 * @return  (Date) the corrected date
	 */
        _daylightSavingAdjust: function(date) {
            return date ? (date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0), date) : null;
        },
        /* Set the date(s) directly. */
        _setDate: function(inst, date, noChange) {
            var clear = !date, origMonth = inst.selectedMonth, origYear = inst.selectedYear, newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
            inst.selectedDay = inst.currentDay = newDate.getDate(), inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth(), 
            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear(), origMonth === inst.selectedMonth && origYear === inst.selectedYear || noChange || this._notifyChange(inst), 
            this._adjustInstDate(inst), inst.input && inst.input.val(clear ? "" : this._formatDate(inst));
        },
        /* Retrieve the date(s) directly. */
        _getDate: function(inst) {
            var startDate = !inst.currentYear || inst.input && "" === inst.input.val() ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
            return startDate;
        },
        /* Attach the onxxx handlers.  These are declared statically so
	 * they work with static code transformers like Caja.
	 */
        _attachHandlers: function(inst) {
            var stepMonths = this._get(inst, "stepMonths"), id = "#" + inst.id.replace(/\\\\/g, "\\");
            inst.dpDiv.find("[data-handler]").map(function() {
                var handler = {
                    prev: function() {
                        $.datepicker._adjustDate(id, -stepMonths, "M");
                    },
                    next: function() {
                        $.datepicker._adjustDate(id, +stepMonths, "M");
                    },
                    hide: function() {
                        $.datepicker._hideDatepicker();
                    },
                    today: function() {
                        $.datepicker._gotoToday(id);
                    },
                    selectDay: function() {
                        return $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this), 
                        !1;
                    },
                    selectMonth: function() {
                        return $.datepicker._selectMonthYear(id, this, "M"), !1;
                    },
                    selectYear: function() {
                        return $.datepicker._selectMonthYear(id, this, "Y"), !1;
                    }
                };
                $(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
            });
        },
        /* Generate the HTML for the current state of the date picker. */
        _generateHTML: function(inst) {
            var maxDraw, prevText, prev, nextText, next, currentText, gotoDate, controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin, monthNames, monthNamesShort, beforeShowDay, showOtherMonths, selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate, cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows, printDate, dRow, tbody, daySettings, otherMonth, unselectable, tempDate = new Date(), today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
            isRTL = this._get(inst, "isRTL"), showButtonPanel = this._get(inst, "showButtonPanel"), hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"), navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"), numMonths = this._getNumberOfMonths(inst), showCurrentAtPos = this._get(inst, "showCurrentAtPos"), stepMonths = this._get(inst, "stepMonths"), isMultiMonth = 1 !== numMonths[0] || 1 !== numMonths[1], currentDate = this._daylightSavingAdjust(inst.currentDay ? new Date(inst.currentYear, inst.currentMonth, inst.currentDay) : new Date(9999, 9, 9)), minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), drawMonth = inst.drawMonth - showCurrentAtPos, drawYear = inst.drawYear;
            if (0 > drawMonth && (drawMonth += 12, drawYear--), maxDate) for (maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate())), 
            maxDraw = minDate && minDate > maxDraw ? minDate : maxDraw; this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw; ) drawMonth--, 
            0 > drawMonth && (drawMonth = 11, drawYear--);
            for (inst.drawMonth = drawMonth, inst.drawYear = drawYear, prevText = this._get(inst, "prevText"), 
            prevText = navigationAsDateFormat ? this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst)) : prevText, 
            prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>", 
            nextText = this._get(inst, "nextText"), nextText = navigationAsDateFormat ? this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst)) : nextText, 
            next = this._canAdjustMonth(inst, 1, drawYear, drawMonth) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>", 
            currentText = this._get(inst, "currentText"), gotoDate = this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today, 
            currentText = navigationAsDateFormat ? this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)) : currentText, 
            controls = inst.inline ? "" : "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(inst, "closeText") + "</button>", 
            buttonPanel = showButtonPanel ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") + (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "", 
            firstDay = parseInt(this._get(inst, "firstDay"), 10), firstDay = isNaN(firstDay) ? 0 : firstDay, 
            showWeek = this._get(inst, "showWeek"), dayNames = this._get(inst, "dayNames"), 
            dayNamesMin = this._get(inst, "dayNamesMin"), monthNames = this._get(inst, "monthNames"), 
            monthNamesShort = this._get(inst, "monthNamesShort"), beforeShowDay = this._get(inst, "beforeShowDay"), 
            showOtherMonths = this._get(inst, "showOtherMonths"), selectOtherMonths = this._get(inst, "selectOtherMonths"), 
            defaultDate = this._getDefaultDate(inst), html = "", row = 0; row < numMonths[0]; row++) {
                for (group = "", this.maxRows = 4, col = 0; col < numMonths[1]; col++) {
                    if (selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay)), 
                    cornerClass = " ui-corner-all", calender = "", isMultiMonth) {
                        if (calender += "<div class='ui-datepicker-group", numMonths[1] > 1) switch (col) {
                          case 0:
                            calender += " ui-datepicker-group-first", cornerClass = " ui-corner-" + (isRTL ? "right" : "left");
                            break;

                          case numMonths[1] - 1:
                            calender += " ui-datepicker-group-last", cornerClass = " ui-corner-" + (isRTL ? "left" : "right");
                            break;

                          default:
                            calender += " ui-datepicker-group-middle", cornerClass = "";
                        }
                        calender += "'>";
                    }
                    for (calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" + (/all|left/.test(cornerClass) && 0 === row ? isRTL ? next : prev : "") + (/all|right/.test(cornerClass) && 0 === row ? isRTL ? prev : next : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
                    "</div><table class='ui-datepicker-calendar'><thead><tr>", thead = showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "", 
                    dow = 0; 7 > dow; dow++) // days of the week
                    day = (dow + firstDay) % 7, thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + "><span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
                    for (calender += thead + "</tr></thead><tbody>", daysInMonth = this._getDaysInMonth(drawYear, drawMonth), 
                    drawYear === inst.selectedYear && drawMonth === inst.selectedMonth && (inst.selectedDay = Math.min(inst.selectedDay, daysInMonth)), 
                    leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7, curRows = Math.ceil((leadDays + daysInMonth) / 7), 
                    // calculate the number of rows to generate
                    numRows = isMultiMonth && this.maxRows > curRows ? this.maxRows : curRows, //If multiple months, use the higher number of rows (see #7043)
                    this.maxRows = numRows, printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays)), 
                    dRow = 0; numRows > dRow; dRow++) {
                        for (// create date picker rows
                        calender += "<tr>", tbody = showWeek ? "<td class='ui-datepicker-week-col'>" + this._get(inst, "calculateWeek")(printDate) + "</td>" : "", 
                        dow = 0; 7 > dow; dow++) // create date picker days
                        daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [ printDate ]) : [ !0, "" ], 
                        otherMonth = printDate.getMonth() !== drawMonth, unselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && minDate > printDate || maxDate && printDate > maxDate, 
                        tbody += "<td class='" + ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (// highlight weekends
                        otherMonth ? " ui-datepicker-other-month" : "") + (// highlight days from other months
                        printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || // user pressed key
                        defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ? // or defaultDate is current printedDate and defaultDate is selectedDate
                        " " + this._dayOverClass : "") + (// highlight selected day
                        unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + (// highlight unselectable days
                        otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + (// highlight custom dates
                        printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + (// highlight selected day
                        printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + (// highlight today (if different)
                        otherMonth && !showOtherMonths || !daySettings[2] ? "" : " title='" + daySettings[2].replace(/'/g, "&#39;") + "'") + (// cell title
                        unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + (// actions
                        otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
                        unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" + (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + (// highlight selected day
                        otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
                        "' href='#'>" + printDate.getDate() + "</a>") + "</td>", // display selectable date
                        printDate.setDate(printDate.getDate() + 1), printDate = this._daylightSavingAdjust(printDate);
                        calender += tbody + "</tr>";
                    }
                    drawMonth++, drawMonth > 11 && (drawMonth = 0, drawYear++), calender += "</tbody></table>" + (isMultiMonth ? "</div>" + (numMonths[0] > 0 && col === numMonths[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : ""), 
                    group += calender;
                }
                html += group;
            }
            return html += buttonPanel, inst._keyEvent = !1, html;
        },
        /* Generate the month and year header. */
        _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
            var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear, changeMonth = this._get(inst, "changeMonth"), changeYear = this._get(inst, "changeYear"), showMonthAfterYear = this._get(inst, "showMonthAfterYear"), html = "<div class='ui-datepicker-title'>", monthHtml = "";
            // month selection
            if (secondary || !changeMonth) monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>"; else {
                for (inMinYear = minDate && minDate.getFullYear() === drawYear, inMaxYear = maxDate && maxDate.getFullYear() === drawYear, 
                monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>", 
                month = 0; 12 > month; month++) (!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth()) && (monthHtml += "<option value='" + month + "'" + (month === drawMonth ? " selected='selected'" : "") + ">" + monthNamesShort[month] + "</option>");
                monthHtml += "</select>";
            }
            // year selection
            if (showMonthAfterYear || (html += monthHtml + (!secondary && changeMonth && changeYear ? "" : "&#xa0;")), 
            !inst.yearshtml) if (inst.yearshtml = "", secondary || !changeYear) html += "<span class='ui-datepicker-year'>" + drawYear + "</span>"; else {
                for (// determine range of years to display
                years = this._get(inst, "yearRange").split(":"), thisYear = new Date().getFullYear(), 
                determineYear = function(value) {
                    var year = value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);
                    return isNaN(year) ? thisYear : year;
                }, year = determineYear(years[0]), endYear = Math.max(year, determineYear(years[1] || "")), 
                year = minDate ? Math.max(year, minDate.getFullYear()) : year, endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear, 
                inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>"; endYear >= year; year++) inst.yearshtml += "<option value='" + year + "'" + (year === drawYear ? " selected='selected'" : "") + ">" + year + "</option>";
                inst.yearshtml += "</select>", html += inst.yearshtml, inst.yearshtml = null;
            }
            // Close datepicker_header
            return html += this._get(inst, "yearSuffix"), showMonthAfterYear && (html += (!secondary && changeMonth && changeYear ? "" : "&#xa0;") + monthHtml), 
            html += "</div>";
        },
        /* Adjust one of the date sub-fields. */
        _adjustInstDate: function(inst, offset, period) {
            var year = inst.drawYear + ("Y" === period ? offset : 0), month = inst.drawMonth + ("M" === period ? offset : 0), day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + ("D" === period ? offset : 0), date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));
            inst.selectedDay = date.getDate(), inst.drawMonth = inst.selectedMonth = date.getMonth(), 
            inst.drawYear = inst.selectedYear = date.getFullYear(), ("M" === period || "Y" === period) && this._notifyChange(inst);
        },
        /* Ensure a date is within any min/max bounds. */
        _restrictMinMax: function(inst, date) {
            var minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), newDate = minDate && minDate > date ? minDate : date;
            return maxDate && newDate > maxDate ? maxDate : newDate;
        },
        /* Notify change of month/year. */
        _notifyChange: function(inst) {
            var onChange = this._get(inst, "onChangeMonthYear");
            onChange && onChange.apply(inst.input ? inst.input[0] : null, [ inst.selectedYear, inst.selectedMonth + 1, inst ]);
        },
        /* Determine the number of months to show. */
        _getNumberOfMonths: function(inst) {
            var numMonths = this._get(inst, "numberOfMonths");
            return null == numMonths ? [ 1, 1 ] : "number" == typeof numMonths ? [ 1, numMonths ] : numMonths;
        },
        /* Determine the current maximum date - ensure no time components are set. */
        _getMinMaxDate: function(inst, minMax) {
            return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
        },
        /* Find the number of days in a given month. */
        _getDaysInMonth: function(year, month) {
            return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
        },
        /* Find the day of the week of the first of a month. */
        _getFirstDayOfMonth: function(year, month) {
            return new Date(year, month, 1).getDay();
        },
        /* Determines if we should allow a "next/prev" month display change. */
        _canAdjustMonth: function(inst, offset, curYear, curMonth) {
            var numMonths = this._getNumberOfMonths(inst), date = this._daylightSavingAdjust(new Date(curYear, curMonth + (0 > offset ? offset : numMonths[0] * numMonths[1]), 1));
            return 0 > offset && date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth())), 
            this._isInRange(inst, date);
        },
        /* Is the given date in the accepted range? */
        _isInRange: function(inst, date) {
            var yearSplit, currentYear, minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), minYear = null, maxYear = null, years = this._get(inst, "yearRange");
            return years && (yearSplit = years.split(":"), currentYear = new Date().getFullYear(), 
            minYear = parseInt(yearSplit[0], 10), maxYear = parseInt(yearSplit[1], 10), yearSplit[0].match(/[+\-].*/) && (minYear += currentYear), 
            yearSplit[1].match(/[+\-].*/) && (maxYear += currentYear)), (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear);
        },
        /* Provide the configuration settings for formatting/parsing. */
        _getFormatConfig: function(inst) {
            var shortYearCutoff = this._get(inst, "shortYearCutoff");
            return shortYearCutoff = "string" != typeof shortYearCutoff ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10), 
            {
                shortYearCutoff: shortYearCutoff,
                dayNamesShort: this._get(inst, "dayNamesShort"),
                dayNames: this._get(inst, "dayNames"),
                monthNamesShort: this._get(inst, "monthNamesShort"),
                monthNames: this._get(inst, "monthNames")
            };
        },
        /* Format the given date for display. */
        _formatDate: function(inst, day, month, year) {
            day || (inst.currentDay = inst.selectedDay, inst.currentMonth = inst.selectedMonth, 
            inst.currentYear = inst.selectedYear);
            var date = day ? "object" == typeof day ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
            return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
        }
    }), /* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
					Object - settings for attaching new datepicker functionality
   @return  jQuery object */
    $.fn.datepicker = function(options) {
        /* Verify an empty collection wasn't passed - Fixes #6976 */
        if (!this.length) return this;
        /* Initialise the date picker. */
        $.datepicker.initialized || ($(document).mousedown($.datepicker._checkExternalClick), 
        $.datepicker.initialized = !0), /* Append datepicker main container to body if not exist. */
        0 === $("#" + $.datepicker._mainDivId).length && $("body").append($.datepicker.dpDiv);
        var otherArgs = Array.prototype.slice.call(arguments, 1);
        return "string" != typeof options || "isDisabled" !== options && "getDate" !== options && "widget" !== options ? "option" === options && 2 === arguments.length && "string" == typeof arguments[1] ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this[0] ].concat(otherArgs)) : this.each(function() {
            "string" == typeof options ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this ].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);
        }) : $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this[0] ].concat(otherArgs));
    }, $.datepicker = new Datepicker(), // singleton instance
    $.datepicker.initialized = !1, $.datepicker.uuid = new Date().getTime(), $.datepicker.version = "1.11.4";
    $.datepicker;
    /*!
 * jQuery UI Draggable 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/draggable/
 */
    $.widget("ui.draggable", $.ui.mouse, {
        version: "1.11.4",
        widgetEventPrefix: "drag",
        options: {
            addClasses: !0,
            appendTo: "parent",
            axis: !1,
            connectToSortable: !1,
            containment: !1,
            cursor: "auto",
            cursorAt: !1,
            grid: !1,
            handle: !1,
            helper: "original",
            iframeFix: !1,
            opacity: !1,
            refreshPositions: !1,
            revert: !1,
            revertDuration: 500,
            scope: "default",
            scroll: !0,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: !1,
            snapMode: "both",
            snapTolerance: 20,
            stack: !1,
            zIndex: !1,
            // callbacks
            drag: null,
            start: null,
            stop: null
        },
        _create: function() {
            "original" === this.options.helper && this._setPositionRelative(), this.options.addClasses && this.element.addClass("ui-draggable"), 
            this.options.disabled && this.element.addClass("ui-draggable-disabled"), this._setHandleClassName(), 
            this._mouseInit();
        },
        _setOption: function(key, value) {
            this._super(key, value), "handle" === key && (this._removeHandleClassName(), this._setHandleClassName());
        },
        _destroy: function() {
            return (this.helper || this.element).is(".ui-draggable-dragging") ? void (this.destroyOnClear = !0) : (this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"), 
            this._removeHandleClassName(), void this._mouseDestroy());
        },
        _mouseCapture: function(event) {
            var o = this.options;
            // among others, prevent a drag on a resizable-handle
            // among others, prevent a drag on a resizable-handle
            //Quit if we're not on a valid handle
            return this._blurActiveElement(event), this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0 ? !1 : (this.handle = this._getHandle(event), 
            this.handle ? (this._blockFrames(o.iframeFix === !0 ? "iframe" : o.iframeFix), !0) : !1);
        },
        _blockFrames: function(selector) {
            this.iframeBlocks = this.document.find(selector).map(function() {
                var iframe = $(this);
                return $("<div>").css("position", "absolute").appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0];
            });
        },
        _unblockFrames: function() {
            this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks);
        },
        _blurActiveElement: function(event) {
            var document = this.document[0];
            // Only need to blur if the event occurred on the draggable itself, see #10527
            if (this.handleElement.is(event.target)) // support: IE9
            // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
            try {
                // Support: IE9, IE10
                // If the <body> is blurred, IE will switch windows, see #9520
                document.activeElement && "body" !== document.activeElement.nodeName.toLowerCase() && // Blur any element that currently has focus, see #4261
                $(document.activeElement).blur();
            } catch (error) {}
        },
        _mouseStart: function(event) {
            var o = this.options;
            //Trigger event + callbacks
            //Create and append the visible helper
            //Cache the helper size
            //If ddmanager is used for droppables, set the global draggable
            /*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */
            //Cache the margins of the original element
            //Store the helper's css position
            //The element's absolute position on the page minus margins
            //Generate the original position
            //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
            //Set a containment if given in the options
            //Trigger event + callbacks
            //Recache the helper size
            //Prepare the droppable offsets
            // Reset helper's right/bottom css if they're set and set explicit width/height instead
            // as this prevents resizing of elements with right/bottom set (see #7772)
            //Execute the drag once - this causes the helper not to be visible before getting its correct position
            //If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
            return this.helper = this._createHelper(event), this.helper.addClass("ui-draggable-dragging"), 
            this._cacheHelperProportions(), $.ui.ddmanager && ($.ui.ddmanager.current = this), 
            this._cacheMargins(), this.cssPosition = this.helper.css("position"), this.scrollParent = this.helper.scrollParent(!0), 
            this.offsetParent = this.helper.offsetParent(), this.hasFixedAncestor = this.helper.parents().filter(function() {
                return "fixed" === $(this).css("position");
            }).length > 0, this.positionAbs = this.element.offset(), this._refreshOffsets(event), 
            this.originalPosition = this.position = this._generatePosition(event, !1), this.originalPageX = event.pageX, 
            this.originalPageY = event.pageY, o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt), 
            this._setContainment(), this._trigger("start", event) === !1 ? (this._clear(), !1) : (this._cacheHelperProportions(), 
            $.ui.ddmanager && !o.dropBehaviour && $.ui.ddmanager.prepareOffsets(this, event), 
            this._normalizeRightBottom(), this._mouseDrag(event, !0), $.ui.ddmanager && $.ui.ddmanager.dragStart(this, event), 
            !0);
        },
        _refreshOffsets: function(event) {
            this.offset = {
                top: this.positionAbs.top - this.margins.top,
                left: this.positionAbs.left - this.margins.left,
                scroll: !1,
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            }, this.offset.click = {
                left: event.pageX - this.offset.left,
                top: event.pageY - this.offset.top
            };
        },
        _mouseDrag: function(event, noPropagation) {
            //Call plugins and callbacks and use the resulting position if something is returned
            if (// reset any necessary cached properties (see #5009)
            this.hasFixedAncestor && (this.offset.parent = this._getParentOffset()), //Compute the helpers position
            this.position = this._generatePosition(event, !0), this.positionAbs = this._convertPositionTo("absolute"), 
            !noPropagation) {
                var ui = this._uiHash();
                if (this._trigger("drag", event, ui) === !1) return this._mouseUp({}), !1;
                this.position = ui.position;
            }
            return this.helper[0].style.left = this.position.left + "px", this.helper[0].style.top = this.position.top + "px", 
            $.ui.ddmanager && $.ui.ddmanager.drag(this, event), !1;
        },
        _mouseStop: function(event) {
            //If we are using droppables, inform the manager about the drop
            var that = this, dropped = !1;
            //if a drop comes from outside (a sortable)
            return $.ui.ddmanager && !this.options.dropBehaviour && (dropped = $.ui.ddmanager.drop(this, event)), 
            this.dropped && (dropped = this.dropped, this.dropped = !1), "invalid" === this.options.revert && !dropped || "valid" === this.options.revert && dropped || this.options.revert === !0 || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped) ? $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                that._trigger("stop", event) !== !1 && that._clear();
            }) : this._trigger("stop", event) !== !1 && this._clear(), !1;
        },
        _mouseUp: function(event) {
            //If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
            // Only need to focus if the event occurred on the draggable itself, see #10527
            // The interaction is over; whether or not the click resulted in a drag, focus the element
            return this._unblockFrames(), $.ui.ddmanager && $.ui.ddmanager.dragStop(this, event), 
            this.handleElement.is(event.target) && this.element.focus(), $.ui.mouse.prototype._mouseUp.call(this, event);
        },
        cancel: function() {
            return this.helper.is(".ui-draggable-dragging") ? this._mouseUp({}) : this._clear(), 
            this;
        },
        _getHandle: function(event) {
            return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : !0;
        },
        _setHandleClassName: function() {
            this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element, 
            this.handleElement.addClass("ui-draggable-handle");
        },
        _removeHandleClassName: function() {
            this.handleElement.removeClass("ui-draggable-handle");
        },
        _createHelper: function(event) {
            var o = this.options, helperIsFunction = $.isFunction(o.helper), helper = helperIsFunction ? $(o.helper.apply(this.element[0], [ event ])) : "clone" === o.helper ? this.element.clone().removeAttr("id") : this.element;
            // http://bugs.jqueryui.com/ticket/9446
            // a helper function can return the original element
            // which wouldn't have been set to relative in _create
            return helper.parents("body").length || helper.appendTo("parent" === o.appendTo ? this.element[0].parentNode : o.appendTo), 
            helperIsFunction && helper[0] === this.element[0] && this._setPositionRelative(), 
            helper[0] === this.element[0] || /(fixed|absolute)/.test(helper.css("position")) || helper.css("position", "absolute"), 
            helper;
        },
        _setPositionRelative: function() {
            /^(?:r|a|f)/.test(this.element.css("position")) || (this.element[0].style.position = "relative");
        },
        _adjustOffsetFromHelper: function(obj) {
            "string" == typeof obj && (obj = obj.split(" ")), $.isArray(obj) && (obj = {
                left: +obj[0],
                top: +obj[1] || 0
            }), "left" in obj && (this.offset.click.left = obj.left + this.margins.left), "right" in obj && (this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left), 
            "top" in obj && (this.offset.click.top = obj.top + this.margins.top), "bottom" in obj && (this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top);
        },
        _isRootNode: function(element) {
            return /(html|body)/i.test(element.tagName) || element === this.document[0];
        },
        _getParentOffset: function() {
            //Get the offsetParent and cache its position
            var po = this.offsetParent.offset(), document = this.document[0];
            // This is a special case where we need to modify a offset calculated on start, since the following happened:
            // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
            // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
            //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
            return "absolute" === this.cssPosition && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0]) && (po.left += this.scrollParent.scrollLeft(), 
            po.top += this.scrollParent.scrollTop()), this._isRootNode(this.offsetParent[0]) && (po = {
                top: 0,
                left: 0
            }), {
                top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            };
        },
        _getRelativeOffset: function() {
            if ("relative" !== this.cssPosition) return {
                top: 0,
                left: 0
            };
            var p = this.element.position(), scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
            return {
                top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + (scrollIsRootNode ? 0 : this.scrollParent.scrollTop()),
                left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + (scrollIsRootNode ? 0 : this.scrollParent.scrollLeft())
            };
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.element.css("marginLeft"), 10) || 0,
                top: parseInt(this.element.css("marginTop"), 10) || 0,
                right: parseInt(this.element.css("marginRight"), 10) || 0,
                bottom: parseInt(this.element.css("marginBottom"), 10) || 0
            };
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            };
        },
        _setContainment: function() {
            var isUserScrollable, c, ce, o = this.options, document = this.document[0];
            return this.relativeContainer = null, o.containment ? "window" === o.containment ? void (this.containment = [ $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ]) : "document" === o.containment ? void (this.containment = [ 0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ]) : o.containment.constructor === Array ? void (this.containment = o.containment) : ("parent" === o.containment && (o.containment = this.helper[0].parentNode), 
            c = $(o.containment), ce = c[0], void (ce && (isUserScrollable = /(scroll|auto)/.test(c.css("overflow")), 
            this.containment = [ (parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"), 10) || 0), (isUserScrollable ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (isUserScrollable ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom ], 
            this.relativeContainer = c))) : void (this.containment = null);
        },
        _convertPositionTo: function(d, pos) {
            pos || (pos = this.position);
            var mod = "absolute" === d ? 1 : -1, scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
            return {
                top: pos.top + // The absolute mouse position
                this.offset.relative.top * mod + // Only for relative positioned nodes: Relative offset from element to offset parent
                this.offset.parent.top * mod - // The offsetParent's offset without borders (offset + border)
                ("fixed" === this.cssPosition ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod,
                left: pos.left + // The absolute mouse position
                this.offset.relative.left * mod + // Only for relative positioned nodes: Relative offset from element to offset parent
                this.offset.parent.left * mod - // The offsetParent's offset without borders (offset + border)
                ("fixed" === this.cssPosition ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod
            };
        },
        _generatePosition: function(event, constrainPosition) {
            var containment, co, top, left, o = this.options, scrollIsRootNode = this._isRootNode(this.scrollParent[0]), pageX = event.pageX, pageY = event.pageY;
            // Cache the scroll
            /*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */
            // If we are not dragging yet, we won't check for options
            //Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
            return scrollIsRootNode && this.offset.scroll || (this.offset.scroll = {
                top: this.scrollParent.scrollTop(),
                left: this.scrollParent.scrollLeft()
            }), constrainPosition && (this.containment && (this.relativeContainer ? (co = this.relativeContainer.offset(), 
            containment = [ this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top ]) : containment = this.containment, 
            event.pageX - this.offset.click.left < containment[0] && (pageX = containment[0] + this.offset.click.left), 
            event.pageY - this.offset.click.top < containment[1] && (pageY = containment[1] + this.offset.click.top), 
            event.pageX - this.offset.click.left > containment[2] && (pageX = containment[2] + this.offset.click.left), 
            event.pageY - this.offset.click.top > containment[3] && (pageY = containment[3] + this.offset.click.top)), 
            o.grid && (top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY, 
            pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top, 
            left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX, 
            pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left), 
            "y" === o.axis && (pageX = this.originalPageX), "x" === o.axis && (pageY = this.originalPageY)), 
            {
                top: pageY - // The absolute mouse position
                this.offset.click.top - // Click offset (relative to the element)
                this.offset.relative.top - // Only for relative positioned nodes: Relative offset from element to offset parent
                this.offset.parent.top + (// The offsetParent's offset without borders (offset + border)
                "fixed" === this.cssPosition ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top),
                left: pageX - // The absolute mouse position
                this.offset.click.left - // Click offset (relative to the element)
                this.offset.relative.left - // Only for relative positioned nodes: Relative offset from element to offset parent
                this.offset.parent.left + (// The offsetParent's offset without borders (offset + border)
                "fixed" === this.cssPosition ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)
            };
        },
        _clear: function() {
            this.helper.removeClass("ui-draggable-dragging"), this.helper[0] === this.element[0] || this.cancelHelperRemoval || this.helper.remove(), 
            this.helper = null, this.cancelHelperRemoval = !1, this.destroyOnClear && this.destroy();
        },
        _normalizeRightBottom: function() {
            "y" !== this.options.axis && "auto" !== this.helper.css("right") && (this.helper.width(this.helper.width()), 
            this.helper.css("right", "auto")), "x" !== this.options.axis && "auto" !== this.helper.css("bottom") && (this.helper.height(this.helper.height()), 
            this.helper.css("bottom", "auto"));
        },
        // From now on bulk stuff - mainly helpers
        _trigger: function(type, event, ui) {
            // Absolute position and offset (see #6884 ) have to be recalculated after plugins
            return ui = ui || this._uiHash(), $.ui.plugin.call(this, type, [ event, ui, this ], !0), 
            /^(drag|start|stop)/.test(type) && (this.positionAbs = this._convertPositionTo("absolute"), 
            ui.offset = this.positionAbs), $.Widget.prototype._trigger.call(this, type, event, ui);
        },
        plugins: {},
        _uiHash: function() {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            };
        }
    }), $.ui.plugin.add("draggable", "connectToSortable", {
        start: function(event, ui, draggable) {
            var uiSortable = $.extend({}, ui, {
                item: draggable.element
            });
            draggable.sortables = [], $(draggable.options.connectToSortable).each(function() {
                var sortable = $(this).sortable("instance");
                sortable && !sortable.options.disabled && (draggable.sortables.push(sortable), // refreshPositions is called at drag start to refresh the containerCache
                // which is used in drag. This ensures it's initialized and synchronized
                // with any changes that might have happened on the page since initialization.
                sortable.refreshPositions(), sortable._trigger("activate", event, uiSortable));
            });
        },
        stop: function(event, ui, draggable) {
            var uiSortable = $.extend({}, ui, {
                item: draggable.element
            });
            draggable.cancelHelperRemoval = !1, $.each(draggable.sortables, function() {
                var sortable = this;
                sortable.isOver ? (sortable.isOver = 0, // Allow this sortable to handle removing the helper
                draggable.cancelHelperRemoval = !0, sortable.cancelHelperRemoval = !1, // Use _storedCSS To restore properties in the sortable,
                // as this also handles revert (#9675) since the draggable
                // may have modified them in unexpected ways (#8809)
                sortable._storedCSS = {
                    position: sortable.placeholder.css("position"),
                    top: sortable.placeholder.css("top"),
                    left: sortable.placeholder.css("left")
                }, sortable._mouseStop(event), // Once drag has ended, the sortable should return to using
                // its original helper, not the shared helper from draggable
                sortable.options.helper = sortable.options._helper) : (// Prevent this Sortable from removing the helper.
                // However, don't set the draggable to remove the helper
                // either as another connected Sortable may yet handle the removal.
                sortable.cancelHelperRemoval = !0, sortable._trigger("deactivate", event, uiSortable));
            });
        },
        drag: function(event, ui, draggable) {
            $.each(draggable.sortables, function() {
                var innermostIntersecting = !1, sortable = this;
                // Copy over variables that sortable's _intersectsWith uses
                sortable.positionAbs = draggable.positionAbs, sortable.helperProportions = draggable.helperProportions, 
                sortable.offset.click = draggable.offset.click, sortable._intersectsWith(sortable.containerCache) && (innermostIntersecting = !0, 
                $.each(draggable.sortables, function() {
                    // Copy over variables that sortable's _intersectsWith uses
                    return this.positionAbs = draggable.positionAbs, this.helperProportions = draggable.helperProportions, 
                    this.offset.click = draggable.offset.click, this !== sortable && this._intersectsWith(this.containerCache) && $.contains(sortable.element[0], this.element[0]) && (innermostIntersecting = !1), 
                    innermostIntersecting;
                })), innermostIntersecting ? (// If it intersects, we use a little isOver variable and set it once,
                // so that the move-in stuff gets fired only once.
                sortable.isOver || (sortable.isOver = 1, // Store draggable's parent in case we need to reappend to it later.
                draggable._parent = ui.helper.parent(), sortable.currentItem = ui.helper.appendTo(sortable.element).data("ui-sortable-item", !0), 
                // Store helper option to later restore it
                sortable.options._helper = sortable.options.helper, sortable.options.helper = function() {
                    return ui.helper[0];
                }, // Fire the start events of the sortable with our passed browser event,
                // and our own helper (so it doesn't create a new one)
                event.target = sortable.currentItem[0], sortable._mouseCapture(event, !0), sortable._mouseStart(event, !0, !0), 
                // Because the browser event is way off the new appended portlet,
                // modify necessary variables to reflect the changes
                sortable.offset.click.top = draggable.offset.click.top, sortable.offset.click.left = draggable.offset.click.left, 
                sortable.offset.parent.left -= draggable.offset.parent.left - sortable.offset.parent.left, 
                sortable.offset.parent.top -= draggable.offset.parent.top - sortable.offset.parent.top, 
                draggable._trigger("toSortable", event), // Inform draggable that the helper is in a valid drop zone,
                // used solely in the revert option to handle "valid/invalid".
                draggable.dropped = sortable.element, // Need to refreshPositions of all sortables in the case that
                // adding to one sortable changes the location of the other sortables (#9675)
                $.each(draggable.sortables, function() {
                    this.refreshPositions();
                }), // hack so receive/update callbacks work (mostly)
                draggable.currentItem = draggable.element, sortable.fromOutside = draggable), sortable.currentItem && (sortable._mouseDrag(event), 
                // Copy the sortable's position because the draggable's can potentially reflect
                // a relative position, while sortable is always absolute, which the dragged
                // element has now become. (#8809)
                ui.position = sortable.position)) : // If it doesn't intersect with the sortable, and it intersected before,
                // we fake the drag stop of the sortable, but make sure it doesn't remove
                // the helper by using cancelHelperRemoval.
                sortable.isOver && (sortable.isOver = 0, sortable.cancelHelperRemoval = !0, // Calling sortable's mouseStop would trigger a revert,
                // so revert must be temporarily false until after mouseStop is called.
                sortable.options._revert = sortable.options.revert, sortable.options.revert = !1, 
                sortable._trigger("out", event, sortable._uiHash(sortable)), sortable._mouseStop(event, !0), 
                // restore sortable behaviors that were modfied
                // when the draggable entered the sortable area (#9481)
                sortable.options.revert = sortable.options._revert, sortable.options.helper = sortable.options._helper, 
                sortable.placeholder && sortable.placeholder.remove(), // Restore and recalculate the draggable's offset considering the sortable
                // may have modified them in unexpected ways. (#8809, #10669)
                ui.helper.appendTo(draggable._parent), draggable._refreshOffsets(event), ui.position = draggable._generatePosition(event, !0), 
                draggable._trigger("fromSortable", event), // Inform draggable that the helper is no longer in a valid drop zone
                draggable.dropped = !1, // Need to refreshPositions of all sortables just in case removing
                // from one sortable changes the location of other sortables (#9675)
                $.each(draggable.sortables, function() {
                    this.refreshPositions();
                }));
            });
        }
    }), $.ui.plugin.add("draggable", "cursor", {
        start: function(event, ui, instance) {
            var t = $("body"), o = instance.options;
            t.css("cursor") && (o._cursor = t.css("cursor")), t.css("cursor", o.cursor);
        },
        stop: function(event, ui, instance) {
            var o = instance.options;
            o._cursor && $("body").css("cursor", o._cursor);
        }
    }), $.ui.plugin.add("draggable", "opacity", {
        start: function(event, ui, instance) {
            var t = $(ui.helper), o = instance.options;
            t.css("opacity") && (o._opacity = t.css("opacity")), t.css("opacity", o.opacity);
        },
        stop: function(event, ui, instance) {
            var o = instance.options;
            o._opacity && $(ui.helper).css("opacity", o._opacity);
        }
    }), $.ui.plugin.add("draggable", "scroll", {
        start: function(event, ui, i) {
            i.scrollParentNotHidden || (i.scrollParentNotHidden = i.helper.scrollParent(!1)), 
            i.scrollParentNotHidden[0] !== i.document[0] && "HTML" !== i.scrollParentNotHidden[0].tagName && (i.overflowOffset = i.scrollParentNotHidden.offset());
        },
        drag: function(event, ui, i) {
            var o = i.options, scrolled = !1, scrollParent = i.scrollParentNotHidden[0], document = i.document[0];
            scrollParent !== document && "HTML" !== scrollParent.tagName ? (o.axis && "x" === o.axis || (i.overflowOffset.top + scrollParent.offsetHeight - event.pageY < o.scrollSensitivity ? scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed : event.pageY - i.overflowOffset.top < o.scrollSensitivity && (scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed)), 
            o.axis && "y" === o.axis || (i.overflowOffset.left + scrollParent.offsetWidth - event.pageX < o.scrollSensitivity ? scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed : event.pageX - i.overflowOffset.left < o.scrollSensitivity && (scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed))) : (o.axis && "x" === o.axis || (event.pageY - $(document).scrollTop() < o.scrollSensitivity ? scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed) : $(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity && (scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed))), 
            o.axis && "y" === o.axis || (event.pageX - $(document).scrollLeft() < o.scrollSensitivity ? scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed) : $(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity && (scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed)))), 
            scrolled !== !1 && $.ui.ddmanager && !o.dropBehaviour && $.ui.ddmanager.prepareOffsets(i, event);
        }
    }), $.ui.plugin.add("draggable", "snap", {
        start: function(event, ui, i) {
            var o = i.options;
            i.snapElements = [], $(o.snap.constructor !== String ? o.snap.items || ":data(ui-draggable)" : o.snap).each(function() {
                var $t = $(this), $o = $t.offset();
                this !== i.element[0] && i.snapElements.push({
                    item: this,
                    width: $t.outerWidth(),
                    height: $t.outerHeight(),
                    top: $o.top,
                    left: $o.left
                });
            });
        },
        drag: function(event, ui, inst) {
            var ts, bs, ls, rs, l, r, t, b, i, first, o = inst.options, d = o.snapTolerance, x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width, y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;
            for (i = inst.snapElements.length - 1; i >= 0; i--) l = inst.snapElements[i].left - inst.margins.left, 
            r = l + inst.snapElements[i].width, t = inst.snapElements[i].top - inst.margins.top, 
            b = t + inst.snapElements[i].height, l - d > x2 || x1 > r + d || t - d > y2 || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item) ? (inst.snapElements[i].snapping && inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {
                snapItem: inst.snapElements[i].item
            })), inst.snapElements[i].snapping = !1) : ("inner" !== o.snapMode && (ts = Math.abs(t - y2) <= d, 
            bs = Math.abs(b - y1) <= d, ls = Math.abs(l - x2) <= d, rs = Math.abs(r - x1) <= d, 
            ts && (ui.position.top = inst._convertPositionTo("relative", {
                top: t - inst.helperProportions.height,
                left: 0
            }).top), bs && (ui.position.top = inst._convertPositionTo("relative", {
                top: b,
                left: 0
            }).top), ls && (ui.position.left = inst._convertPositionTo("relative", {
                top: 0,
                left: l - inst.helperProportions.width
            }).left), rs && (ui.position.left = inst._convertPositionTo("relative", {
                top: 0,
                left: r
            }).left)), first = ts || bs || ls || rs, "outer" !== o.snapMode && (ts = Math.abs(t - y1) <= d, 
            bs = Math.abs(b - y2) <= d, ls = Math.abs(l - x1) <= d, rs = Math.abs(r - x2) <= d, 
            ts && (ui.position.top = inst._convertPositionTo("relative", {
                top: t,
                left: 0
            }).top), bs && (ui.position.top = inst._convertPositionTo("relative", {
                top: b - inst.helperProportions.height,
                left: 0
            }).top), ls && (ui.position.left = inst._convertPositionTo("relative", {
                top: 0,
                left: l
            }).left), rs && (ui.position.left = inst._convertPositionTo("relative", {
                top: 0,
                left: r - inst.helperProportions.width
            }).left)), !inst.snapElements[i].snapping && (ts || bs || ls || rs || first) && inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {
                snapItem: inst.snapElements[i].item
            })), inst.snapElements[i].snapping = ts || bs || ls || rs || first);
        }
    }), $.ui.plugin.add("draggable", "stack", {
        start: function(event, ui, instance) {
            var min, o = instance.options, group = $.makeArray($(o.stack)).sort(function(a, b) {
                return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
            });
            group.length && (min = parseInt($(group[0]).css("zIndex"), 10) || 0, $(group).each(function(i) {
                $(this).css("zIndex", min + i);
            }), this.css("zIndex", min + group.length));
        }
    }), $.ui.plugin.add("draggable", "zIndex", {
        start: function(event, ui, instance) {
            var t = $(ui.helper), o = instance.options;
            t.css("zIndex") && (o._zIndex = t.css("zIndex")), t.css("zIndex", o.zIndex);
        },
        stop: function(event, ui, instance) {
            var o = instance.options;
            o._zIndex && $(ui.helper).css("zIndex", o._zIndex);
        }
    });
    $.ui.draggable;
    /*!
 * jQuery UI Resizable 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/resizable/
 */
    $.widget("ui.resizable", $.ui.mouse, {
        version: "1.11.4",
        widgetEventPrefix: "resize",
        options: {
            alsoResize: !1,
            animate: !1,
            animateDuration: "slow",
            animateEasing: "swing",
            aspectRatio: !1,
            autoHide: !1,
            containment: !1,
            ghost: !1,
            grid: !1,
            handles: "e,s,se",
            helper: !1,
            maxHeight: null,
            maxWidth: null,
            minHeight: 10,
            minWidth: 10,
            // See #7960
            zIndex: 90,
            // callbacks
            resize: null,
            start: null,
            stop: null
        },
        _num: function(value) {
            return parseInt(value, 10) || 0;
        },
        _isNumber: function(value) {
            return !isNaN(parseInt(value, 10));
        },
        _hasScroll: function(el, a) {
            if ("hidden" === $(el).css("overflow")) return !1;
            var scroll = a && "left" === a ? "scrollLeft" : "scrollTop", has = !1;
            // TODO: determine which cases actually cause this to happen
            // if the element doesn't have the scroll set, see if it's possible to
            // set the scroll
            return el[scroll] > 0 ? !0 : (el[scroll] = 1, has = el[scroll] > 0, el[scroll] = 0, 
            has);
        },
        _create: function() {
            var n, i, handle, axis, hname, that = this, o = this.options;
            if (this.element.addClass("ui-resizable"), $.extend(this, {
                _aspectRatio: !!o.aspectRatio,
                aspectRatio: o.aspectRatio,
                originalElement: this.element,
                _proportionallyResizeElements: [],
                _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
            }), // Wrap the element if it cannot hold child nodes
            this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i) && (this.element.wrap($("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
                position: this.element.css("position"),
                width: this.element.outerWidth(),
                height: this.element.outerHeight(),
                top: this.element.css("top"),
                left: this.element.css("left")
            })), this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance")), 
            this.elementIsWrapper = !0, this.element.css({
                marginLeft: this.originalElement.css("marginLeft"),
                marginTop: this.originalElement.css("marginTop"),
                marginRight: this.originalElement.css("marginRight"),
                marginBottom: this.originalElement.css("marginBottom")
            }), this.originalElement.css({
                marginLeft: 0,
                marginTop: 0,
                marginRight: 0,
                marginBottom: 0
            }), // support: Safari
            // Prevent Safari textarea resize
            this.originalResizeStyle = this.originalElement.css("resize"), this.originalElement.css("resize", "none"), 
            this._proportionallyResizeElements.push(this.originalElement.css({
                position: "static",
                zoom: 1,
                display: "block"
            })), // support: IE9
            // avoid IE jump (hard set the margin)
            this.originalElement.css({
                margin: this.originalElement.css("margin")
            }), this._proportionallyResize()), this.handles = o.handles || ($(".ui-resizable-handle", this.element).length ? {
                n: ".ui-resizable-n",
                e: ".ui-resizable-e",
                s: ".ui-resizable-s",
                w: ".ui-resizable-w",
                se: ".ui-resizable-se",
                sw: ".ui-resizable-sw",
                ne: ".ui-resizable-ne",
                nw: ".ui-resizable-nw"
            } : "e,s,se"), this._handles = $(), this.handles.constructor === String) for ("all" === this.handles && (this.handles = "n,e,s,w,se,sw,ne,nw"), 
            n = this.handles.split(","), this.handles = {}, i = 0; i < n.length; i++) handle = $.trim(n[i]), 
            hname = "ui-resizable-" + handle, axis = $("<div class='ui-resizable-handle " + hname + "'></div>"), 
            axis.css({
                zIndex: o.zIndex
            }), // TODO : What's going on here?
            "se" === handle && axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se"), this.handles[handle] = ".ui-resizable-" + handle, 
            this.element.append(axis);
            this._renderAxis = function(target) {
                var i, axis, padPos, padWrapper;
                target = target || this.element;
                for (i in this.handles) this.handles[i].constructor === String ? this.handles[i] = this.element.children(this.handles[i]).first().show() : (this.handles[i].jquery || this.handles[i].nodeType) && (this.handles[i] = $(this.handles[i]), 
                this._on(this.handles[i], {
                    mousedown: that._mouseDown
                })), this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i) && (axis = $(this.handles[i], this.element), 
                padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth(), 
                padPos = [ "padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left" ].join(""), 
                target.css(padPos, padWrapper), this._proportionallyResize()), this._handles = this._handles.add(this.handles[i]);
            }, // TODO: make renderAxis a prototype function
            this._renderAxis(this.element), this._handles = this._handles.add(this.element.find(".ui-resizable-handle")), 
            this._handles.disableSelection(), this._handles.mouseover(function() {
                that.resizing || (this.className && (axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)), 
                that.axis = axis && axis[1] ? axis[1] : "se");
            }), o.autoHide && (this._handles.hide(), $(this.element).addClass("ui-resizable-autohide").mouseenter(function() {
                o.disabled || ($(this).removeClass("ui-resizable-autohide"), that._handles.show());
            }).mouseleave(function() {
                o.disabled || that.resizing || ($(this).addClass("ui-resizable-autohide"), that._handles.hide());
            })), this._mouseInit();
        },
        _destroy: function() {
            this._mouseDestroy();
            var wrapper, _destroy = function(exp) {
                $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
            };
            // TODO: Unwrap at same DOM position
            return this.elementIsWrapper && (_destroy(this.element), wrapper = this.element, 
            this.originalElement.css({
                position: wrapper.css("position"),
                width: wrapper.outerWidth(),
                height: wrapper.outerHeight(),
                top: wrapper.css("top"),
                left: wrapper.css("left")
            }).insertAfter(wrapper), wrapper.remove()), this.originalElement.css("resize", this.originalResizeStyle), 
            _destroy(this.originalElement), this;
        },
        _mouseCapture: function(event) {
            var i, handle, capture = !1;
            for (i in this.handles) handle = $(this.handles[i])[0], (handle === event.target || $.contains(handle, event.target)) && (capture = !0);
            return !this.options.disabled && capture;
        },
        _mouseStart: function(event) {
            var curleft, curtop, cursor, o = this.options, el = this.element;
            return this.resizing = !0, this._renderProxy(), curleft = this._num(this.helper.css("left")), 
            curtop = this._num(this.helper.css("top")), o.containment && (curleft += $(o.containment).scrollLeft() || 0, 
            curtop += $(o.containment).scrollTop() || 0), this.offset = this.helper.offset(), 
            this.position = {
                left: curleft,
                top: curtop
            }, this.size = this._helper ? {
                width: this.helper.width(),
                height: this.helper.height()
            } : {
                width: el.width(),
                height: el.height()
            }, this.originalSize = this._helper ? {
                width: el.outerWidth(),
                height: el.outerHeight()
            } : {
                width: el.width(),
                height: el.height()
            }, this.sizeDiff = {
                width: el.outerWidth() - el.width(),
                height: el.outerHeight() - el.height()
            }, this.originalPosition = {
                left: curleft,
                top: curtop
            }, this.originalMousePosition = {
                left: event.pageX,
                top: event.pageY
            }, this.aspectRatio = "number" == typeof o.aspectRatio ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1, 
            cursor = $(".ui-resizable-" + this.axis).css("cursor"), $("body").css("cursor", "auto" === cursor ? this.axis + "-resize" : cursor), 
            el.addClass("ui-resizable-resizing"), this._propagate("start", event), !0;
        },
        _mouseDrag: function(event) {
            var data, props, smp = this.originalMousePosition, a = this.axis, dx = event.pageX - smp.left || 0, dy = event.pageY - smp.top || 0, trigger = this._change[a];
            return this._updatePrevProperties(), trigger ? (data = trigger.apply(this, [ event, dx, dy ]), 
            this._updateVirtualBoundaries(event.shiftKey), (this._aspectRatio || event.shiftKey) && (data = this._updateRatio(data, event)), 
            data = this._respectSize(data, event), this._updateCache(data), this._propagate("resize", event), 
            props = this._applyChanges(), !this._helper && this._proportionallyResizeElements.length && this._proportionallyResize(), 
            $.isEmptyObject(props) || (this._updatePrevProperties(), this._trigger("resize", event, this.ui()), 
            this._applyChanges()), !1) : !1;
        },
        _mouseStop: function(event) {
            this.resizing = !1;
            var pr, ista, soffseth, soffsetw, s, left, top, o = this.options, that = this;
            return this._helper && (pr = this._proportionallyResizeElements, ista = pr.length && /textarea/i.test(pr[0].nodeName), 
            soffseth = ista && this._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height, soffsetw = ista ? 0 : that.sizeDiff.width, 
            s = {
                width: that.helper.width() - soffsetw,
                height: that.helper.height() - soffseth
            }, left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null, 
            top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null, 
            o.animate || this.element.css($.extend(s, {
                top: top,
                left: left
            })), that.helper.height(that.size.height), that.helper.width(that.size.width), this._helper && !o.animate && this._proportionallyResize()), 
            $("body").css("cursor", "auto"), this.element.removeClass("ui-resizable-resizing"), 
            this._propagate("stop", event), this._helper && this.helper.remove(), !1;
        },
        _updatePrevProperties: function() {
            this.prevPosition = {
                top: this.position.top,
                left: this.position.left
            }, this.prevSize = {
                width: this.size.width,
                height: this.size.height
            };
        },
        _applyChanges: function() {
            var props = {};
            return this.position.top !== this.prevPosition.top && (props.top = this.position.top + "px"), 
            this.position.left !== this.prevPosition.left && (props.left = this.position.left + "px"), 
            this.size.width !== this.prevSize.width && (props.width = this.size.width + "px"), 
            this.size.height !== this.prevSize.height && (props.height = this.size.height + "px"), 
            this.helper.css(props), props;
        },
        _updateVirtualBoundaries: function(forceAspectRatio) {
            var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b, o = this.options;
            b = {
                minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,
                maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : 1 / 0,
                minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,
                maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : 1 / 0
            }, (this._aspectRatio || forceAspectRatio) && (pMinWidth = b.minHeight * this.aspectRatio, 
            pMinHeight = b.minWidth / this.aspectRatio, pMaxWidth = b.maxHeight * this.aspectRatio, 
            pMaxHeight = b.maxWidth / this.aspectRatio, pMinWidth > b.minWidth && (b.minWidth = pMinWidth), 
            pMinHeight > b.minHeight && (b.minHeight = pMinHeight), pMaxWidth < b.maxWidth && (b.maxWidth = pMaxWidth), 
            pMaxHeight < b.maxHeight && (b.maxHeight = pMaxHeight)), this._vBoundaries = b;
        },
        _updateCache: function(data) {
            this.offset = this.helper.offset(), this._isNumber(data.left) && (this.position.left = data.left), 
            this._isNumber(data.top) && (this.position.top = data.top), this._isNumber(data.height) && (this.size.height = data.height), 
            this._isNumber(data.width) && (this.size.width = data.width);
        },
        _updateRatio: function(data) {
            var cpos = this.position, csize = this.size, a = this.axis;
            return this._isNumber(data.height) ? data.width = data.height * this.aspectRatio : this._isNumber(data.width) && (data.height = data.width / this.aspectRatio), 
            "sw" === a && (data.left = cpos.left + (csize.width - data.width), data.top = null), 
            "nw" === a && (data.top = cpos.top + (csize.height - data.height), data.left = cpos.left + (csize.width - data.width)), 
            data;
        },
        _respectSize: function(data) {
            var o = this._vBoundaries, a = this.axis, ismaxw = this._isNumber(data.width) && o.maxWidth && o.maxWidth < data.width, ismaxh = this._isNumber(data.height) && o.maxHeight && o.maxHeight < data.height, isminw = this._isNumber(data.width) && o.minWidth && o.minWidth > data.width, isminh = this._isNumber(data.height) && o.minHeight && o.minHeight > data.height, dw = this.originalPosition.left + this.originalSize.width, dh = this.position.top + this.size.height, cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
            // Fixing jump error on top/left - bug #2330
            return isminw && (data.width = o.minWidth), isminh && (data.height = o.minHeight), 
            ismaxw && (data.width = o.maxWidth), ismaxh && (data.height = o.maxHeight), isminw && cw && (data.left = dw - o.minWidth), 
            ismaxw && cw && (data.left = dw - o.maxWidth), isminh && ch && (data.top = dh - o.minHeight), 
            ismaxh && ch && (data.top = dh - o.maxHeight), data.width || data.height || data.left || !data.top ? data.width || data.height || data.top || !data.left || (data.left = null) : data.top = null, 
            data;
        },
        _getPaddingPlusBorderDimensions: function(element) {
            for (var i = 0, widths = [], borders = [ element.css("borderTopWidth"), element.css("borderRightWidth"), element.css("borderBottomWidth"), element.css("borderLeftWidth") ], paddings = [ element.css("paddingTop"), element.css("paddingRight"), element.css("paddingBottom"), element.css("paddingLeft") ]; 4 > i; i++) widths[i] = parseInt(borders[i], 10) || 0, 
            widths[i] += parseInt(paddings[i], 10) || 0;
            return {
                height: widths[0] + widths[2],
                width: widths[1] + widths[3]
            };
        },
        _proportionallyResize: function() {
            if (this._proportionallyResizeElements.length) for (var prel, i = 0, element = this.helper || this.element; i < this._proportionallyResizeElements.length; i++) prel = this._proportionallyResizeElements[i], 
            // TODO: Seems like a bug to cache this.outerDimensions
            // considering that we are in a loop.
            this.outerDimensions || (this.outerDimensions = this._getPaddingPlusBorderDimensions(prel)), 
            prel.css({
                height: element.height() - this.outerDimensions.height || 0,
                width: element.width() - this.outerDimensions.width || 0
            });
        },
        _renderProxy: function() {
            var el = this.element, o = this.options;
            this.elementOffset = el.offset(), this._helper ? (this.helper = this.helper || $("<div style='overflow:hidden;'></div>"), 
            this.helper.addClass(this._helper).css({
                width: this.element.outerWidth() - 1,
                height: this.element.outerHeight() - 1,
                position: "absolute",
                left: this.elementOffset.left + "px",
                top: this.elementOffset.top + "px",
                zIndex: ++o.zIndex
            }), this.helper.appendTo("body").disableSelection()) : this.helper = this.element;
        },
        _change: {
            e: function(event, dx) {
                return {
                    width: this.originalSize.width + dx
                };
            },
            w: function(event, dx) {
                var cs = this.originalSize, sp = this.originalPosition;
                return {
                    left: sp.left + dx,
                    width: cs.width - dx
                };
            },
            n: function(event, dx, dy) {
                var cs = this.originalSize, sp = this.originalPosition;
                return {
                    top: sp.top + dy,
                    height: cs.height - dy
                };
            },
            s: function(event, dx, dy) {
                return {
                    height: this.originalSize.height + dy
                };
            },
            se: function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [ event, dx, dy ]));
            },
            sw: function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [ event, dx, dy ]));
            },
            ne: function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [ event, dx, dy ]));
            },
            nw: function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [ event, dx, dy ]));
            }
        },
        _propagate: function(n, event) {
            $.ui.plugin.call(this, n, [ event, this.ui() ]), "resize" !== n && this._trigger(n, event, this.ui());
        },
        plugins: {},
        ui: function() {
            return {
                originalElement: this.originalElement,
                element: this.element,
                helper: this.helper,
                position: this.position,
                size: this.size,
                originalSize: this.originalSize,
                originalPosition: this.originalPosition
            };
        }
    }), /*
 * Resizable Extensions
 */
    $.ui.plugin.add("resizable", "animate", {
        stop: function(event) {
            var that = $(this).resizable("instance"), o = that.options, pr = that._proportionallyResizeElements, ista = pr.length && /textarea/i.test(pr[0].nodeName), soffseth = ista && that._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height, soffsetw = ista ? 0 : that.sizeDiff.width, style = {
                width: that.size.width - soffsetw,
                height: that.size.height - soffseth
            }, left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null, top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null;
            that.element.animate($.extend(style, top && left ? {
                top: top,
                left: left
            } : {}), {
                duration: o.animateDuration,
                easing: o.animateEasing,
                step: function() {
                    var data = {
                        width: parseInt(that.element.css("width"), 10),
                        height: parseInt(that.element.css("height"), 10),
                        top: parseInt(that.element.css("top"), 10),
                        left: parseInt(that.element.css("left"), 10)
                    };
                    pr && pr.length && $(pr[0]).css({
                        width: data.width,
                        height: data.height
                    }), // propagating resize, and updating values for each animation step
                    that._updateCache(data), that._propagate("resize", event);
                }
            });
        }
    }), $.ui.plugin.add("resizable", "containment", {
        start: function() {
            var element, p, co, ch, cw, width, height, that = $(this).resizable("instance"), o = that.options, el = that.element, oc = o.containment, ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;
            ce && (that.containerElement = $(ce), /document/.test(oc) || oc === document ? (that.containerOffset = {
                left: 0,
                top: 0
            }, that.containerPosition = {
                left: 0,
                top: 0
            }, that.parentData = {
                element: $(document),
                left: 0,
                top: 0,
                width: $(document).width(),
                height: $(document).height() || document.body.parentNode.scrollHeight
            }) : (element = $(ce), p = [], $([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) {
                p[i] = that._num(element.css("padding" + name));
            }), that.containerOffset = element.offset(), that.containerPosition = element.position(), 
            that.containerSize = {
                height: element.innerHeight() - p[3],
                width: element.innerWidth() - p[1]
            }, co = that.containerOffset, ch = that.containerSize.height, cw = that.containerSize.width, 
            width = that._hasScroll(ce, "left") ? ce.scrollWidth : cw, height = that._hasScroll(ce) ? ce.scrollHeight : ch, 
            that.parentData = {
                element: ce,
                left: co.left,
                top: co.top,
                width: width,
                height: height
            }));
        },
        resize: function(event) {
            var woset, hoset, isParent, isOffsetRelative, that = $(this).resizable("instance"), o = that.options, co = that.containerOffset, cp = that.position, pRatio = that._aspectRatio || event.shiftKey, cop = {
                top: 0,
                left: 0
            }, ce = that.containerElement, continueResize = !0;
            ce[0] !== document && /static/.test(ce.css("position")) && (cop = co), cp.left < (that._helper ? co.left : 0) && (that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left), 
            pRatio && (that.size.height = that.size.width / that.aspectRatio, continueResize = !1), 
            that.position.left = o.helper ? co.left : 0), cp.top < (that._helper ? co.top : 0) && (that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top), 
            pRatio && (that.size.width = that.size.height * that.aspectRatio, continueResize = !1), 
            that.position.top = that._helper ? co.top : 0), isParent = that.containerElement.get(0) === that.element.parent().get(0), 
            isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position")), 
            isParent && isOffsetRelative ? (that.offset.left = that.parentData.left + that.position.left, 
            that.offset.top = that.parentData.top + that.position.top) : (that.offset.left = that.element.offset().left, 
            that.offset.top = that.element.offset().top), woset = Math.abs(that.sizeDiff.width + (that._helper ? that.offset.left - cop.left : that.offset.left - co.left)), 
            hoset = Math.abs(that.sizeDiff.height + (that._helper ? that.offset.top - cop.top : that.offset.top - co.top)), 
            woset + that.size.width >= that.parentData.width && (that.size.width = that.parentData.width - woset, 
            pRatio && (that.size.height = that.size.width / that.aspectRatio, continueResize = !1)), 
            hoset + that.size.height >= that.parentData.height && (that.size.height = that.parentData.height - hoset, 
            pRatio && (that.size.width = that.size.height * that.aspectRatio, continueResize = !1)), 
            continueResize || (that.position.left = that.prevPosition.left, that.position.top = that.prevPosition.top, 
            that.size.width = that.prevSize.width, that.size.height = that.prevSize.height);
        },
        stop: function() {
            var that = $(this).resizable("instance"), o = that.options, co = that.containerOffset, cop = that.containerPosition, ce = that.containerElement, helper = $(that.helper), ho = helper.offset(), w = helper.outerWidth() - that.sizeDiff.width, h = helper.outerHeight() - that.sizeDiff.height;
            that._helper && !o.animate && /relative/.test(ce.css("position")) && $(this).css({
                left: ho.left - cop.left - co.left,
                width: w,
                height: h
            }), that._helper && !o.animate && /static/.test(ce.css("position")) && $(this).css({
                left: ho.left - cop.left - co.left,
                width: w,
                height: h
            });
        }
    }), $.ui.plugin.add("resizable", "alsoResize", {
        start: function() {
            var that = $(this).resizable("instance"), o = that.options;
            $(o.alsoResize).each(function() {
                var el = $(this);
                el.data("ui-resizable-alsoresize", {
                    width: parseInt(el.width(), 10),
                    height: parseInt(el.height(), 10),
                    left: parseInt(el.css("left"), 10),
                    top: parseInt(el.css("top"), 10)
                });
            });
        },
        resize: function(event, ui) {
            var that = $(this).resizable("instance"), o = that.options, os = that.originalSize, op = that.originalPosition, delta = {
                height: that.size.height - os.height || 0,
                width: that.size.width - os.width || 0,
                top: that.position.top - op.top || 0,
                left: that.position.left - op.left || 0
            };
            $(o.alsoResize).each(function() {
                var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {}, css = el.parents(ui.originalElement[0]).length ? [ "width", "height" ] : [ "width", "height", "top", "left" ];
                $.each(css, function(i, prop) {
                    var sum = (start[prop] || 0) + (delta[prop] || 0);
                    sum && sum >= 0 && (style[prop] = sum || null);
                }), el.css(style);
            });
        },
        stop: function() {
            $(this).removeData("resizable-alsoresize");
        }
    }), $.ui.plugin.add("resizable", "ghost", {
        start: function() {
            var that = $(this).resizable("instance"), o = that.options, cs = that.size;
            that.ghost = that.originalElement.clone(), that.ghost.css({
                opacity: .25,
                display: "block",
                position: "relative",
                height: cs.height,
                width: cs.width,
                margin: 0,
                left: 0,
                top: 0
            }).addClass("ui-resizable-ghost").addClass("string" == typeof o.ghost ? o.ghost : ""), 
            that.ghost.appendTo(that.helper);
        },
        resize: function() {
            var that = $(this).resizable("instance");
            that.ghost && that.ghost.css({
                position: "relative",
                height: that.size.height,
                width: that.size.width
            });
        },
        stop: function() {
            var that = $(this).resizable("instance");
            that.ghost && that.helper && that.helper.get(0).removeChild(that.ghost.get(0));
        }
    }), $.ui.plugin.add("resizable", "grid", {
        resize: function() {
            var outerDimensions, that = $(this).resizable("instance"), o = that.options, cs = that.size, os = that.originalSize, op = that.originalPosition, a = that.axis, grid = "number" == typeof o.grid ? [ o.grid, o.grid ] : o.grid, gridX = grid[0] || 1, gridY = grid[1] || 1, ox = Math.round((cs.width - os.width) / gridX) * gridX, oy = Math.round((cs.height - os.height) / gridY) * gridY, newWidth = os.width + ox, newHeight = os.height + oy, isMaxWidth = o.maxWidth && o.maxWidth < newWidth, isMaxHeight = o.maxHeight && o.maxHeight < newHeight, isMinWidth = o.minWidth && o.minWidth > newWidth, isMinHeight = o.minHeight && o.minHeight > newHeight;
            o.grid = grid, isMinWidth && (newWidth += gridX), isMinHeight && (newHeight += gridY), 
            isMaxWidth && (newWidth -= gridX), isMaxHeight && (newHeight -= gridY), /^(se|s|e)$/.test(a) ? (that.size.width = newWidth, 
            that.size.height = newHeight) : /^(ne)$/.test(a) ? (that.size.width = newWidth, 
            that.size.height = newHeight, that.position.top = op.top - oy) : /^(sw)$/.test(a) ? (that.size.width = newWidth, 
            that.size.height = newHeight, that.position.left = op.left - ox) : ((0 >= newHeight - gridY || 0 >= newWidth - gridX) && (outerDimensions = that._getPaddingPlusBorderDimensions(this)), 
            newHeight - gridY > 0 ? (that.size.height = newHeight, that.position.top = op.top - oy) : (newHeight = gridY - outerDimensions.height, 
            that.size.height = newHeight, that.position.top = op.top + os.height - newHeight), 
            newWidth - gridX > 0 ? (that.size.width = newWidth, that.position.left = op.left - ox) : (newWidth = gridX - outerDimensions.width, 
            that.size.width = newWidth, that.position.left = op.left + os.width - newWidth));
        }
    });
    $.ui.resizable, $.widget("ui.dialog", {
        version: "1.11.4",
        options: {
            appendTo: "body",
            autoOpen: !0,
            buttons: [],
            closeOnEscape: !0,
            closeText: "Close",
            dialogClass: "",
            draggable: !0,
            hide: null,
            height: "auto",
            maxHeight: null,
            maxWidth: null,
            minHeight: 150,
            minWidth: 150,
            modal: !1,
            position: {
                my: "center",
                at: "center",
                of: window,
                collision: "fit",
                // Ensure the titlebar is always visible
                using: function(pos) {
                    var topOffset = $(this).css(pos).offset().top;
                    0 > topOffset && $(this).css("top", pos.top - topOffset);
                }
            },
            resizable: !0,
            show: null,
            title: null,
            width: 300,
            // callbacks
            beforeClose: null,
            close: null,
            drag: null,
            dragStart: null,
            dragStop: null,
            focus: null,
            open: null,
            resize: null,
            resizeStart: null,
            resizeStop: null
        },
        sizeRelatedOptions: {
            buttons: !0,
            height: !0,
            maxHeight: !0,
            maxWidth: !0,
            minHeight: !0,
            minWidth: !0,
            width: !0
        },
        resizableRelatedOptions: {
            maxHeight: !0,
            maxWidth: !0,
            minHeight: !0,
            minWidth: !0
        },
        _create: function() {
            this.originalCss = {
                display: this.element[0].style.display,
                width: this.element[0].style.width,
                minHeight: this.element[0].style.minHeight,
                maxHeight: this.element[0].style.maxHeight,
                height: this.element[0].style.height
            }, this.originalPosition = {
                parent: this.element.parent(),
                index: this.element.parent().children().index(this.element)
            }, this.originalTitle = this.element.attr("title"), this.options.title = this.options.title || this.originalTitle, 
            this._createWrapper(), this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog), 
            this._createTitlebar(), this._createButtonPane(), this.options.draggable && $.fn.draggable && this._makeDraggable(), 
            this.options.resizable && $.fn.resizable && this._makeResizable(), this._isOpen = !1, 
            this._trackFocus();
        },
        _init: function() {
            this.options.autoOpen && this.open();
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            return element && (element.jquery || element.nodeType) ? $(element) : this.document.find(element || "body").eq(0);
        },
        _destroy: function() {
            var next, originalPosition = this.originalPosition;
            this._untrackInstance(), this._destroyOverlay(), this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach(), 
            this.uiDialog.stop(!0, !0).remove(), this.originalTitle && this.element.attr("title", this.originalTitle), 
            next = originalPosition.parent.children().eq(originalPosition.index), // Don't try to place the dialog next to itself (#8613)
            next.length && next[0] !== this.element[0] ? next.before(this.element) : originalPosition.parent.append(this.element);
        },
        widget: function() {
            return this.uiDialog;
        },
        disable: $.noop,
        enable: $.noop,
        close: function(event) {
            var activeElement, that = this;
            if (this._isOpen && this._trigger("beforeClose", event) !== !1) {
                if (this._isOpen = !1, this._focusedElement = null, this._destroyOverlay(), this._untrackInstance(), 
                !this.opener.filter(":focusable").focus().length) // support: IE9
                // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
                try {
                    activeElement = this.document[0].activeElement, // Support: IE9, IE10
                    // If the <body> is blurred, IE will switch windows, see #4520
                    activeElement && "body" !== activeElement.nodeName.toLowerCase() && // Hiding a focused element doesn't trigger blur in WebKit
                    // so in case we have nothing to focus on, explicitly blur the active element
                    // https://bugs.webkit.org/show_bug.cgi?id=47182
                    $(activeElement).blur();
                } catch (error) {}
                this._hide(this.uiDialog, this.options.hide, function() {
                    that._trigger("close", event);
                });
            }
        },
        isOpen: function() {
            return this._isOpen;
        },
        moveToTop: function() {
            this._moveToTop();
        },
        _moveToTop: function(event, silent) {
            var moved = !1, zIndices = this.uiDialog.siblings(".ui-front:visible").map(function() {
                return +$(this).css("z-index");
            }).get(), zIndexMax = Math.max.apply(null, zIndices);
            return zIndexMax >= +this.uiDialog.css("z-index") && (this.uiDialog.css("z-index", zIndexMax + 1), 
            moved = !0), moved && !silent && this._trigger("focus", event), moved;
        },
        open: function() {
            var that = this;
            // Ensure the overlay is moved to the top with the dialog, but only when
            // opening. The overlay shouldn't move after the dialog is open so that
            // modeless dialogs opened after the modal dialog stack properly.
            // Track the dialog immediately upon openening in case a focus event
            // somehow occurs outside of the dialog before an element inside the
            // dialog is focused (#10152)
            return this._isOpen ? void (this._moveToTop() && this._focusTabbable()) : (this._isOpen = !0, 
            this.opener = $(this.document[0].activeElement), this._size(), this._position(), 
            this._createOverlay(), this._moveToTop(null, !0), this.overlay && this.overlay.css("z-index", this.uiDialog.css("z-index") - 1), 
            this._show(this.uiDialog, this.options.show, function() {
                that._focusTabbable(), that._trigger("focus");
            }), this._makeFocusTarget(), void this._trigger("open"));
        },
        _focusTabbable: function() {
            // Set focus to the first match:
            // 1. An element that was focused previously
            // 2. First element inside the dialog matching [autofocus]
            // 3. Tabbable element inside the content element
            // 4. Tabbable element inside the buttonpane
            // 5. The close button
            // 6. The dialog itself
            var hasFocus = this._focusedElement;
            hasFocus || (hasFocus = this.element.find("[autofocus]")), hasFocus.length || (hasFocus = this.element.find(":tabbable")), 
            hasFocus.length || (hasFocus = this.uiDialogButtonPane.find(":tabbable")), hasFocus.length || (hasFocus = this.uiDialogTitlebarClose.filter(":tabbable")), 
            hasFocus.length || (hasFocus = this.uiDialog), hasFocus.eq(0).focus();
        },
        _keepFocus: function(event) {
            function checkFocus() {
                var activeElement = this.document[0].activeElement, isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);
                isActive || this._focusTabbable();
            }
            event.preventDefault(), checkFocus.call(this), // support: IE
            // IE <= 8 doesn't prevent moving focus even with event.preventDefault()
            // so we check again later
            this._delay(checkFocus);
        },
        _createWrapper: function() {
            this.uiDialog = $("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " + this.options.dialogClass).hide().attr({
                // Setting tabIndex makes the div focusable
                tabIndex: -1,
                role: "dialog"
            }).appendTo(this._appendTo()), this._on(this.uiDialog, {
                keydown: function(event) {
                    if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) return event.preventDefault(), 
                    void this.close(event);
                    // prevent tabbing out of dialogs
                    if (event.keyCode === $.ui.keyCode.TAB && !event.isDefaultPrevented()) {
                        var tabbables = this.uiDialog.find(":tabbable"), first = tabbables.filter(":first"), last = tabbables.filter(":last");
                        event.target !== last[0] && event.target !== this.uiDialog[0] || event.shiftKey ? event.target !== first[0] && event.target !== this.uiDialog[0] || !event.shiftKey || (this._delay(function() {
                            last.focus();
                        }), event.preventDefault()) : (this._delay(function() {
                            first.focus();
                        }), event.preventDefault());
                    }
                },
                mousedown: function(event) {
                    this._moveToTop(event) && this._focusTabbable();
                }
            }), // We assume that any existing aria-describedby attribute means
            // that the dialog content is marked up properly
            // otherwise we brute force the content as the description
            this.element.find("[aria-describedby]").length || this.uiDialog.attr({
                "aria-describedby": this.element.uniqueId().attr("id")
            });
        },
        _createTitlebar: function() {
            var uiDialogTitle;
            this.uiDialogTitlebar = $("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog), 
            this._on(this.uiDialogTitlebar, {
                mousedown: function(event) {
                    // Don't prevent click on close button (#8838)
                    // Focusing a dialog that is partially scrolled out of view
                    // causes the browser to scroll it into view, preventing the click event
                    $(event.target).closest(".ui-dialog-titlebar-close") || // Dialog isn't getting focus when dragging (#8063)
                    this.uiDialog.focus();
                }
            }), // support: IE
            // Use type="button" to prevent enter keypresses in textboxes from closing the
            // dialog in IE (#9312)
            this.uiDialogTitlebarClose = $("<button type='button'></button>").button({
                label: this.options.closeText,
                icons: {
                    primary: "ui-icon-closethick"
                },
                text: !1
            }).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar), this._on(this.uiDialogTitlebarClose, {
                click: function(event) {
                    event.preventDefault(), this.close(event);
                }
            }), uiDialogTitle = $("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar), 
            this._title(uiDialogTitle), this.uiDialog.attr({
                "aria-labelledby": uiDialogTitle.attr("id")
            });
        },
        _title: function(title) {
            this.options.title || title.html("&#160;"), title.text(this.options.title);
        },
        _createButtonPane: function() {
            this.uiDialogButtonPane = $("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"), 
            this.uiButtonSet = $("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane), 
            this._createButtons();
        },
        _createButtons: function() {
            var that = this, buttons = this.options.buttons;
            // if we already have a button pane, remove it
            return this.uiDialogButtonPane.remove(), this.uiButtonSet.empty(), $.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length ? void this.uiDialog.removeClass("ui-dialog-buttons") : ($.each(buttons, function(name, props) {
                var click, buttonOptions;
                props = $.isFunction(props) ? {
                    click: props,
                    text: name
                } : props, // Default to a non-submitting button
                props = $.extend({
                    type: "button"
                }, props), // Change the context for the click callback to be the main element
                click = props.click, props.click = function() {
                    click.apply(that.element[0], arguments);
                }, buttonOptions = {
                    icons: props.icons,
                    text: props.showText
                }, delete props.icons, delete props.showText, $("<button></button>", props).button(buttonOptions).appendTo(that.uiButtonSet);
            }), this.uiDialog.addClass("ui-dialog-buttons"), void this.uiDialogButtonPane.appendTo(this.uiDialog));
        },
        _makeDraggable: function() {
            function filteredUi(ui) {
                return {
                    position: ui.position,
                    offset: ui.offset
                };
            }
            var that = this, options = this.options;
            this.uiDialog.draggable({
                cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
                handle: ".ui-dialog-titlebar",
                containment: "document",
                start: function(event, ui) {
                    $(this).addClass("ui-dialog-dragging"), that._blockFrames(), that._trigger("dragStart", event, filteredUi(ui));
                },
                drag: function(event, ui) {
                    that._trigger("drag", event, filteredUi(ui));
                },
                stop: function(event, ui) {
                    var left = ui.offset.left - that.document.scrollLeft(), top = ui.offset.top - that.document.scrollTop();
                    options.position = {
                        my: "left top",
                        at: "left" + (left >= 0 ? "+" : "") + left + " top" + (top >= 0 ? "+" : "") + top,
                        of: that.window
                    }, $(this).removeClass("ui-dialog-dragging"), that._unblockFrames(), that._trigger("dragStop", event, filteredUi(ui));
                }
            });
        },
        _makeResizable: function() {
            function filteredUi(ui) {
                return {
                    originalPosition: ui.originalPosition,
                    originalSize: ui.originalSize,
                    position: ui.position,
                    size: ui.size
                };
            }
            var that = this, options = this.options, handles = options.resizable, // .ui-resizable has position: relative defined in the stylesheet
            // but dialogs have to use absolute or fixed positioning
            position = this.uiDialog.css("position"), resizeHandles = "string" == typeof handles ? handles : "n,e,s,w,se,sw,ne,nw";
            this.uiDialog.resizable({
                cancel: ".ui-dialog-content",
                containment: "document",
                alsoResize: this.element,
                maxWidth: options.maxWidth,
                maxHeight: options.maxHeight,
                minWidth: options.minWidth,
                minHeight: this._minHeight(),
                handles: resizeHandles,
                start: function(event, ui) {
                    $(this).addClass("ui-dialog-resizing"), that._blockFrames(), that._trigger("resizeStart", event, filteredUi(ui));
                },
                resize: function(event, ui) {
                    that._trigger("resize", event, filteredUi(ui));
                },
                stop: function(event, ui) {
                    var offset = that.uiDialog.offset(), left = offset.left - that.document.scrollLeft(), top = offset.top - that.document.scrollTop();
                    options.height = that.uiDialog.height(), options.width = that.uiDialog.width(), 
                    options.position = {
                        my: "left top",
                        at: "left" + (left >= 0 ? "+" : "") + left + " top" + (top >= 0 ? "+" : "") + top,
                        of: that.window
                    }, $(this).removeClass("ui-dialog-resizing"), that._unblockFrames(), that._trigger("resizeStop", event, filteredUi(ui));
                }
            }).css("position", position);
        },
        _trackFocus: function() {
            this._on(this.widget(), {
                focusin: function(event) {
                    this._makeFocusTarget(), this._focusedElement = $(event.target);
                }
            });
        },
        _makeFocusTarget: function() {
            this._untrackInstance(), this._trackingInstances().unshift(this);
        },
        _untrackInstance: function() {
            var instances = this._trackingInstances(), exists = $.inArray(this, instances);
            -1 !== exists && instances.splice(exists, 1);
        },
        _trackingInstances: function() {
            var instances = this.document.data("ui-dialog-instances");
            return instances || (instances = [], this.document.data("ui-dialog-instances", instances)), 
            instances;
        },
        _minHeight: function() {
            var options = this.options;
            return "auto" === options.height ? options.minHeight : Math.min(options.minHeight, options.height);
        },
        _position: function() {
            // Need to show the dialog to get the actual offset in the position plugin
            var isVisible = this.uiDialog.is(":visible");
            isVisible || this.uiDialog.show(), this.uiDialog.position(this.options.position), 
            isVisible || this.uiDialog.hide();
        },
        _setOptions: function(options) {
            var that = this, resize = !1, resizableOptions = {};
            $.each(options, function(key, value) {
                that._setOption(key, value), key in that.sizeRelatedOptions && (resize = !0), key in that.resizableRelatedOptions && (resizableOptions[key] = value);
            }), resize && (this._size(), this._position()), this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", resizableOptions);
        },
        _setOption: function(key, value) {
            var isDraggable, isResizable, uiDialog = this.uiDialog;
            "dialogClass" === key && uiDialog.removeClass(this.options.dialogClass).addClass(value), 
            "disabled" !== key && (this._super(key, value), "appendTo" === key && this.uiDialog.appendTo(this._appendTo()), 
            "buttons" === key && this._createButtons(), "closeText" === key && this.uiDialogTitlebarClose.button({
                // Ensure that we always pass a string
                label: "" + value
            }), "draggable" === key && (isDraggable = uiDialog.is(":data(ui-draggable)"), isDraggable && !value && uiDialog.draggable("destroy"), 
            !isDraggable && value && this._makeDraggable()), "position" === key && this._position(), 
            "resizable" === key && (// currently resizable, becoming non-resizable
            isResizable = uiDialog.is(":data(ui-resizable)"), isResizable && !value && uiDialog.resizable("destroy"), 
            // currently resizable, changing handles
            isResizable && "string" == typeof value && uiDialog.resizable("option", "handles", value), 
            // currently non-resizable, becoming resizable
            isResizable || value === !1 || this._makeResizable()), "title" === key && this._title(this.uiDialogTitlebar.find(".ui-dialog-title")));
        },
        _size: function() {
            // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
            // divs will both have width and height set, so we need to reset them
            var nonContentHeight, minContentHeight, maxContentHeight, options = this.options;
            // Reset content sizing
            this.element.show().css({
                width: "auto",
                minHeight: 0,
                maxHeight: "none",
                height: 0
            }), options.minWidth > options.width && (options.width = options.minWidth), // reset wrapper sizing
            // determine the height of all the non-content elements
            nonContentHeight = this.uiDialog.css({
                height: "auto",
                width: options.width
            }).outerHeight(), minContentHeight = Math.max(0, options.minHeight - nonContentHeight), 
            maxContentHeight = "number" == typeof options.maxHeight ? Math.max(0, options.maxHeight - nonContentHeight) : "none", 
            "auto" === options.height ? this.element.css({
                minHeight: minContentHeight,
                maxHeight: maxContentHeight,
                height: "auto"
            }) : this.element.height(Math.max(0, options.height - nonContentHeight)), this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight());
        },
        _blockFrames: function() {
            this.iframeBlocks = this.document.find("iframe").map(function() {
                var iframe = $(this);
                return $("<div>").css({
                    position: "absolute",
                    width: iframe.outerWidth(),
                    height: iframe.outerHeight()
                }).appendTo(iframe.parent()).offset(iframe.offset())[0];
            });
        },
        _unblockFrames: function() {
            this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks);
        },
        _allowInteraction: function(event) {
            return $(event.target).closest(".ui-dialog").length ? !0 : !!$(event.target).closest(".ui-datepicker").length;
        },
        _createOverlay: function() {
            if (this.options.modal) {
                // We use a delay in case the overlay is created from an
                // event that we're going to be cancelling (#2804)
                var isOpening = !0;
                this._delay(function() {
                    isOpening = !1;
                }), this.document.data("ui-dialog-overlays") || // Prevent use of anchors and inputs
                // Using _on() for an event handler shared across many instances is
                // safe because the dialogs stack and must be closed in reverse order
                this._on(this.document, {
                    focusin: function(event) {
                        isOpening || this._allowInteraction(event) || (event.preventDefault(), this._trackingInstances()[0]._focusTabbable());
                    }
                }), this.overlay = $("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo()), 
                this._on(this.overlay, {
                    mousedown: "_keepFocus"
                }), this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1);
            }
        },
        _destroyOverlay: function() {
            if (this.options.modal && this.overlay) {
                var overlays = this.document.data("ui-dialog-overlays") - 1;
                overlays ? this.document.data("ui-dialog-overlays", overlays) : this.document.unbind("focusin").removeData("ui-dialog-overlays"), 
                this.overlay.remove(), this.overlay = null;
            }
        }
    });
    /*!
 * jQuery UI Droppable 1.11.4
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/droppable/
 */
    $.widget("ui.droppable", {
        version: "1.11.4",
        widgetEventPrefix: "drop",
        options: {
            accept: "*",
            activeClass: !1,
            addClasses: !0,
            greedy: !1,
            hoverClass: !1,
            scope: "default",
            tolerance: "intersect",
            // callbacks
            activate: null,
            deactivate: null,
            drop: null,
            out: null,
            over: null
        },
        _create: function() {
            var proportions, o = this.options, accept = o.accept;
            this.isover = !1, this.isout = !0, this.accept = $.isFunction(accept) ? accept : function(d) {
                return d.is(accept);
            }, this.proportions = function() {
                // Store the droppable's proportions
                return arguments.length ? void (proportions = arguments[0]) : proportions ? proportions : proportions = {
                    width: this.element[0].offsetWidth,
                    height: this.element[0].offsetHeight
                };
            }, this._addToManager(o.scope), o.addClasses && this.element.addClass("ui-droppable");
        },
        _addToManager: function(scope) {
            // Add the reference and positions to the manager
            $.ui.ddmanager.droppables[scope] = $.ui.ddmanager.droppables[scope] || [], $.ui.ddmanager.droppables[scope].push(this);
        },
        _splice: function(drop) {
            for (var i = 0; i < drop.length; i++) drop[i] === this && drop.splice(i, 1);
        },
        _destroy: function() {
            var drop = $.ui.ddmanager.droppables[this.options.scope];
            this._splice(drop), this.element.removeClass("ui-droppable ui-droppable-disabled");
        },
        _setOption: function(key, value) {
            if ("accept" === key) this.accept = $.isFunction(value) ? value : function(d) {
                return d.is(value);
            }; else if ("scope" === key) {
                var drop = $.ui.ddmanager.droppables[this.options.scope];
                this._splice(drop), this._addToManager(value);
            }
            this._super(key, value);
        },
        _activate: function(event) {
            var draggable = $.ui.ddmanager.current;
            this.options.activeClass && this.element.addClass(this.options.activeClass), draggable && this._trigger("activate", event, this.ui(draggable));
        },
        _deactivate: function(event) {
            var draggable = $.ui.ddmanager.current;
            this.options.activeClass && this.element.removeClass(this.options.activeClass), 
            draggable && this._trigger("deactivate", event, this.ui(draggable));
        },
        _over: function(event) {
            var draggable = $.ui.ddmanager.current;
            // Bail if draggable and droppable are same element
            draggable && (draggable.currentItem || draggable.element)[0] !== this.element[0] && this.accept.call(this.element[0], draggable.currentItem || draggable.element) && (this.options.hoverClass && this.element.addClass(this.options.hoverClass), 
            this._trigger("over", event, this.ui(draggable)));
        },
        _out: function(event) {
            var draggable = $.ui.ddmanager.current;
            // Bail if draggable and droppable are same element
            draggable && (draggable.currentItem || draggable.element)[0] !== this.element[0] && this.accept.call(this.element[0], draggable.currentItem || draggable.element) && (this.options.hoverClass && this.element.removeClass(this.options.hoverClass), 
            this._trigger("out", event, this.ui(draggable)));
        },
        _drop: function(event, custom) {
            var draggable = custom || $.ui.ddmanager.current, childrenIntersection = !1;
            // Bail if draggable and droppable are same element
            // Bail if draggable and droppable are same element
            return draggable && (draggable.currentItem || draggable.element)[0] !== this.element[0] ? (this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
                var inst = $(this).droppable("instance");
                return inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], draggable.currentItem || draggable.element) && $.ui.intersect(draggable, $.extend(inst, {
                    offset: inst.element.offset()
                }), inst.options.tolerance, event) ? (childrenIntersection = !0, !1) : void 0;
            }), childrenIntersection ? !1 : this.accept.call(this.element[0], draggable.currentItem || draggable.element) ? (this.options.activeClass && this.element.removeClass(this.options.activeClass), 
            this.options.hoverClass && this.element.removeClass(this.options.hoverClass), this._trigger("drop", event, this.ui(draggable)), 
            this.element) : !1) : !1;
        },
        ui: function(c) {
            return {
                draggable: c.currentItem || c.element,
                helper: c.helper,
                position: c.position,
                offset: c.positionAbs
            };
        }
    }), $.ui.intersect = function() {
        function isOverAxis(x, reference, size) {
            return x >= reference && reference + size > x;
        }
        return function(draggable, droppable, toleranceMode, event) {
            if (!droppable.offset) return !1;
            var x1 = (draggable.positionAbs || draggable.position.absolute).left + draggable.margins.left, y1 = (draggable.positionAbs || draggable.position.absolute).top + draggable.margins.top, x2 = x1 + draggable.helperProportions.width, y2 = y1 + draggable.helperProportions.height, l = droppable.offset.left, t = droppable.offset.top, r = l + droppable.proportions().width, b = t + droppable.proportions().height;
            switch (toleranceMode) {
              case "fit":
                return x1 >= l && r >= x2 && y1 >= t && b >= y2;

              case "intersect":
                // Right Half
                // Left Half
                // Bottom Half
                return l < x1 + draggable.helperProportions.width / 2 && x2 - draggable.helperProportions.width / 2 < r && t < y1 + draggable.helperProportions.height / 2 && y2 - draggable.helperProportions.height / 2 < b;

              // Top Half
                case "pointer":
                return isOverAxis(event.pageY, t, droppable.proportions().height) && isOverAxis(event.pageX, l, droppable.proportions().width);

              case "touch":
                // Top edge touching
                // Bottom edge touching
                // Left edge touching
                // Right edge touching
                return (y1 >= t && b >= y1 || y2 >= t && b >= y2 || t > y1 && y2 > b) && (x1 >= l && r >= x1 || x2 >= l && r >= x2 || l > x1 && x2 > r);

              default:
                return !1;
            }
        };
    }(), /*
	This manager tracks offsets of draggables and droppables
*/
    $.ui.ddmanager = {
        current: null,
        droppables: {
            "default": []
        },
        prepareOffsets: function(t, event) {
            var i, j, m = $.ui.ddmanager.droppables[t.options.scope] || [], type = event ? event.type : null, // workaround for #2317
            list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();
            droppablesLoop: for (i = 0; i < m.length; i++) // No disabled and non-accepted
            if (!(m[i].options.disabled || t && !m[i].accept.call(m[i].element[0], t.currentItem || t.element))) {
                // Filter out elements in the current dragged item
                for (j = 0; j < list.length; j++) if (list[j] === m[i].element[0]) {
                    m[i].proportions().height = 0;
                    continue droppablesLoop;
                }
                m[i].visible = "none" !== m[i].element.css("display"), m[i].visible && (// Activate the droppable if used directly from draggables
                "mousedown" === type && m[i]._activate.call(m[i], event), m[i].offset = m[i].element.offset(), 
                m[i].proportions({
                    width: m[i].element[0].offsetWidth,
                    height: m[i].element[0].offsetHeight
                }));
            }
        },
        drop: function(draggable, event) {
            var dropped = !1;
            // Create a copy of the droppables in case the list changes during the drop (#9116)
            return $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {
                this.options && (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance, event) && (dropped = this._drop.call(this, event) || dropped), 
                !this.options.disabled && this.visible && this.accept.call(this.element[0], draggable.currentItem || draggable.element) && (this.isout = !0, 
                this.isover = !1, this._deactivate.call(this, event)));
            }), dropped;
        },
        dragStart: function(draggable, event) {
            // Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
            draggable.element.parentsUntil("body").bind("scroll.droppable", function() {
                draggable.options.refreshPositions || $.ui.ddmanager.prepareOffsets(draggable, event);
            });
        },
        drag: function(draggable, event) {
            // If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
            draggable.options.refreshPositions && $.ui.ddmanager.prepareOffsets(draggable, event), 
            // Run through all droppables and check their positions based on specific tolerance options
            $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {
                if (!this.options.disabled && !this.greedyChild && this.visible) {
                    var parentInstance, scope, parent, intersects = $.ui.intersect(draggable, this, this.options.tolerance, event), c = !intersects && this.isover ? "isout" : intersects && !this.isover ? "isover" : null;
                    c && (this.options.greedy && (// find droppable parents with same scope
                    scope = this.options.scope, parent = this.element.parents(":data(ui-droppable)").filter(function() {
                        return $(this).droppable("instance").options.scope === scope;
                    }), parent.length && (parentInstance = $(parent[0]).droppable("instance"), parentInstance.greedyChild = "isover" === c)), 
                    // we just moved into a greedy child
                    parentInstance && "isover" === c && (parentInstance.isover = !1, parentInstance.isout = !0, 
                    parentInstance._out.call(parentInstance, event)), this[c] = !0, this["isout" === c ? "isover" : "isout"] = !1, 
                    this["isover" === c ? "_over" : "_out"].call(this, event), // we just moved out of a greedy child
                    parentInstance && "isout" === c && (parentInstance.isout = !1, parentInstance.isover = !0, 
                    parentInstance._over.call(parentInstance, event)));
                }
            });
        },
        dragStop: function(draggable, event) {
            draggable.element.parentsUntil("body").unbind("scroll.droppable"), // Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
            draggable.options.refreshPositions || $.ui.ddmanager.prepareOffsets(draggable, event);
        }
    };
    var dataSpace = ($.ui.droppable, "ui-effects-"), // Create a local jQuery because jQuery Color relies on it and the
    // global may not exist with AMD and a custom build (#10199)
    jQuery = $;
    $.effects = {
        effect: {}
    }, /*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */
    function(jQuery, undefined) {
        function clamp(value, prop, allowEmpty) {
            var type = propTypes[prop.type] || {};
            // ~~ is an short way of doing floor for positive numbers
            // IE will pass in empty strings as value for alpha,
            // which will hit this case
            return null == value ? allowEmpty || !prop.def ? null : prop.def : (value = type.floor ? ~~value : parseFloat(value), 
            isNaN(value) ? prop.def : type.mod ? (value + type.mod) % type.mod : 0 > value ? 0 : type.max < value ? type.max : value);
        }
        function stringParse(string) {
            var inst = color(), rgba = inst._rgba = [];
            // Found a stringParser that handled it
            // Found a stringParser that handled it
            // if this came from a parsed string, force "transparent" when alpha is 0
            // chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
            return string = string.toLowerCase(), each(stringParsers, function(i, parser) {
                var parsed, match = parser.re.exec(string), values = match && parser.parse(match), spaceName = parser.space || "rgba";
                // if this was an rgba parse the assignment might happen twice
                // oh well....
                return values ? (parsed = inst[spaceName](values), inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache], 
                rgba = inst._rgba = parsed._rgba, !1) : void 0;
            }), rgba.length ? ("0,0,0,0" === rgba.join() && jQuery.extend(rgba, colors.transparent), 
            inst) : colors[string];
        }
        // hsla conversions adapted from:
        // https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021
        function hue2rgb(p, q, h) {
            return h = (h + 1) % 1, 1 > 6 * h ? p + (q - p) * h * 6 : 1 > 2 * h ? q : 2 > 3 * h ? p + (q - p) * (2 / 3 - h) * 6 : p;
        }
        var // colors = jQuery.Color.names
        colors, stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor", // plusequals test for += 100 -= 100
        rplusequals = /^([\-+])=\s*(\d+\.?\d*)/, // a set of RE's that can match strings and generate color tuples.
        stringParsers = [ {
            re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            parse: function(execResult) {
                return [ execResult[1], execResult[2], execResult[3], execResult[4] ];
            }
        }, {
            re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            parse: function(execResult) {
                return [ 2.55 * execResult[1], 2.55 * execResult[2], 2.55 * execResult[3], execResult[4] ];
            }
        }, {
            // this regex ignores A-F because it's compared against an already lowercased string
            re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
            parse: function(execResult) {
                return [ parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16) ];
            }
        }, {
            // this regex ignores A-F because it's compared against an already lowercased string
            re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
            parse: function(execResult) {
                return [ parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16) ];
            }
        }, {
            re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            space: "hsla",
            parse: function(execResult) {
                return [ execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4] ];
            }
        } ], // jQuery.Color( )
        color = jQuery.Color = function(color, green, blue, alpha) {
            return new jQuery.Color.fn.parse(color, green, blue, alpha);
        }, spaces = {
            rgba: {
                props: {
                    red: {
                        idx: 0,
                        type: "byte"
                    },
                    green: {
                        idx: 1,
                        type: "byte"
                    },
                    blue: {
                        idx: 2,
                        type: "byte"
                    }
                }
            },
            hsla: {
                props: {
                    hue: {
                        idx: 0,
                        type: "degrees"
                    },
                    saturation: {
                        idx: 1,
                        type: "percent"
                    },
                    lightness: {
                        idx: 2,
                        type: "percent"
                    }
                }
            }
        }, propTypes = {
            "byte": {
                floor: !0,
                max: 255
            },
            percent: {
                max: 1
            },
            degrees: {
                mod: 360,
                floor: !0
            }
        }, support = color.support = {}, // element for support tests
        supportElem = jQuery("<p>")[0], // local aliases of functions called often
        each = jQuery.each;
        // determine rgba support immediately
        supportElem.style.cssText = "background-color:rgba(1,1,1,.5)", support.rgba = supportElem.style.backgroundColor.indexOf("rgba") > -1, 
        // define cache name and alpha properties
        // for rgba and hsla spaces
        each(spaces, function(spaceName, space) {
            space.cache = "_" + spaceName, space.props.alpha = {
                idx: 3,
                type: "percent",
                def: 1
            };
        }), color.fn = jQuery.extend(color.prototype, {
            parse: function(red, green, blue, alpha) {
                if (red === undefined) return this._rgba = [ null, null, null, null ], this;
                (red.jquery || red.nodeType) && (red = jQuery(red).css(green), green = undefined);
                var inst = this, type = jQuery.type(red), rgba = this._rgba = [];
                // more than 1 argument specified - assume ( red, green, blue, alpha )
                return green !== undefined && (red = [ red, green, blue, alpha ], type = "array"), 
                "string" === type ? this.parse(stringParse(red) || colors._default) : "array" === type ? (each(spaces.rgba.props, function(key, prop) {
                    rgba[prop.idx] = clamp(red[prop.idx], prop);
                }), this) : "object" === type ? (red instanceof color ? each(spaces, function(spaceName, space) {
                    red[space.cache] && (inst[space.cache] = red[space.cache].slice());
                }) : each(spaces, function(spaceName, space) {
                    var cache = space.cache;
                    each(space.props, function(key, prop) {
                        // if the cache doesn't exist, and we know how to convert
                        if (!inst[cache] && space.to) {
                            // if the value was null, we don't need to copy it
                            // if the key was alpha, we don't need to copy it either
                            if ("alpha" === key || null == red[key]) return;
                            inst[cache] = space.to(inst._rgba);
                        }
                        // this is the only case where we allow nulls for ALL properties.
                        // call clamp with alwaysAllowEmpty
                        inst[cache][prop.idx] = clamp(red[key], prop, !0);
                    }), // everything defined but alpha?
                    inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0 && (// use the default of 1
                    inst[cache][3] = 1, space.from && (inst._rgba = space.from(inst[cache])));
                }), this) : void 0;
            },
            is: function(compare) {
                var is = color(compare), same = !0, inst = this;
                return each(spaces, function(_, space) {
                    var localCache, isCache = is[space.cache];
                    return isCache && (localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [], 
                    each(space.props, function(_, prop) {
                        return null != isCache[prop.idx] ? same = isCache[prop.idx] === localCache[prop.idx] : void 0;
                    })), same;
                }), same;
            },
            _space: function() {
                var used = [], inst = this;
                return each(spaces, function(spaceName, space) {
                    inst[space.cache] && used.push(spaceName);
                }), used.pop();
            },
            transition: function(other, distance) {
                var end = color(other), spaceName = end._space(), space = spaces[spaceName], startColor = 0 === this.alpha() ? color("transparent") : this, start = startColor[space.cache] || space.to(startColor._rgba), result = start.slice();
                return end = end[space.cache], each(space.props, function(key, prop) {
                    var index = prop.idx, startValue = start[index], endValue = end[index], type = propTypes[prop.type] || {};
                    // if null, don't override start value
                    null !== endValue && (// if null - use end
                    null === startValue ? result[index] = endValue : (type.mod && (endValue - startValue > type.mod / 2 ? startValue += type.mod : startValue - endValue > type.mod / 2 && (startValue -= type.mod)), 
                    result[index] = clamp((endValue - startValue) * distance + startValue, prop)));
                }), this[spaceName](result);
            },
            blend: function(opaque) {
                // if we are already opaque - return ourself
                if (1 === this._rgba[3]) return this;
                var rgb = this._rgba.slice(), a = rgb.pop(), blend = color(opaque)._rgba;
                return color(jQuery.map(rgb, function(v, i) {
                    return (1 - a) * blend[i] + a * v;
                }));
            },
            toRgbaString: function() {
                var prefix = "rgba(", rgba = jQuery.map(this._rgba, function(v, i) {
                    return null == v ? i > 2 ? 1 : 0 : v;
                });
                return 1 === rgba[3] && (rgba.pop(), prefix = "rgb("), prefix + rgba.join() + ")";
            },
            toHslaString: function() {
                var prefix = "hsla(", hsla = jQuery.map(this.hsla(), function(v, i) {
                    // catch 1 and 2
                    return null == v && (v = i > 2 ? 1 : 0), i && 3 > i && (v = Math.round(100 * v) + "%"), 
                    v;
                });
                return 1 === hsla[3] && (hsla.pop(), prefix = "hsl("), prefix + hsla.join() + ")";
            },
            toHexString: function(includeAlpha) {
                var rgba = this._rgba.slice(), alpha = rgba.pop();
                return includeAlpha && rgba.push(~~(255 * alpha)), "#" + jQuery.map(rgba, function(v) {
                    // default to 0 when nulls exist
                    return v = (v || 0).toString(16), 1 === v.length ? "0" + v : v;
                }).join("");
            },
            toString: function() {
                return 0 === this._rgba[3] ? "transparent" : this.toRgbaString();
            }
        }), color.fn.parse.prototype = color.fn, spaces.hsla.to = function(rgba) {
            if (null == rgba[0] || null == rgba[1] || null == rgba[2]) return [ null, null, null, rgba[3] ];
            var h, s, r = rgba[0] / 255, g = rgba[1] / 255, b = rgba[2] / 255, a = rgba[3], max = Math.max(r, g, b), min = Math.min(r, g, b), diff = max - min, add = max + min, l = .5 * add;
            // chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
            // otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
            return h = min === max ? 0 : r === max ? 60 * (g - b) / diff + 360 : g === max ? 60 * (b - r) / diff + 120 : 60 * (r - g) / diff + 240, 
            s = 0 === diff ? 0 : .5 >= l ? diff / add : diff / (2 - add), [ Math.round(h) % 360, s, l, null == a ? 1 : a ];
        }, spaces.hsla.from = function(hsla) {
            if (null == hsla[0] || null == hsla[1] || null == hsla[2]) return [ null, null, null, hsla[3] ];
            var h = hsla[0] / 360, s = hsla[1], l = hsla[2], a = hsla[3], q = .5 >= l ? l * (1 + s) : l + s - l * s, p = 2 * l - q;
            return [ Math.round(255 * hue2rgb(p, q, h + 1 / 3)), Math.round(255 * hue2rgb(p, q, h)), Math.round(255 * hue2rgb(p, q, h - 1 / 3)), a ];
        }, each(spaces, function(spaceName, space) {
            var props = space.props, cache = space.cache, to = space.to, from = space.from;
            // makes rgba() and hsla()
            color.fn[spaceName] = function(value) {
                if (// generate a cache for this space if it doesn't exist
                to && !this[cache] && (this[cache] = to(this._rgba)), value === undefined) return this[cache].slice();
                var ret, type = jQuery.type(value), arr = "array" === type || "object" === type ? value : arguments, local = this[cache].slice();
                return each(props, function(key, prop) {
                    var val = arr["object" === type ? key : prop.idx];
                    null == val && (val = local[prop.idx]), local[prop.idx] = clamp(val, prop);
                }), from ? (ret = color(from(local)), ret[cache] = local, ret) : color(local);
            }, // makes red() green() blue() alpha() hue() saturation() lightness()
            each(props, function(key, prop) {
                // alpha is included in more than one space
                color.fn[key] || (color.fn[key] = function(value) {
                    var match, vtype = jQuery.type(value), fn = "alpha" === key ? this._hsla ? "hsla" : "rgba" : spaceName, local = this[fn](), cur = local[prop.idx];
                    return "undefined" === vtype ? cur : ("function" === vtype && (value = value.call(this, cur), 
                    vtype = jQuery.type(value)), null == value && prop.empty ? this : ("string" === vtype && (match = rplusequals.exec(value), 
                    match && (value = cur + parseFloat(match[2]) * ("+" === match[1] ? 1 : -1))), local[prop.idx] = value, 
                    this[fn](local)));
                });
            });
        }), // add cssHook and .fx.step function for each named hook.
        // accept a space separated string of properties
        color.hook = function(hook) {
            var hooks = hook.split(" ");
            each(hooks, function(i, hook) {
                jQuery.cssHooks[hook] = {
                    set: function(elem, value) {
                        var parsed, curElem, backgroundColor = "";
                        if ("transparent" !== value && ("string" !== jQuery.type(value) || (parsed = stringParse(value)))) {
                            if (value = color(parsed || value), !support.rgba && 1 !== value._rgba[3]) {
                                for (curElem = "backgroundColor" === hook ? elem.parentNode : elem; ("" === backgroundColor || "transparent" === backgroundColor) && curElem && curElem.style; ) try {
                                    backgroundColor = jQuery.css(curElem, "backgroundColor"), curElem = curElem.parentNode;
                                } catch (e) {}
                                value = value.blend(backgroundColor && "transparent" !== backgroundColor ? backgroundColor : "_default");
                            }
                            value = value.toRgbaString();
                        }
                        try {
                            elem.style[hook] = value;
                        } catch (e) {}
                    }
                }, jQuery.fx.step[hook] = function(fx) {
                    fx.colorInit || (fx.start = color(fx.elem, hook), fx.end = color(fx.end), fx.colorInit = !0), 
                    jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));
                };
            });
        }, color.hook(stepHooks), jQuery.cssHooks.borderColor = {
            expand: function(value) {
                var expanded = {};
                return each([ "Top", "Right", "Bottom", "Left" ], function(i, part) {
                    expanded["border" + part + "Color"] = value;
                }), expanded;
            }
        }, // Basic color names only.
        // Usage of any of the other color names requires adding yourself or including
        // jquery.color.svg-names.js.
        colors = jQuery.Color.names = {
            // 4.1. Basic color keywords
            aqua: "#00ffff",
            black: "#000000",
            blue: "#0000ff",
            fuchsia: "#ff00ff",
            gray: "#808080",
            green: "#008000",
            lime: "#00ff00",
            maroon: "#800000",
            navy: "#000080",
            olive: "#808000",
            purple: "#800080",
            red: "#ff0000",
            silver: "#c0c0c0",
            teal: "#008080",
            white: "#ffffff",
            yellow: "#ffff00",
            // 4.2.3. "transparent" color keyword
            transparent: [ null, null, null, 0 ],
            _default: "#ffffff"
        };
    }(jQuery), /******************************************************************************/
    /****************************** CLASS ANIMATIONS ******************************/
    /******************************************************************************/
    function() {
        function getElementStyles(elem) {
            var key, len, style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle, styles = {};
            if (style && style.length && style[0] && style[style[0]]) for (len = style.length; len--; ) key = style[len], 
            "string" == typeof style[key] && (styles[$.camelCase(key)] = style[key]); else for (key in style) "string" == typeof style[key] && (styles[key] = style[key]);
            return styles;
        }
        function styleDifference(oldStyle, newStyle) {
            var name, value, diff = {};
            for (name in newStyle) value = newStyle[name], oldStyle[name] !== value && (shorthandStyles[name] || ($.fx.step[name] || !isNaN(parseFloat(value))) && (diff[name] = value));
            return diff;
        }
        var classAnimationActions = [ "add", "remove", "toggle" ], shorthandStyles = {
            border: 1,
            borderBottom: 1,
            borderColor: 1,
            borderLeft: 1,
            borderRight: 1,
            borderTop: 1,
            borderWidth: 1,
            margin: 1,
            padding: 1
        };
        $.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function(_, prop) {
            $.fx.step[prop] = function(fx) {
                ("none" !== fx.end && !fx.setAttr || 1 === fx.pos && !fx.setAttr) && (jQuery.style(fx.elem, prop, fx.end), 
                fx.setAttr = !0);
            };
        }), // support: jQuery <1.8
        $.fn.addBack || ($.fn.addBack = function(selector) {
            return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
        }), $.effects.animateClass = function(value, duration, easing, callback) {
            var o = $.speed(duration, easing, callback);
            return this.queue(function() {
                var applyClassChange, animated = $(this), baseClass = animated.attr("class") || "", allAnimations = o.children ? animated.find("*").addBack() : animated;
                // map the animated objects to store the original styles.
                allAnimations = allAnimations.map(function() {
                    var el = $(this);
                    return {
                        el: el,
                        start: getElementStyles(this)
                    };
                }), // apply class change
                applyClassChange = function() {
                    $.each(classAnimationActions, function(i, action) {
                        value[action] && animated[action + "Class"](value[action]);
                    });
                }, applyClassChange(), // map all animated objects again - calculate new styles and diff
                allAnimations = allAnimations.map(function() {
                    return this.end = getElementStyles(this.el[0]), this.diff = styleDifference(this.start, this.end), 
                    this;
                }), // apply original class
                animated.attr("class", baseClass), // map all animated objects again - this time collecting a promise
                allAnimations = allAnimations.map(function() {
                    var styleInfo = this, dfd = $.Deferred(), opts = $.extend({}, o, {
                        queue: !1,
                        complete: function() {
                            dfd.resolve(styleInfo);
                        }
                    });
                    return this.el.animate(this.diff, opts), dfd.promise();
                }), // once all animations have completed:
                $.when.apply($, allAnimations.get()).done(function() {
                    // set the final class
                    applyClassChange(), // for each animated element,
                    // clear all css properties that were animated
                    $.each(arguments, function() {
                        var el = this.el;
                        $.each(this.diff, function(key) {
                            el.css(key, "");
                        });
                    }), // this is guarnteed to be there if you use jQuery.speed()
                    // it also handles dequeuing the next anim...
                    o.complete.call(animated[0]);
                });
            });
        }, $.fn.extend({
            addClass: function(orig) {
                return function(classNames, speed, easing, callback) {
                    return speed ? $.effects.animateClass.call(this, {
                        add: classNames
                    }, speed, easing, callback) : orig.apply(this, arguments);
                };
            }($.fn.addClass),
            removeClass: function(orig) {
                return function(classNames, speed, easing, callback) {
                    return arguments.length > 1 ? $.effects.animateClass.call(this, {
                        remove: classNames
                    }, speed, easing, callback) : orig.apply(this, arguments);
                };
            }($.fn.removeClass),
            toggleClass: function(orig) {
                return function(classNames, force, speed, easing, callback) {
                    return "boolean" == typeof force || void 0 === force ? speed ? $.effects.animateClass.call(this, force ? {
                        add: classNames
                    } : {
                        remove: classNames
                    }, speed, easing, callback) : orig.apply(this, arguments) : $.effects.animateClass.call(this, {
                        toggle: classNames
                    }, force, speed, easing);
                };
            }($.fn.toggleClass),
            switchClass: function(remove, add, speed, easing, callback) {
                return $.effects.animateClass.call(this, {
                    add: add,
                    remove: remove
                }, speed, easing, callback);
            }
        });
    }(), /******************************************************************************/
    /*********************************** EFFECTS **********************************/
    /******************************************************************************/
    function() {
        // return an effect options object for the given parameters:
        function _normalizeArguments(effect, options, speed, callback) {
            // allow passing all options as the first parameter
            // convert to an object
            // catch (effect, null, ...)
            // catch (effect, callback)
            // catch (effect, speed, ?)
            // catch (effect, options, callback)
            // add options to effect
            return $.isPlainObject(effect) && (options = effect, effect = effect.effect), effect = {
                effect: effect
            }, null == options && (options = {}), $.isFunction(options) && (callback = options, 
            speed = null, options = {}), ("number" == typeof options || $.fx.speeds[options]) && (callback = speed, 
            speed = options, options = {}), $.isFunction(speed) && (callback = speed, speed = null), 
            options && $.extend(effect, options), speed = speed || options.duration, effect.duration = $.fx.off ? 0 : "number" == typeof speed ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default, 
            effect.complete = callback || options.complete, effect;
        }
        function standardAnimationOption(option) {
            // Valid standard speeds (nothing, number, named speed)
            // Valid standard speeds (nothing, number, named speed)
            // Invalid strings - treat as "normal" speed
            // Complete callback
            // Options hash (but not naming an effect)
            return !option || "number" == typeof option || $.fx.speeds[option] ? !0 : "string" != typeof option || $.effects.effect[option] ? $.isFunction(option) ? !0 : "object" != typeof option || option.effect ? !1 : !0 : !0;
        }
        $.extend($.effects, {
            version: "1.11.4",
            // Saves a set of properties in a data storage
            save: function(element, set) {
                for (var i = 0; i < set.length; i++) null !== set[i] && element.data(dataSpace + set[i], element[0].style[set[i]]);
            },
            // Restores a set of previously saved properties from a data storage
            restore: function(element, set) {
                var val, i;
                for (i = 0; i < set.length; i++) null !== set[i] && (val = element.data(dataSpace + set[i]), 
                // support: jQuery 1.6.2
                // http://bugs.jquery.com/ticket/9917
                // jQuery 1.6.2 incorrectly returns undefined for any falsy value.
                // We can't differentiate between "" and 0 here, so we just assume
                // empty string since it's likely to be a more common value...
                void 0 === val && (val = ""), element.css(set[i], val));
            },
            setMode: function(el, mode) {
                return "toggle" === mode && (mode = el.is(":hidden") ? "show" : "hide"), mode;
            },
            // Translates a [top,left] array into a baseline value
            // this should be a little more flexible in the future to handle a string & hash
            getBaseline: function(origin, original) {
                var y, x;
                switch (origin[0]) {
                  case "top":
                    y = 0;
                    break;

                  case "middle":
                    y = .5;
                    break;

                  case "bottom":
                    y = 1;
                    break;

                  default:
                    y = origin[0] / original.height;
                }
                switch (origin[1]) {
                  case "left":
                    x = 0;
                    break;

                  case "center":
                    x = .5;
                    break;

                  case "right":
                    x = 1;
                    break;

                  default:
                    x = origin[1] / original.width;
                }
                return {
                    x: x,
                    y: y
                };
            },
            // Wraps the element around a wrapper that copies position properties
            createWrapper: function(element) {
                // if the element is already wrapped, return it
                if (element.parent().is(".ui-effects-wrapper")) return element.parent();
                // wrap the element
                var props = {
                    width: element.outerWidth(!0),
                    height: element.outerHeight(!0),
                    "float": element.css("float")
                }, wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({
                    fontSize: "100%",
                    background: "transparent",
                    border: "none",
                    margin: 0,
                    padding: 0
                }), // Store the size in case width/height are defined in % - Fixes #5245
                size = {
                    width: element.width(),
                    height: element.height()
                }, active = document.activeElement;
                // support: Firefox
                // Firefox incorrectly exposes anonymous content
                // https://bugzilla.mozilla.org/show_bug.cgi?id=561664
                try {
                    active.id;
                } catch (e) {
                    active = document.body;
                }
                // Fixes #7595 - Elements lose focus when wrapped.
                //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element
                // transfer positioning properties to the wrapper
                return element.wrap(wrapper), (element[0] === active || $.contains(element[0], active)) && $(active).focus(), 
                wrapper = element.parent(), "static" === element.css("position") ? (wrapper.css({
                    position: "relative"
                }), element.css({
                    position: "relative"
                })) : ($.extend(props, {
                    position: element.css("position"),
                    zIndex: element.css("z-index")
                }), $.each([ "top", "left", "bottom", "right" ], function(i, pos) {
                    props[pos] = element.css(pos), isNaN(parseInt(props[pos], 10)) && (props[pos] = "auto");
                }), element.css({
                    position: "relative",
                    top: 0,
                    left: 0,
                    right: "auto",
                    bottom: "auto"
                })), element.css(size), wrapper.css(props).show();
            },
            removeWrapper: function(element) {
                var active = document.activeElement;
                // Fixes #7595 - Elements lose focus when wrapped.
                return element.parent().is(".ui-effects-wrapper") && (element.parent().replaceWith(element), 
                (element[0] === active || $.contains(element[0], active)) && $(active).focus()), 
                element;
            },
            setTransition: function(element, list, factor, value) {
                return value = value || {}, $.each(list, function(i, x) {
                    var unit = element.cssUnit(x);
                    unit[0] > 0 && (value[x] = unit[0] * factor + unit[1]);
                }), value;
            }
        }), $.fn.extend({
            effect: function() {
                function run(next) {
                    function done() {
                        $.isFunction(complete) && complete.call(elem[0]), $.isFunction(next) && next();
                    }
                    var elem = $(this), complete = args.complete, mode = args.mode;
                    // If the element already has the correct final state, delegate to
                    // the core methods so the internal tracking of "olddisplay" works.
                    (elem.is(":hidden") ? "hide" === mode : "show" === mode) ? (elem[mode](), done()) : effectMethod.call(elem[0], args, done);
                }
                var args = _normalizeArguments.apply(this, arguments), mode = args.mode, queue = args.queue, effectMethod = $.effects.effect[args.effect];
                // delegate to the original method (e.g., .show()) if possible
                return $.fx.off || !effectMethod ? mode ? this[mode](args.duration, args.complete) : this.each(function() {
                    args.complete && args.complete.call(this);
                }) : queue === !1 ? this.each(run) : this.queue(queue || "fx", run);
            },
            show: function(orig) {
                return function(option) {
                    if (standardAnimationOption(option)) return orig.apply(this, arguments);
                    var args = _normalizeArguments.apply(this, arguments);
                    return args.mode = "show", this.effect.call(this, args);
                };
            }($.fn.show),
            hide: function(orig) {
                return function(option) {
                    if (standardAnimationOption(option)) return orig.apply(this, arguments);
                    var args = _normalizeArguments.apply(this, arguments);
                    return args.mode = "hide", this.effect.call(this, args);
                };
            }($.fn.hide),
            toggle: function(orig) {
                return function(option) {
                    if (standardAnimationOption(option) || "boolean" == typeof option) return orig.apply(this, arguments);
                    var args = _normalizeArguments.apply(this, arguments);
                    return args.mode = "toggle", this.effect.call(this, args);
                };
            }($.fn.toggle),
            // helper functions
            cssUnit: function(key) {
                var style = this.css(key), val = [];
                return $.each([ "em", "px", "%", "pt" ], function(i, unit) {
                    style.indexOf(unit) > 0 && (val = [ parseFloat(style), unit ]);
                }), val;
            }
        });
    }(), /******************************************************************************/
    /*********************************** EASING ***********************************/
    /******************************************************************************/
    function() {
        // based on easing equations from Robert Penner (http://www.robertpenner.com/easing)
        var baseEasings = {};
        $.each([ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function(i, name) {
            baseEasings[name] = function(p) {
                return Math.pow(p, i + 2);
            };
        }), $.extend(baseEasings, {
            Sine: function(p) {
                return 1 - Math.cos(p * Math.PI / 2);
            },
            Circ: function(p) {
                return 1 - Math.sqrt(1 - p * p);
            },
            Elastic: function(p) {
                return 0 === p || 1 === p ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin((80 * (p - 1) - 7.5) * Math.PI / 15);
            },
            Back: function(p) {
                return p * p * (3 * p - 2);
            },
            Bounce: function(p) {
                for (var pow2, bounce = 4; p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11; ) ;
                return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((3 * pow2 - 2) / 22 - p, 2);
            }
        }), $.each(baseEasings, function(name, easeIn) {
            $.easing["easeIn" + name] = easeIn, $.easing["easeOut" + name] = function(p) {
                return 1 - easeIn(1 - p);
            }, $.easing["easeInOut" + name] = function(p) {
                return .5 > p ? easeIn(2 * p) / 2 : 1 - easeIn(-2 * p + 2) / 2;
            };
        });
    }();
    $.effects, $.effects.effect.blind = function(o, done) {
        // Create element
        var wrapper, distance, margin, el = $(this), rvertical = /up|down|vertical/, rpositivemotion = /up|left|vertical|horizontal/, props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), direction = o.direction || "up", vertical = rvertical.test(direction), ref = vertical ? "height" : "width", ref2 = vertical ? "top" : "left", motion = rpositivemotion.test(direction), animation = {}, show = "show" === mode;
        // if already wrapped, the wrapper's properties are my property. #6245
        el.parent().is(".ui-effects-wrapper") ? $.effects.save(el.parent(), props) : $.effects.save(el, props), 
        el.show(), wrapper = $.effects.createWrapper(el).css({
            overflow: "hidden"
        }), distance = wrapper[ref](), margin = parseFloat(wrapper.css(ref2)) || 0, animation[ref] = show ? distance : 0, 
        motion || (el.css(vertical ? "bottom" : "right", 0).css(vertical ? "top" : "left", "auto").css({
            position: "absolute"
        }), animation[ref2] = show ? margin : distance + margin), // start at 0 if we are showing
        show && (wrapper.css(ref, 0), motion || wrapper.css(ref2, margin + distance)), // Animate
        wrapper.animate(animation, {
            duration: o.duration,
            easing: o.easing,
            queue: !1,
            complete: function() {
                "hide" === mode && el.hide(), $.effects.restore(el, props), $.effects.removeWrapper(el), 
                done();
            }
        });
    }, $.effects.effect.bounce = function(o, done) {
        var i, upAnim, downAnim, el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], // defaults:
        mode = $.effects.setMode(el, o.mode || "effect"), hide = "hide" === mode, show = "show" === mode, direction = o.direction || "up", distance = o.distance, times = o.times || 5, // number of internal animations
        anims = 2 * times + (show || hide ? 1 : 0), speed = o.duration / anims, easing = o.easing, // utility:
        ref = "up" === direction || "down" === direction ? "top" : "left", motion = "up" === direction || "left" === direction, // we will need to re-assemble the queue to stack our animations in place
        queue = el.queue(), queuelen = queue.length;
        // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
        for (// Avoid touching opacity to prevent clearType and PNG issues in IE
        (show || hide) && props.push("opacity"), $.effects.save(el, props), el.show(), $.effects.createWrapper(el), 
        // Create Wrapper
        // default distance for the BIGGEST bounce is the outer Distance / 3
        distance || (distance = el["top" === ref ? "outerHeight" : "outerWidth"]() / 3), 
        show && (downAnim = {
            opacity: 1
        }, downAnim[ref] = 0, // if we are showing, force opacity 0 and set the initial position
        // then do the "first" animation
        el.css("opacity", 0).css(ref, motion ? 2 * -distance : 2 * distance).animate(downAnim, speed, easing)), 
        // start at the smallest distance if we are hiding
        hide && (distance /= Math.pow(2, times - 1)), downAnim = {}, downAnim[ref] = 0, 
        i = 0; times > i; i++) upAnim = {}, upAnim[ref] = (motion ? "-=" : "+=") + distance, 
        el.animate(upAnim, speed, easing).animate(downAnim, speed, easing), distance = hide ? 2 * distance : distance / 2;
        // Last Bounce when Hiding
        hide && (upAnim = {
            opacity: 0
        }, upAnim[ref] = (motion ? "-=" : "+=") + distance, el.animate(upAnim, speed, easing)), 
        el.queue(function() {
            hide && el.hide(), $.effects.restore(el, props), $.effects.removeWrapper(el), done();
        }), // inject all the animations we just queued to be first in line (after "inprogress")
        queuelen > 1 && queue.splice.apply(queue, [ 1, 0 ].concat(queue.splice(queuelen, anims + 1))), 
        el.dequeue();
    }, $.effects.effect.clip = function(o, done) {
        // Create element
        var wrapper, animate, distance, el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), show = "show" === mode, direction = o.direction || "vertical", vert = "vertical" === direction, size = vert ? "height" : "width", position = vert ? "top" : "left", animation = {};
        // Save & Show
        $.effects.save(el, props), el.show(), // Create Wrapper
        wrapper = $.effects.createWrapper(el).css({
            overflow: "hidden"
        }), animate = "IMG" === el[0].tagName ? wrapper : el, distance = animate[size](), 
        // Shift
        show && (animate.css(size, 0), animate.css(position, distance / 2)), // Create Animation Object:
        animation[size] = show ? distance : 0, animation[position] = show ? 0 : distance / 2, 
        // Animate
        animate.animate(animation, {
            queue: !1,
            duration: o.duration,
            easing: o.easing,
            complete: function() {
                show || el.hide(), $.effects.restore(el, props), $.effects.removeWrapper(el), done();
            }
        });
    }, $.effects.effect.drop = function(o, done) {
        var distance, el = $(this), props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), show = "show" === mode, direction = o.direction || "left", ref = "up" === direction || "down" === direction ? "top" : "left", motion = "up" === direction || "left" === direction ? "pos" : "neg", animation = {
            opacity: show ? 1 : 0
        };
        // Adjust
        $.effects.save(el, props), el.show(), $.effects.createWrapper(el), distance = o.distance || el["top" === ref ? "outerHeight" : "outerWidth"](!0) / 2, 
        show && el.css("opacity", 0).css(ref, "pos" === motion ? -distance : distance), 
        // Animation
        animation[ref] = (show ? "pos" === motion ? "+=" : "-=" : "pos" === motion ? "-=" : "+=") + distance, 
        // Animate
        el.animate(animation, {
            queue: !1,
            duration: o.duration,
            easing: o.easing,
            complete: function() {
                "hide" === mode && el.hide(), $.effects.restore(el, props), $.effects.removeWrapper(el), 
                done();
            }
        });
    }, $.effects.effect.explode = function(o, done) {
        // children animate complete:
        function childComplete() {
            pieces.push(this), pieces.length === rows * cells && animComplete();
        }
        function animComplete() {
            el.css({
                visibility: "visible"
            }), $(pieces).remove(), show || el.hide(), done();
        }
        var // loop
        i, j, left, top, mx, my, rows = o.pieces ? Math.round(Math.sqrt(o.pieces)) : 3, cells = rows, el = $(this), mode = $.effects.setMode(el, o.mode || "hide"), show = "show" === mode, // show and then visibility:hidden the element before calculating offset
        offset = el.show().css("visibility", "hidden").offset(), // width and height of a piece
        width = Math.ceil(el.outerWidth() / cells), height = Math.ceil(el.outerHeight() / rows), pieces = [];
        // clone the element for each row and cell.
        for (i = 0; rows > i; i++) for (// ===>
        top = offset.top + i * height, my = i - (rows - 1) / 2, j = 0; cells > j; j++) // |||
        left = offset.left + j * width, mx = j - (cells - 1) / 2, // Create a clone of the now hidden main element that will be absolute positioned
        // within a wrapper div off the -left and -top equal to size of our pieces
        el.clone().appendTo("body").wrap("<div></div>").css({
            position: "absolute",
            visibility: "visible",
            left: -j * width,
            top: -i * height
        }).parent().addClass("ui-effects-explode").css({
            position: "absolute",
            overflow: "hidden",
            width: width,
            height: height,
            left: left + (show ? mx * width : 0),
            top: top + (show ? my * height : 0),
            opacity: show ? 0 : 1
        }).animate({
            left: left + (show ? 0 : mx * width),
            top: top + (show ? 0 : my * height),
            opacity: show ? 1 : 0
        }, o.duration || 500, o.easing, childComplete);
    }, $.effects.effect.fade = function(o, done) {
        var el = $(this), mode = $.effects.setMode(el, o.mode || "toggle");
        el.animate({
            opacity: mode
        }, {
            queue: !1,
            duration: o.duration,
            easing: o.easing,
            complete: done
        });
    }, $.effects.effect.fold = function(o, done) {
        // Create element
        var wrapper, distance, el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), show = "show" === mode, hide = "hide" === mode, size = o.size || 15, percent = /([0-9]+)%/.exec(size), horizFirst = !!o.horizFirst, widthFirst = show !== horizFirst, ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ], duration = o.duration / 2, animation1 = {}, animation2 = {};
        $.effects.save(el, props), el.show(), // Create Wrapper
        wrapper = $.effects.createWrapper(el).css({
            overflow: "hidden"
        }), distance = widthFirst ? [ wrapper.width(), wrapper.height() ] : [ wrapper.height(), wrapper.width() ], 
        percent && (size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1]), show && wrapper.css(horizFirst ? {
            height: 0,
            width: size
        } : {
            height: size,
            width: 0
        }), // Animation
        animation1[ref[0]] = show ? distance[0] : size, animation2[ref[1]] = show ? distance[1] : 0, 
        // Animate
        wrapper.animate(animation1, duration, o.easing).animate(animation2, duration, o.easing, function() {
            hide && el.hide(), $.effects.restore(el, props), $.effects.removeWrapper(el), done();
        });
    }, $.effects.effect.highlight = function(o, done) {
        var elem = $(this), props = [ "backgroundImage", "backgroundColor", "opacity" ], mode = $.effects.setMode(elem, o.mode || "show"), animation = {
            backgroundColor: elem.css("backgroundColor")
        };
        "hide" === mode && (animation.opacity = 0), $.effects.save(elem, props), elem.show().css({
            backgroundImage: "none",
            backgroundColor: o.color || "#ffff99"
        }).animate(animation, {
            queue: !1,
            duration: o.duration,
            easing: o.easing,
            complete: function() {
                "hide" === mode && elem.hide(), $.effects.restore(elem, props), done();
            }
        });
    }, $.effects.effect.size = function(o, done) {
        // Create element
        var original, baseline, factor, el = $(this), props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ], // Always restore
        props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ], // Copy for children
        props2 = [ "width", "height", "overflow" ], cProps = [ "fontSize" ], vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ], hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ], // Set options
        mode = $.effects.setMode(el, o.mode || "effect"), restore = o.restore || "effect" !== mode, scale = o.scale || "both", origin = o.origin || [ "middle", "center" ], position = el.css("position"), props = restore ? props0 : props1, zero = {
            height: 0,
            width: 0,
            outerHeight: 0,
            outerWidth: 0
        };
        "show" === mode && el.show(), original = {
            height: el.height(),
            width: el.width(),
            outerHeight: el.outerHeight(),
            outerWidth: el.outerWidth()
        }, "toggle" === o.mode && "show" === mode ? (el.from = o.to || zero, el.to = o.from || original) : (el.from = o.from || ("show" === mode ? zero : original), 
        el.to = o.to || ("hide" === mode ? zero : original)), // Set scaling factor
        factor = {
            from: {
                y: el.from.height / original.height,
                x: el.from.width / original.width
            },
            to: {
                y: el.to.height / original.height,
                x: el.to.width / original.width
            }
        }, // Scale the css box
        ("box" === scale || "both" === scale) && (// Vertical props scaling
        factor.from.y !== factor.to.y && (props = props.concat(vProps), el.from = $.effects.setTransition(el, vProps, factor.from.y, el.from), 
        el.to = $.effects.setTransition(el, vProps, factor.to.y, el.to)), // Horizontal props scaling
        factor.from.x !== factor.to.x && (props = props.concat(hProps), el.from = $.effects.setTransition(el, hProps, factor.from.x, el.from), 
        el.to = $.effects.setTransition(el, hProps, factor.to.x, el.to))), // Scale the content
        ("content" === scale || "both" === scale) && factor.from.y !== factor.to.y && (props = props.concat(cProps).concat(props2), 
        el.from = $.effects.setTransition(el, cProps, factor.from.y, el.from), el.to = $.effects.setTransition(el, cProps, factor.to.y, el.to)), 
        $.effects.save(el, props), el.show(), $.effects.createWrapper(el), el.css("overflow", "hidden").css(el.from), 
        // Adjust
        origin && (// Calculate baseline shifts
        baseline = $.effects.getBaseline(origin, original), el.from.top = (original.outerHeight - el.outerHeight()) * baseline.y, 
        el.from.left = (original.outerWidth - el.outerWidth()) * baseline.x, el.to.top = (original.outerHeight - el.to.outerHeight) * baseline.y, 
        el.to.left = (original.outerWidth - el.to.outerWidth) * baseline.x), el.css(el.from), 
        // set top & left
        // Animate
        ("content" === scale || "both" === scale) && (// Scale the children
        // Add margins/font-size
        vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps), hProps = hProps.concat([ "marginLeft", "marginRight" ]), 
        props2 = props0.concat(vProps).concat(hProps), el.find("*[width]").each(function() {
            var child = $(this), c_original = {
                height: child.height(),
                width: child.width(),
                outerHeight: child.outerHeight(),
                outerWidth: child.outerWidth()
            };
            restore && $.effects.save(child, props2), child.from = {
                height: c_original.height * factor.from.y,
                width: c_original.width * factor.from.x,
                outerHeight: c_original.outerHeight * factor.from.y,
                outerWidth: c_original.outerWidth * factor.from.x
            }, child.to = {
                height: c_original.height * factor.to.y,
                width: c_original.width * factor.to.x,
                outerHeight: c_original.height * factor.to.y,
                outerWidth: c_original.width * factor.to.x
            }, // Vertical props scaling
            factor.from.y !== factor.to.y && (child.from = $.effects.setTransition(child, vProps, factor.from.y, child.from), 
            child.to = $.effects.setTransition(child, vProps, factor.to.y, child.to)), // Horizontal props scaling
            factor.from.x !== factor.to.x && (child.from = $.effects.setTransition(child, hProps, factor.from.x, child.from), 
            child.to = $.effects.setTransition(child, hProps, factor.to.x, child.to)), // Animate children
            child.css(child.from), child.animate(child.to, o.duration, o.easing, function() {
                // Restore children
                restore && $.effects.restore(child, props2);
            });
        })), // Animate
        el.animate(el.to, {
            queue: !1,
            duration: o.duration,
            easing: o.easing,
            complete: function() {
                0 === el.to.opacity && el.css("opacity", el.from.opacity), "hide" === mode && el.hide(), 
                $.effects.restore(el, props), restore || (// we need to calculate our new positioning based on the scaling
                "static" === position ? el.css({
                    position: "relative",
                    top: el.to.top,
                    left: el.to.left
                }) : $.each([ "top", "left" ], function(idx, pos) {
                    el.css(pos, function(_, str) {
                        var val = parseInt(str, 10), toRef = idx ? el.to.left : el.to.top;
                        // if original was "auto", recalculate the new value from wrapper
                        // if original was "auto", recalculate the new value from wrapper
                        return "auto" === str ? toRef + "px" : val + toRef + "px";
                    });
                })), $.effects.removeWrapper(el), done();
            }
        });
    }, $.effects.effect.scale = function(o, done) {
        // Create element
        var el = $(this), options = $.extend(!0, {}, o), mode = $.effects.setMode(el, o.mode || "effect"), percent = parseInt(o.percent, 10) || (0 === parseInt(o.percent, 10) ? 0 : "hide" === mode ? 0 : 100), direction = o.direction || "both", origin = o.origin, original = {
            height: el.height(),
            width: el.width(),
            outerHeight: el.outerHeight(),
            outerWidth: el.outerWidth()
        }, factor = {
            y: "horizontal" !== direction ? percent / 100 : 1,
            x: "vertical" !== direction ? percent / 100 : 1
        };
        // We are going to pass this effect to the size effect:
        options.effect = "size", options.queue = !1, options.complete = done, // Set default origin and restore for show/hide
        "effect" !== mode && (options.origin = origin || [ "middle", "center" ], options.restore = !0), 
        options.from = o.from || ("show" === mode ? {
            height: 0,
            width: 0,
            outerHeight: 0,
            outerWidth: 0
        } : original), options.to = {
            height: original.height * factor.y,
            width: original.width * factor.x,
            outerHeight: original.outerHeight * factor.y,
            outerWidth: original.outerWidth * factor.x
        }, // Fade option to support puff
        options.fade && ("show" === mode && (options.from.opacity = 0, options.to.opacity = 1), 
        "hide" === mode && (options.from.opacity = 1, options.to.opacity = 0)), // Animate
        el.effect(options);
    }, $.effects.effect.puff = function(o, done) {
        var elem = $(this), mode = $.effects.setMode(elem, o.mode || "hide"), hide = "hide" === mode, percent = parseInt(o.percent, 10) || 150, factor = percent / 100, original = {
            height: elem.height(),
            width: elem.width(),
            outerHeight: elem.outerHeight(),
            outerWidth: elem.outerWidth()
        };
        $.extend(o, {
            effect: "scale",
            queue: !1,
            fade: !0,
            mode: mode,
            complete: done,
            percent: hide ? percent : 100,
            from: hide ? original : {
                height: original.height * factor,
                width: original.width * factor,
                outerHeight: original.outerHeight * factor,
                outerWidth: original.outerWidth * factor
            }
        }), elem.effect(o);
    }, $.effects.effect.pulsate = function(o, done) {
        var i, elem = $(this), mode = $.effects.setMode(elem, o.mode || "show"), show = "show" === mode, hide = "hide" === mode, showhide = show || "hide" === mode, // showing or hiding leaves of the "last" animation
        anims = 2 * (o.times || 5) + (showhide ? 1 : 0), duration = o.duration / anims, animateTo = 0, queue = elem.queue(), queuelen = queue.length;
        // anims - 1 opacity "toggles"
        for ((show || !elem.is(":visible")) && (elem.css("opacity", 0).show(), animateTo = 1), 
        i = 1; anims > i; i++) elem.animate({
            opacity: animateTo
        }, duration, o.easing), animateTo = 1 - animateTo;
        elem.animate({
            opacity: animateTo
        }, duration, o.easing), elem.queue(function() {
            hide && elem.hide(), done();
        }), // We just queued up "anims" animations, we need to put them next in the queue
        queuelen > 1 && queue.splice.apply(queue, [ 1, 0 ].concat(queue.splice(queuelen, anims + 1))), 
        elem.dequeue();
    }, $.effects.effect.shake = function(o, done) {
        var i, el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "effect"), direction = o.direction || "left", distance = o.distance || 20, times = o.times || 3, anims = 2 * times + 1, speed = Math.round(o.duration / anims), ref = "up" === direction || "down" === direction ? "top" : "left", positiveMotion = "up" === direction || "left" === direction, animation = {}, animation1 = {}, animation2 = {}, // we will need to re-assemble the queue to stack our animations in place
        queue = el.queue(), queuelen = queue.length;
        // Shakes
        for ($.effects.save(el, props), el.show(), $.effects.createWrapper(el), // Animation
        animation[ref] = (positiveMotion ? "-=" : "+=") + distance, animation1[ref] = (positiveMotion ? "+=" : "-=") + 2 * distance, 
        animation2[ref] = (positiveMotion ? "-=" : "+=") + 2 * distance, // Animate
        el.animate(animation, speed, o.easing), i = 1; times > i; i++) el.animate(animation1, speed, o.easing).animate(animation2, speed, o.easing);
        el.animate(animation1, speed, o.easing).animate(animation, speed / 2, o.easing).queue(function() {
            "hide" === mode && el.hide(), $.effects.restore(el, props), $.effects.removeWrapper(el), 
            done();
        }), // inject all the animations we just queued to be first in line (after "inprogress")
        queuelen > 1 && queue.splice.apply(queue, [ 1, 0 ].concat(queue.splice(queuelen, anims + 1))), 
        el.dequeue();
    }, $.effects.effect.slide = function(o, done) {
        // Create element
        var distance, el = $(this), props = [ "position", "top", "bottom", "left", "right", "width", "height" ], mode = $.effects.setMode(el, o.mode || "show"), show = "show" === mode, direction = o.direction || "left", ref = "up" === direction || "down" === direction ? "top" : "left", positiveMotion = "up" === direction || "left" === direction, animation = {};
        // Adjust
        $.effects.save(el, props), el.show(), distance = o.distance || el["top" === ref ? "outerHeight" : "outerWidth"](!0), 
        $.effects.createWrapper(el).css({
            overflow: "hidden"
        }), show && el.css(ref, positiveMotion ? isNaN(distance) ? "-" + distance : -distance : distance), 
        // Animation
        animation[ref] = (show ? positiveMotion ? "+=" : "-=" : positiveMotion ? "-=" : "+=") + distance, 
        // Animate
        el.animate(animation, {
            queue: !1,
            duration: o.duration,
            easing: o.easing,
            complete: function() {
                "hide" === mode && el.hide(), $.effects.restore(el, props), $.effects.removeWrapper(el), 
                done();
            }
        });
    }, $.effects.effect.transfer = function(o, done) {
        var elem = $(this), target = $(o.to), targetFixed = "fixed" === target.css("position"), body = $("body"), fixTop = targetFixed ? body.scrollTop() : 0, fixLeft = targetFixed ? body.scrollLeft() : 0, endPosition = target.offset(), animation = {
            top: endPosition.top - fixTop,
            left: endPosition.left - fixLeft,
            height: target.innerHeight(),
            width: target.innerWidth()
        }, startPosition = elem.offset(), transfer = $("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(o.className).css({
            top: startPosition.top - fixTop,
            left: startPosition.left - fixLeft,
            height: elem.innerHeight(),
            width: elem.innerWidth(),
            position: targetFixed ? "fixed" : "absolute"
        }).animate(animation, o.duration, o.easing, function() {
            transfer.remove(), done();
        });
    }, $.widget("ui.progressbar", {
        version: "1.11.4",
        options: {
            max: 100,
            value: 0,
            change: null,
            complete: null
        },
        min: 0,
        _create: function() {
            // Constrain initial value
            this.oldValue = this.options.value = this._constrainedValue(), this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
                // Only set static values, aria-valuenow and aria-valuemax are
                // set inside _refreshValue()
                role: "progressbar",
                "aria-valuemin": this.min
            }), this.valueDiv = $("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element), 
            this._refreshValue();
        },
        _destroy: function() {
            this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"), 
            this.valueDiv.remove();
        },
        value: function(newValue) {
            return void 0 === newValue ? this.options.value : (this.options.value = this._constrainedValue(newValue), 
            void this._refreshValue());
        },
        _constrainedValue: function(newValue) {
            // sanitize value
            return void 0 === newValue && (newValue = this.options.value), this.indeterminate = newValue === !1, 
            "number" != typeof newValue && (newValue = 0), this.indeterminate ? !1 : Math.min(this.options.max, Math.max(this.min, newValue));
        },
        _setOptions: function(options) {
            // Ensure "value" option is set after other values (like max)
            var value = options.value;
            delete options.value, this._super(options), this.options.value = this._constrainedValue(value), 
            this._refreshValue();
        },
        _setOption: function(key, value) {
            "max" === key && (// Don't allow a max less than min
            value = Math.max(this.min, value)), "disabled" === key && this.element.toggleClass("ui-state-disabled", !!value).attr("aria-disabled", value), 
            this._super(key, value);
        },
        _percentage: function() {
            return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
        },
        _refreshValue: function() {
            var value = this.options.value, percentage = this._percentage();
            this.valueDiv.toggle(this.indeterminate || value > this.min).toggleClass("ui-corner-right", value === this.options.max).width(percentage.toFixed(0) + "%"), 
            this.element.toggleClass("ui-progressbar-indeterminate", this.indeterminate), this.indeterminate ? (this.element.removeAttr("aria-valuenow"), 
            this.overlayDiv || (this.overlayDiv = $("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv))) : (this.element.attr({
                "aria-valuemax": this.options.max,
                "aria-valuenow": value
            }), this.overlayDiv && (this.overlayDiv.remove(), this.overlayDiv = null)), this.oldValue !== value && (this.oldValue = value, 
            this._trigger("change")), value === this.options.max && this._trigger("complete");
        }
    }), $.widget("ui.selectable", $.ui.mouse, {
        version: "1.11.4",
        options: {
            appendTo: "body",
            autoRefresh: !0,
            distance: 0,
            filter: "*",
            tolerance: "touch",
            // callbacks
            selected: null,
            selecting: null,
            start: null,
            stop: null,
            unselected: null,
            unselecting: null
        },
        _create: function() {
            var selectees, that = this;
            this.element.addClass("ui-selectable"), this.dragged = !1, // cache selectee children based on filter
            this.refresh = function() {
                selectees = $(that.options.filter, that.element[0]), selectees.addClass("ui-selectee"), 
                selectees.each(function() {
                    var $this = $(this), pos = $this.offset();
                    $.data(this, "selectable-item", {
                        element: this,
                        $element: $this,
                        left: pos.left,
                        top: pos.top,
                        right: pos.left + $this.outerWidth(),
                        bottom: pos.top + $this.outerHeight(),
                        startselected: !1,
                        selected: $this.hasClass("ui-selected"),
                        selecting: $this.hasClass("ui-selecting"),
                        unselecting: $this.hasClass("ui-unselecting")
                    });
                });
            }, this.refresh(), this.selectees = selectees.addClass("ui-selectee"), this._mouseInit(), 
            this.helper = $("<div class='ui-selectable-helper'></div>");
        },
        _destroy: function() {
            this.selectees.removeClass("ui-selectee").removeData("selectable-item"), this.element.removeClass("ui-selectable ui-selectable-disabled"), 
            this._mouseDestroy();
        },
        _mouseStart: function(event) {
            var that = this, options = this.options;
            this.opos = [ event.pageX, event.pageY ], this.options.disabled || (this.selectees = $(options.filter, this.element[0]), 
            this._trigger("start", event), $(options.appendTo).append(this.helper), // position helper (lasso)
            this.helper.css({
                left: event.pageX,
                top: event.pageY,
                width: 0,
                height: 0
            }), options.autoRefresh && this.refresh(), this.selectees.filter(".ui-selected").each(function() {
                var selectee = $.data(this, "selectable-item");
                selectee.startselected = !0, event.metaKey || event.ctrlKey || (selectee.$element.removeClass("ui-selected"), 
                selectee.selected = !1, selectee.$element.addClass("ui-unselecting"), selectee.unselecting = !0, 
                // selectable UNSELECTING callback
                that._trigger("unselecting", event, {
                    unselecting: selectee.element
                }));
            }), $(event.target).parents().addBack().each(function() {
                var doSelect, selectee = $.data(this, "selectable-item");
                // selectable (UN)SELECTING callback
                return selectee ? (doSelect = !event.metaKey && !event.ctrlKey || !selectee.$element.hasClass("ui-selected"), 
                selectee.$element.removeClass(doSelect ? "ui-unselecting" : "ui-selected").addClass(doSelect ? "ui-selecting" : "ui-unselecting"), 
                selectee.unselecting = !doSelect, selectee.selecting = doSelect, selectee.selected = doSelect, 
                doSelect ? that._trigger("selecting", event, {
                    selecting: selectee.element
                }) : that._trigger("unselecting", event, {
                    unselecting: selectee.element
                }), !1) : void 0;
            }));
        },
        _mouseDrag: function(event) {
            if (this.dragged = !0, !this.options.disabled) {
                var tmp, that = this, options = this.options, x1 = this.opos[0], y1 = this.opos[1], x2 = event.pageX, y2 = event.pageY;
                return x1 > x2 && (tmp = x2, x2 = x1, x1 = tmp), y1 > y2 && (tmp = y2, y2 = y1, 
                y1 = tmp), this.helper.css({
                    left: x1,
                    top: y1,
                    width: x2 - x1,
                    height: y2 - y1
                }), this.selectees.each(function() {
                    var selectee = $.data(this, "selectable-item"), hit = !1;
                    //prevent helper from being selected if appendTo: selectable
                    selectee && selectee.element !== that.element[0] && ("touch" === options.tolerance ? hit = !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) : "fit" === options.tolerance && (hit = selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2), 
                    hit ? (// SELECT
                    selectee.selected && (selectee.$element.removeClass("ui-selected"), selectee.selected = !1), 
                    selectee.unselecting && (selectee.$element.removeClass("ui-unselecting"), selectee.unselecting = !1), 
                    selectee.selecting || (selectee.$element.addClass("ui-selecting"), selectee.selecting = !0, 
                    // selectable SELECTING callback
                    that._trigger("selecting", event, {
                        selecting: selectee.element
                    }))) : (// UNSELECT
                    selectee.selecting && ((event.metaKey || event.ctrlKey) && selectee.startselected ? (selectee.$element.removeClass("ui-selecting"), 
                    selectee.selecting = !1, selectee.$element.addClass("ui-selected"), selectee.selected = !0) : (selectee.$element.removeClass("ui-selecting"), 
                    selectee.selecting = !1, selectee.startselected && (selectee.$element.addClass("ui-unselecting"), 
                    selectee.unselecting = !0), // selectable UNSELECTING callback
                    that._trigger("unselecting", event, {
                        unselecting: selectee.element
                    }))), selectee.selected && (event.metaKey || event.ctrlKey || selectee.startselected || (selectee.$element.removeClass("ui-selected"), 
                    selectee.selected = !1, selectee.$element.addClass("ui-unselecting"), selectee.unselecting = !0, 
                    // selectable UNSELECTING callback
                    that._trigger("unselecting", event, {
                        unselecting: selectee.element
                    })))));
                }), !1;
            }
        },
        _mouseStop: function(event) {
            var that = this;
            return this.dragged = !1, $(".ui-unselecting", this.element[0]).each(function() {
                var selectee = $.data(this, "selectable-item");
                selectee.$element.removeClass("ui-unselecting"), selectee.unselecting = !1, selectee.startselected = !1, 
                that._trigger("unselected", event, {
                    unselected: selectee.element
                });
            }), $(".ui-selecting", this.element[0]).each(function() {
                var selectee = $.data(this, "selectable-item");
                selectee.$element.removeClass("ui-selecting").addClass("ui-selected"), selectee.selecting = !1, 
                selectee.selected = !0, selectee.startselected = !0, that._trigger("selected", event, {
                    selected: selectee.element
                });
            }), this._trigger("stop", event), this.helper.remove(), !1;
        }
    }), $.widget("ui.selectmenu", {
        version: "1.11.4",
        defaultElement: "<select>",
        options: {
            appendTo: null,
            disabled: null,
            icons: {
                button: "ui-icon-triangle-1-s"
            },
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            width: null,
            // callbacks
            change: null,
            close: null,
            focus: null,
            open: null,
            select: null
        },
        _create: function() {
            var selectmenuId = this.element.uniqueId().attr("id");
            this.ids = {
                element: selectmenuId,
                button: selectmenuId + "-button",
                menu: selectmenuId + "-menu"
            }, this._drawButton(), this._drawMenu(), this.options.disabled && this.disable();
        },
        _drawButton: function() {
            var that = this;
            // Associate existing label with the new button
            this.label = $("label[for='" + this.ids.element + "']").attr("for", this.ids.button), 
            this._on(this.label, {
                click: function(event) {
                    this.button.focus(), event.preventDefault();
                }
            }), // Hide original select element
            this.element.hide(), // Create button
            this.button = $("<span>", {
                "class": "ui-selectmenu-button ui-widget ui-state-default ui-corner-all",
                tabindex: this.options.disabled ? -1 : 0,
                id: this.ids.button,
                role: "combobox",
                "aria-expanded": "false",
                "aria-autocomplete": "list",
                "aria-owns": this.ids.menu,
                "aria-haspopup": "true"
            }).insertAfter(this.element), $("<span>", {
                "class": "ui-icon " + this.options.icons.button
            }).prependTo(this.button), this.buttonText = $("<span>", {
                "class": "ui-selectmenu-text"
            }).appendTo(this.button), this._setText(this.buttonText, this.element.find("option:selected").text()), 
            this._resizeButton(), this._on(this.button, this._buttonEvents), this.button.one("focusin", function() {
                // Delay rendering the menu items until the button receives focus.
                // The menu may have already been rendered via a programmatic open.
                that.menuItems || that._refreshMenu();
            }), this._hoverable(this.button), this._focusable(this.button);
        },
        _drawMenu: function() {
            var that = this;
            // Create menu
            this.menu = $("<ul>", {
                "aria-hidden": "true",
                "aria-labelledby": this.ids.button,
                id: this.ids.menu
            }), // Wrap menu
            this.menuWrap = $("<div>", {
                "class": "ui-selectmenu-menu ui-front"
            }).append(this.menu).appendTo(this._appendTo()), // Initialize menu widget
            this.menuInstance = this.menu.menu({
                role: "listbox",
                select: function(event, ui) {
                    event.preventDefault(), // support: IE8
                    // If the item was selected via a click, the text selection
                    // will be destroyed in IE
                    that._setSelection(), that._select(ui.item.data("ui-selectmenu-item"), event);
                },
                focus: function(event, ui) {
                    var item = ui.item.data("ui-selectmenu-item");
                    // Prevent inital focus from firing and check if its a newly focused item
                    null != that.focusIndex && item.index !== that.focusIndex && (that._trigger("focus", event, {
                        item: item
                    }), that.isOpen || that._select(item, event)), that.focusIndex = item.index, that.button.attr("aria-activedescendant", that.menuItems.eq(item.index).attr("id"));
                }
            }).menu("instance"), // Adjust menu styles to dropdown
            this.menu.addClass("ui-corner-bottom").removeClass("ui-corner-all"), // Don't close the menu on mouseleave
            this.menuInstance._off(this.menu, "mouseleave"), // Cancel the menu's collapseAll on document click
            this.menuInstance._closeOnDocumentClick = function() {
                return !1;
            }, // Selects often contain empty items, but never contain dividers
            this.menuInstance._isDivider = function() {
                return !1;
            };
        },
        refresh: function() {
            this._refreshMenu(), this._setText(this.buttonText, this._getSelectedItem().text()), 
            this.options.width || this._resizeButton();
        },
        _refreshMenu: function() {
            this.menu.empty();
            var item, options = this.element.find("option");
            options.length && (this._parseOptions(options), this._renderMenu(this.menu, this.items), 
            this.menuInstance.refresh(), this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup"), 
            item = this._getSelectedItem(), // Update the menu to have the correct item focused
            this.menuInstance.focus(null, item), this._setAria(item.data("ui-selectmenu-item")), 
            // Set disabled state
            this._setOption("disabled", this.element.prop("disabled")));
        },
        open: function(event) {
            this.options.disabled || (// If this is the first time the menu is being opened, render the items
            this.menuItems ? (// Menu clears focus on close, reset focus to selected item
            this.menu.find(".ui-state-focus").removeClass("ui-state-focus"), this.menuInstance.focus(null, this._getSelectedItem())) : this._refreshMenu(), 
            this.isOpen = !0, this._toggleAttr(), this._resizeMenu(), this._position(), this._on(this.document, this._documentClick), 
            this._trigger("open", event));
        },
        _position: function() {
            this.menuWrap.position($.extend({
                of: this.button
            }, this.options.position));
        },
        close: function(event) {
            this.isOpen && (this.isOpen = !1, this._toggleAttr(), this.range = null, this._off(this.document), 
            this._trigger("close", event));
        },
        widget: function() {
            return this.button;
        },
        menuWidget: function() {
            return this.menu;
        },
        _renderMenu: function(ul, items) {
            var that = this, currentOptgroup = "";
            $.each(items, function(index, item) {
                item.optgroup !== currentOptgroup && ($("<li>", {
                    "class": "ui-selectmenu-optgroup ui-menu-divider" + (item.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : ""),
                    text: item.optgroup
                }).appendTo(ul), currentOptgroup = item.optgroup), that._renderItemData(ul, item);
            });
        },
        _renderItemData: function(ul, item) {
            return this._renderItem(ul, item).data("ui-selectmenu-item", item);
        },
        _renderItem: function(ul, item) {
            var li = $("<li>");
            return item.disabled && li.addClass("ui-state-disabled"), this._setText(li, item.label), 
            li.appendTo(ul);
        },
        _setText: function(element, value) {
            value ? element.text(value) : element.html("&#160;");
        },
        _move: function(direction, event) {
            var item, next, filter = ".ui-menu-item";
            this.isOpen ? item = this.menuItems.eq(this.focusIndex) : (item = this.menuItems.eq(this.element[0].selectedIndex), 
            filter += ":not(.ui-state-disabled)"), next = "first" === direction || "last" === direction ? item["first" === direction ? "prevAll" : "nextAll"](filter).eq(-1) : item[direction + "All"](filter).eq(0), 
            next.length && this.menuInstance.focus(event, next);
        },
        _getSelectedItem: function() {
            return this.menuItems.eq(this.element[0].selectedIndex);
        },
        _toggle: function(event) {
            this[this.isOpen ? "close" : "open"](event);
        },
        _setSelection: function() {
            var selection;
            this.range && (window.getSelection ? (selection = window.getSelection(), selection.removeAllRanges(), 
            selection.addRange(this.range)) : this.range.select(), // support: IE
            // Setting the text selection kills the button focus in IE, but
            // restoring the focus doesn't kill the selection.
            this.button.focus());
        },
        _documentClick: {
            mousedown: function(event) {
                this.isOpen && ($(event.target).closest(".ui-selectmenu-menu, #" + this.ids.button).length || this.close(event));
            }
        },
        _buttonEvents: {
            // Prevent text selection from being reset when interacting with the selectmenu (#10144)
            mousedown: function() {
                var selection;
                window.getSelection ? (selection = window.getSelection(), selection.rangeCount && (this.range = selection.getRangeAt(0))) : this.range = document.selection.createRange();
            },
            click: function(event) {
                this._setSelection(), this._toggle(event);
            },
            keydown: function(event) {
                var preventDefault = !0;
                switch (event.keyCode) {
                  case $.ui.keyCode.TAB:
                  case $.ui.keyCode.ESCAPE:
                    this.close(event), preventDefault = !1;
                    break;

                  case $.ui.keyCode.ENTER:
                    this.isOpen && this._selectFocusedItem(event);
                    break;

                  case $.ui.keyCode.UP:
                    event.altKey ? this._toggle(event) : this._move("prev", event);
                    break;

                  case $.ui.keyCode.DOWN:
                    event.altKey ? this._toggle(event) : this._move("next", event);
                    break;

                  case $.ui.keyCode.SPACE:
                    this.isOpen ? this._selectFocusedItem(event) : this._toggle(event);
                    break;

                  case $.ui.keyCode.LEFT:
                    this._move("prev", event);
                    break;

                  case $.ui.keyCode.RIGHT:
                    this._move("next", event);
                    break;

                  case $.ui.keyCode.HOME:
                  case $.ui.keyCode.PAGE_UP:
                    this._move("first", event);
                    break;

                  case $.ui.keyCode.END:
                  case $.ui.keyCode.PAGE_DOWN:
                    this._move("last", event);
                    break;

                  default:
                    this.menu.trigger(event), preventDefault = !1;
                }
                preventDefault && event.preventDefault();
            }
        },
        _selectFocusedItem: function(event) {
            var item = this.menuItems.eq(this.focusIndex);
            item.hasClass("ui-state-disabled") || this._select(item.data("ui-selectmenu-item"), event);
        },
        _select: function(item, event) {
            var oldIndex = this.element[0].selectedIndex;
            // Change native select element
            this.element[0].selectedIndex = item.index, this._setText(this.buttonText, item.label), 
            this._setAria(item), this._trigger("select", event, {
                item: item
            }), item.index !== oldIndex && this._trigger("change", event, {
                item: item
            }), this.close(event);
        },
        _setAria: function(item) {
            var id = this.menuItems.eq(item.index).attr("id");
            this.button.attr({
                "aria-labelledby": id,
                "aria-activedescendant": id
            }), this.menu.attr("aria-activedescendant", id);
        },
        _setOption: function(key, value) {
            "icons" === key && this.button.find("span.ui-icon").removeClass(this.options.icons.button).addClass(value.button), 
            this._super(key, value), "appendTo" === key && this.menuWrap.appendTo(this._appendTo()), 
            "disabled" === key && (this.menuInstance.option("disabled", value), this.button.toggleClass("ui-state-disabled", value).attr("aria-disabled", value), 
            this.element.prop("disabled", value), value ? (this.button.attr("tabindex", -1), 
            this.close()) : this.button.attr("tabindex", 0)), "width" === key && this._resizeButton();
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            return element && (element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0)), 
            element && element[0] || (element = this.element.closest(".ui-front")), element.length || (element = this.document[0].body), 
            element;
        },
        _toggleAttr: function() {
            this.button.toggleClass("ui-corner-top", this.isOpen).toggleClass("ui-corner-all", !this.isOpen).attr("aria-expanded", this.isOpen), 
            this.menuWrap.toggleClass("ui-selectmenu-open", this.isOpen), this.menu.attr("aria-hidden", !this.isOpen);
        },
        _resizeButton: function() {
            var width = this.options.width;
            width || (width = this.element.show().outerWidth(), this.element.hide()), this.button.outerWidth(width);
        },
        _resizeMenu: function() {
            this.menu.outerWidth(Math.max(this.button.outerWidth(), // support: IE10
            // IE10 wraps long text (possibly a rounding bug)
            // so we add 1px to avoid the wrapping
            this.menu.width("").outerWidth() + 1));
        },
        _getCreateOptions: function() {
            return {
                disabled: this.element.prop("disabled")
            };
        },
        _parseOptions: function(options) {
            var data = [];
            options.each(function(index, item) {
                var option = $(item), optgroup = option.parent("optgroup");
                data.push({
                    element: option,
                    index: index,
                    value: option.val(),
                    label: option.text(),
                    optgroup: optgroup.attr("label") || "",
                    disabled: optgroup.prop("disabled") || option.prop("disabled")
                });
            }), this.items = data;
        },
        _destroy: function() {
            this.menuWrap.remove(), this.button.remove(), this.element.show(), this.element.removeUniqueId(), 
            this.label.attr("for", this.ids.element);
        }
    }), $.widget("ui.slider", $.ui.mouse, {
        version: "1.11.4",
        widgetEventPrefix: "slide",
        options: {
            animate: !1,
            distance: 0,
            max: 100,
            min: 0,
            orientation: "horizontal",
            range: !1,
            step: 1,
            value: 0,
            values: null,
            // callbacks
            change: null,
            slide: null,
            start: null,
            stop: null
        },
        // number of pages in a slider
        // (how many times can you page up/down to go through the whole range)
        numPages: 5,
        _create: function() {
            this._keySliding = !1, this._mouseSliding = !1, this._animateOff = !0, this._handleIndex = null, 
            this._detectOrientation(), this._mouseInit(), this._calculateNewMax(), this.element.addClass("ui-slider ui-slider-" + this.orientation + " ui-widget ui-widget-content ui-corner-all"), 
            this._refresh(), this._setOption("disabled", this.options.disabled), this._animateOff = !1;
        },
        _refresh: function() {
            this._createRange(), this._createHandles(), this._setupEvents(), this._refreshValue();
        },
        _createHandles: function() {
            var i, handleCount, options = this.options, existingHandles = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"), handle = "<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>", handles = [];
            for (handleCount = options.values && options.values.length || 1, existingHandles.length > handleCount && (existingHandles.slice(handleCount).remove(), 
            existingHandles = existingHandles.slice(0, handleCount)), i = existingHandles.length; handleCount > i; i++) handles.push(handle);
            this.handles = existingHandles.add($(handles.join("")).appendTo(this.element)), 
            this.handle = this.handles.eq(0), this.handles.each(function(i) {
                $(this).data("ui-slider-handle-index", i);
            });
        },
        _createRange: function() {
            var options = this.options, classes = "";
            options.range ? (options.range === !0 && (options.values ? options.values.length && 2 !== options.values.length ? options.values = [ options.values[0], options.values[0] ] : $.isArray(options.values) && (options.values = options.values.slice(0)) : options.values = [ this._valueMin(), this._valueMin() ]), 
            this.range && this.range.length ? this.range.removeClass("ui-slider-range-min ui-slider-range-max").css({
                left: "",
                bottom: ""
            }) : (this.range = $("<div></div>").appendTo(this.element), classes = "ui-slider-range ui-widget-header ui-corner-all"), 
            this.range.addClass(classes + ("min" === options.range || "max" === options.range ? " ui-slider-range-" + options.range : ""))) : (this.range && this.range.remove(), 
            this.range = null);
        },
        _setupEvents: function() {
            this._off(this.handles), this._on(this.handles, this._handleEvents), this._hoverable(this.handles), 
            this._focusable(this.handles);
        },
        _destroy: function() {
            this.handles.remove(), this.range && this.range.remove(), this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-widget ui-widget-content ui-corner-all"), 
            this._mouseDestroy();
        },
        _mouseCapture: function(event) {
            var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle, that = this, o = this.options;
            return o.disabled ? !1 : (this.elementSize = {
                width: this.element.outerWidth(),
                height: this.element.outerHeight()
            }, this.elementOffset = this.element.offset(), position = {
                x: event.pageX,
                y: event.pageY
            }, normValue = this._normValueFromMouse(position), distance = this._valueMax() - this._valueMin() + 1, 
            this.handles.each(function(i) {
                var thisDistance = Math.abs(normValue - that.values(i));
                (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) && (distance = thisDistance, 
                closestHandle = $(this), index = i);
            }), allowed = this._start(event, index), allowed === !1 ? !1 : (this._mouseSliding = !0, 
            this._handleIndex = index, closestHandle.addClass("ui-state-active").focus(), offset = closestHandle.offset(), 
            mouseOverHandle = !$(event.target).parents().addBack().is(".ui-slider-handle"), 
            this._clickOffset = mouseOverHandle ? {
                left: 0,
                top: 0
            } : {
                left: event.pageX - offset.left - closestHandle.width() / 2,
                top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) - (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) + (parseInt(closestHandle.css("marginTop"), 10) || 0)
            }, this.handles.hasClass("ui-state-hover") || this._slide(event, index, normValue), 
            this._animateOff = !0, !0));
        },
        _mouseStart: function() {
            return !0;
        },
        _mouseDrag: function(event) {
            var position = {
                x: event.pageX,
                y: event.pageY
            }, normValue = this._normValueFromMouse(position);
            return this._slide(event, this._handleIndex, normValue), !1;
        },
        _mouseStop: function(event) {
            return this.handles.removeClass("ui-state-active"), this._mouseSliding = !1, this._stop(event, this._handleIndex), 
            this._change(event, this._handleIndex), this._handleIndex = null, this._clickOffset = null, 
            this._animateOff = !1, !1;
        },
        _detectOrientation: function() {
            this.orientation = "vertical" === this.options.orientation ? "vertical" : "horizontal";
        },
        _normValueFromMouse: function(position) {
            var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;
            return "horizontal" === this.orientation ? (pixelTotal = this.elementSize.width, 
            pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)) : (pixelTotal = this.elementSize.height, 
            pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)), 
            percentMouse = pixelMouse / pixelTotal, percentMouse > 1 && (percentMouse = 1), 
            0 > percentMouse && (percentMouse = 0), "vertical" === this.orientation && (percentMouse = 1 - percentMouse), 
            valueTotal = this._valueMax() - this._valueMin(), valueMouse = this._valueMin() + percentMouse * valueTotal, 
            this._trimAlignValue(valueMouse);
        },
        _start: function(event, index) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value()
            };
            return this.options.values && this.options.values.length && (uiHash.value = this.values(index), 
            uiHash.values = this.values()), this._trigger("start", event, uiHash);
        },
        _slide: function(event, index, newVal) {
            var otherVal, newValues, allowed;
            this.options.values && this.options.values.length ? (otherVal = this.values(index ? 0 : 1), 
            2 === this.options.values.length && this.options.range === !0 && (0 === index && newVal > otherVal || 1 === index && otherVal > newVal) && (newVal = otherVal), 
            newVal !== this.values(index) && (newValues = this.values(), newValues[index] = newVal, 
            // A slide can be canceled by returning false from the slide callback
            allowed = this._trigger("slide", event, {
                handle: this.handles[index],
                value: newVal,
                values: newValues
            }), otherVal = this.values(index ? 0 : 1), allowed !== !1 && this.values(index, newVal))) : newVal !== this.value() && (// A slide can be canceled by returning false from the slide callback
            allowed = this._trigger("slide", event, {
                handle: this.handles[index],
                value: newVal
            }), allowed !== !1 && this.value(newVal));
        },
        _stop: function(event, index) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value()
            };
            this.options.values && this.options.values.length && (uiHash.value = this.values(index), 
            uiHash.values = this.values()), this._trigger("stop", event, uiHash);
        },
        _change: function(event, index) {
            if (!this._keySliding && !this._mouseSliding) {
                var uiHash = {
                    handle: this.handles[index],
                    value: this.value()
                };
                this.options.values && this.options.values.length && (uiHash.value = this.values(index), 
                uiHash.values = this.values()), //store the last changed value index for reference when handles overlap
                this._lastChangedValue = index, this._trigger("change", event, uiHash);
            }
        },
        value: function(newValue) {
            return arguments.length ? (this.options.value = this._trimAlignValue(newValue), 
            this._refreshValue(), void this._change(null, 0)) : this._value();
        },
        values: function(index, newValue) {
            var vals, newValues, i;
            if (arguments.length > 1) return this.options.values[index] = this._trimAlignValue(newValue), 
            this._refreshValue(), void this._change(null, index);
            if (!arguments.length) return this._values();
            if (!$.isArray(arguments[0])) return this.options.values && this.options.values.length ? this._values(index) : this.value();
            for (vals = this.options.values, newValues = arguments[0], i = 0; i < vals.length; i += 1) vals[i] = this._trimAlignValue(newValues[i]), 
            this._change(null, i);
            this._refreshValue();
        },
        _setOption: function(key, value) {
            var i, valsLength = 0;
            switch ("range" === key && this.options.range === !0 && ("min" === value ? (this.options.value = this._values(0), 
            this.options.values = null) : "max" === value && (this.options.value = this._values(this.options.values.length - 1), 
            this.options.values = null)), $.isArray(this.options.values) && (valsLength = this.options.values.length), 
            "disabled" === key && this.element.toggleClass("ui-state-disabled", !!value), this._super(key, value), 
            key) {
              case "orientation":
                this._detectOrientation(), this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation), 
                this._refreshValue(), // Reset positioning from previous orientation
                this.handles.css("horizontal" === value ? "bottom" : "left", "");
                break;

              case "value":
                this._animateOff = !0, this._refreshValue(), this._change(null, 0), this._animateOff = !1;
                break;

              case "values":
                for (this._animateOff = !0, this._refreshValue(), i = 0; valsLength > i; i += 1) this._change(null, i);
                this._animateOff = !1;
                break;

              case "step":
              case "min":
              case "max":
                this._animateOff = !0, this._calculateNewMax(), this._refreshValue(), this._animateOff = !1;
                break;

              case "range":
                this._animateOff = !0, this._refresh(), this._animateOff = !1;
            }
        },
        //internal value getter
        // _value() returns value trimmed by min and max, aligned by step
        _value: function() {
            var val = this.options.value;
            return val = this._trimAlignValue(val);
        },
        //internal values getter
        // _values() returns array of values trimmed by min and max, aligned by step
        // _values( index ) returns single value trimmed by min and max, aligned by step
        _values: function(index) {
            var val, vals, i;
            if (arguments.length) return val = this.options.values[index], val = this._trimAlignValue(val);
            if (this.options.values && this.options.values.length) {
                for (// .slice() creates a copy of the array
                // this copy gets trimmed by min and max and then returned
                vals = this.options.values.slice(), i = 0; i < vals.length; i += 1) vals[i] = this._trimAlignValue(vals[i]);
                return vals;
            }
            return [];
        },
        // returns the step-aligned value that val is closest to, between (inclusive) min and max
        _trimAlignValue: function(val) {
            if (val <= this._valueMin()) return this._valueMin();
            if (val >= this._valueMax()) return this._valueMax();
            var step = this.options.step > 0 ? this.options.step : 1, valModStep = (val - this._valueMin()) % step, alignValue = val - valModStep;
            // Since JavaScript has problems with large floats, round
            // the final value to 5 digits after the decimal point (see #4124)
            return 2 * Math.abs(valModStep) >= step && (alignValue += valModStep > 0 ? step : -step), 
            parseFloat(alignValue.toFixed(5));
        },
        _calculateNewMax: function() {
            var max = this.options.max, min = this._valueMin(), step = this.options.step, aboveMin = Math.floor(+(max - min).toFixed(this._precision()) / step) * step;
            max = aboveMin + min, this.max = parseFloat(max.toFixed(this._precision()));
        },
        _precision: function() {
            var precision = this._precisionOf(this.options.step);
            return null !== this.options.min && (precision = Math.max(precision, this._precisionOf(this.options.min))), 
            precision;
        },
        _precisionOf: function(num) {
            var str = num.toString(), decimal = str.indexOf(".");
            return -1 === decimal ? 0 : str.length - decimal - 1;
        },
        _valueMin: function() {
            return this.options.min;
        },
        _valueMax: function() {
            return this.max;
        },
        _refreshValue: function() {
            var lastValPercent, valPercent, value, valueMin, valueMax, oRange = this.options.range, o = this.options, that = this, animate = this._animateOff ? !1 : o.animate, _set = {};
            this.options.values && this.options.values.length ? this.handles.each(function(i) {
                valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100, 
                _set["horizontal" === that.orientation ? "left" : "bottom"] = valPercent + "%", 
                $(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate), that.options.range === !0 && ("horizontal" === that.orientation ? (0 === i && that.range.stop(1, 1)[animate ? "animate" : "css"]({
                    left: valPercent + "%"
                }, o.animate), 1 === i && that.range[animate ? "animate" : "css"]({
                    width: valPercent - lastValPercent + "%"
                }, {
                    queue: !1,
                    duration: o.animate
                })) : (0 === i && that.range.stop(1, 1)[animate ? "animate" : "css"]({
                    bottom: valPercent + "%"
                }, o.animate), 1 === i && that.range[animate ? "animate" : "css"]({
                    height: valPercent - lastValPercent + "%"
                }, {
                    queue: !1,
                    duration: o.animate
                }))), lastValPercent = valPercent;
            }) : (value = this.value(), valueMin = this._valueMin(), valueMax = this._valueMax(), 
            valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0, 
            _set["horizontal" === this.orientation ? "left" : "bottom"] = valPercent + "%", 
            this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate), "min" === oRange && "horizontal" === this.orientation && this.range.stop(1, 1)[animate ? "animate" : "css"]({
                width: valPercent + "%"
            }, o.animate), "max" === oRange && "horizontal" === this.orientation && this.range[animate ? "animate" : "css"]({
                width: 100 - valPercent + "%"
            }, {
                queue: !1,
                duration: o.animate
            }), "min" === oRange && "vertical" === this.orientation && this.range.stop(1, 1)[animate ? "animate" : "css"]({
                height: valPercent + "%"
            }, o.animate), "max" === oRange && "vertical" === this.orientation && this.range[animate ? "animate" : "css"]({
                height: 100 - valPercent + "%"
            }, {
                queue: !1,
                duration: o.animate
            }));
        },
        _handleEvents: {
            keydown: function(event) {
                var allowed, curVal, newVal, step, index = $(event.target).data("ui-slider-handle-index");
                switch (event.keyCode) {
                  case $.ui.keyCode.HOME:
                  case $.ui.keyCode.END:
                  case $.ui.keyCode.PAGE_UP:
                  case $.ui.keyCode.PAGE_DOWN:
                  case $.ui.keyCode.UP:
                  case $.ui.keyCode.RIGHT:
                  case $.ui.keyCode.DOWN:
                  case $.ui.keyCode.LEFT:
                    if (event.preventDefault(), !this._keySliding && (this._keySliding = !0, $(event.target).addClass("ui-state-active"), 
                    allowed = this._start(event, index), allowed === !1)) return;
                }
                switch (step = this.options.step, curVal = newVal = this.options.values && this.options.values.length ? this.values(index) : this.value(), 
                event.keyCode) {
                  case $.ui.keyCode.HOME:
                    newVal = this._valueMin();
                    break;

                  case $.ui.keyCode.END:
                    newVal = this._valueMax();
                    break;

                  case $.ui.keyCode.PAGE_UP:
                    newVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / this.numPages);
                    break;

                  case $.ui.keyCode.PAGE_DOWN:
                    newVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / this.numPages);
                    break;

                  case $.ui.keyCode.UP:
                  case $.ui.keyCode.RIGHT:
                    if (curVal === this._valueMax()) return;
                    newVal = this._trimAlignValue(curVal + step);
                    break;

                  case $.ui.keyCode.DOWN:
                  case $.ui.keyCode.LEFT:
                    if (curVal === this._valueMin()) return;
                    newVal = this._trimAlignValue(curVal - step);
                }
                this._slide(event, index, newVal);
            },
            keyup: function(event) {
                var index = $(event.target).data("ui-slider-handle-index");
                this._keySliding && (this._keySliding = !1, this._stop(event, index), this._change(event, index), 
                $(event.target).removeClass("ui-state-active"));
            }
        }
    }), $.widget("ui.sortable", $.ui.mouse, {
        version: "1.11.4",
        widgetEventPrefix: "sort",
        ready: !1,
        options: {
            appendTo: "parent",
            axis: !1,
            connectWith: !1,
            containment: !1,
            cursor: "auto",
            cursorAt: !1,
            dropOnEmpty: !0,
            forcePlaceholderSize: !1,
            forceHelperSize: !1,
            grid: !1,
            handle: !1,
            helper: "original",
            items: "> *",
            opacity: !1,
            placeholder: !1,
            revert: !1,
            scroll: !0,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: "default",
            tolerance: "intersect",
            zIndex: 1e3,
            // callbacks
            activate: null,
            beforeStop: null,
            change: null,
            deactivate: null,
            out: null,
            over: null,
            receive: null,
            remove: null,
            sort: null,
            start: null,
            stop: null,
            update: null
        },
        _isOverAxis: function(x, reference, size) {
            return x >= reference && reference + size > x;
        },
        _isFloating: function(item) {
            return /left|right/.test(item.css("float")) || /inline|table-cell/.test(item.css("display"));
        },
        _create: function() {
            this.containerCache = {}, this.element.addClass("ui-sortable"), //Get the items
            this.refresh(), //Let's determine the parent's offset
            this.offset = this.element.offset(), //Initialize mouse events for interaction
            this._mouseInit(), this._setHandleClassName(), //We're ready to go
            this.ready = !0;
        },
        _setOption: function(key, value) {
            this._super(key, value), "handle" === key && this._setHandleClassName();
        },
        _setHandleClassName: function() {
            this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle"), $.each(this.items, function() {
                (this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item).addClass("ui-sortable-handle");
            });
        },
        _destroy: function() {
            this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle"), 
            this._mouseDestroy();
            for (var i = this.items.length - 1; i >= 0; i--) this.items[i].item.removeData(this.widgetName + "-item");
            return this;
        },
        _mouseCapture: function(event, overrideHandle) {
            var currentItem = null, validHandle = !1, that = this;
            //We have to refresh the items data once first
            //Find out if the clicked node (or one of its parents) is a actual item in this.items
            return this.reverting ? !1 : this.options.disabled || "static" === this.options.type ? !1 : (this._refreshItems(event), 
            $(event.target).parents().each(function() {
                return $.data(this, that.widgetName + "-item") === that ? (currentItem = $(this), 
                !1) : void 0;
            }), $.data(event.target, that.widgetName + "-item") === that && (currentItem = $(event.target)), 
            currentItem && (!this.options.handle || overrideHandle || ($(this.options.handle, currentItem).find("*").addBack().each(function() {
                this === event.target && (validHandle = !0);
            }), validHandle)) ? (this.currentItem = currentItem, this._removeCurrentsFromItems(), 
            !0) : !1);
        },
        _mouseStart: function(event, overrideHandle, noActivation) {
            var i, body, o = this.options;
            //Post "activate" events to possible containers
            if (this.currentContainer = this, //We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
            this.refreshPositions(), //Create and append the visible helper
            this.helper = this._createHelper(event), //Cache the helper size
            this._cacheHelperProportions(), /*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */
            //Cache the margins of the original element
            this._cacheMargins(), //Get the next scrolling parent
            this.scrollParent = this.helper.scrollParent(), //The element's absolute position on the page minus margins
            this.offset = this.currentItem.offset(), this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            }, $.extend(this.offset, {
                click: {
                    //Where the click happened, relative to the element
                    left: event.pageX - this.offset.left,
                    top: event.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            }), // Only after we got the offset, we can change the helper's position to absolute
            // TODO: Still need to figure out a way to make relative sorting possible
            this.helper.css("position", "absolute"), this.cssPosition = this.helper.css("position"), 
            //Generate the original position
            this.originalPosition = this._generatePosition(event), this.originalPageX = event.pageX, 
            this.originalPageY = event.pageY, //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
            o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt), //Cache the former DOM position
            this.domPosition = {
                prev: this.currentItem.prev()[0],
                parent: this.currentItem.parent()[0]
            }, //If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
            this.helper[0] !== this.currentItem[0] && this.currentItem.hide(), //Create the placeholder
            this._createPlaceholder(), //Set a containment if given in the options
            o.containment && this._setContainment(), o.cursor && "auto" !== o.cursor && (// cursor option
            body = this.document.find("body"), // support: IE
            this.storedCursor = body.css("cursor"), body.css("cursor", o.cursor), this.storedStylesheet = $("<style>*{ cursor: " + o.cursor + " !important; }</style>").appendTo(body)), 
            o.opacity && (// opacity option
            this.helper.css("opacity") && (this._storedOpacity = this.helper.css("opacity")), 
            this.helper.css("opacity", o.opacity)), o.zIndex && (// zIndex option
            this.helper.css("zIndex") && (this._storedZIndex = this.helper.css("zIndex")), this.helper.css("zIndex", o.zIndex)), 
            //Prepare scrolling
            this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset()), 
            //Call callbacks
            this._trigger("start", event, this._uiHash()), //Recache the helper size
            this._preserveHelperProportions || this._cacheHelperProportions(), !noActivation) for (i = this.containers.length - 1; i >= 0; i--) this.containers[i]._trigger("activate", event, this._uiHash(this));
            //Execute the drag once - this causes the helper not to be visible before getting its correct position
            //Prepare possible droppables
            return $.ui.ddmanager && ($.ui.ddmanager.current = this), $.ui.ddmanager && !o.dropBehaviour && $.ui.ddmanager.prepareOffsets(this, event), 
            this.dragging = !0, this.helper.addClass("ui-sortable-helper"), this._mouseDrag(event), 
            !0;
        },
        _mouseDrag: function(event) {
            var i, item, itemElement, intersection, o = this.options, scrolled = !1;
            //Rearrange
            for (//Compute the helpers position
            this.position = this._generatePosition(event), this.positionAbs = this._convertPositionTo("absolute"), 
            this.lastPositionAbs || (this.lastPositionAbs = this.positionAbs), //Do scrolling
            this.options.scroll && (this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName ? (this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity ? this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed : event.pageY - this.overflowOffset.top < o.scrollSensitivity && (this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed), 
            this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity ? this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed : event.pageX - this.overflowOffset.left < o.scrollSensitivity && (this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed)) : (event.pageY - this.document.scrollTop() < o.scrollSensitivity ? scrolled = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed) : this.window.height() - (event.pageY - this.document.scrollTop()) < o.scrollSensitivity && (scrolled = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed)), 
            event.pageX - this.document.scrollLeft() < o.scrollSensitivity ? scrolled = this.document.scrollLeft(this.document.scrollLeft() - o.scrollSpeed) : this.window.width() - (event.pageX - this.document.scrollLeft()) < o.scrollSensitivity && (scrolled = this.document.scrollLeft(this.document.scrollLeft() + o.scrollSpeed))), 
            scrolled !== !1 && $.ui.ddmanager && !o.dropBehaviour && $.ui.ddmanager.prepareOffsets(this, event)), 
            //Regenerate the absolute position used for position checks
            this.positionAbs = this._convertPositionTo("absolute"), //Set the helper position
            this.options.axis && "y" === this.options.axis || (this.helper[0].style.left = this.position.left + "px"), 
            this.options.axis && "x" === this.options.axis || (this.helper[0].style.top = this.position.top + "px"), 
            i = this.items.length - 1; i >= 0; i--) if (//Cache variables and intersection, continue if no intersection
            item = this.items[i], itemElement = item.item[0], intersection = this._intersectsWithPointer(item), 
            intersection && item.instance === this.currentContainer && itemElement !== this.currentItem[0] && this.placeholder[1 === intersection ? "next" : "prev"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && ("semi-dynamic" === this.options.type ? !$.contains(this.element[0], itemElement) : !0)) {
                if (this.direction = 1 === intersection ? "down" : "up", "pointer" !== this.options.tolerance && !this._intersectsWithSides(item)) break;
                this._rearrange(event, item), this._trigger("change", event, this._uiHash());
                break;
            }
            //Post events to containers
            //Interconnect with droppables
            //Call callbacks
            return this._contactContainers(event), $.ui.ddmanager && $.ui.ddmanager.drag(this, event), 
            this._trigger("sort", event, this._uiHash()), this.lastPositionAbs = this.positionAbs, 
            !1;
        },
        _mouseStop: function(event, noPropagation) {
            if (event) {
                if (//If we are using droppables, inform the manager about the drop
                $.ui.ddmanager && !this.options.dropBehaviour && $.ui.ddmanager.drop(this, event), 
                this.options.revert) {
                    var that = this, cur = this.placeholder.offset(), axis = this.options.axis, animation = {};
                    axis && "x" !== axis || (animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft)), 
                    axis && "y" !== axis || (animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop)), 
                    this.reverting = !0, $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function() {
                        that._clear(event);
                    });
                } else this._clear(event, noPropagation);
                return !1;
            }
        },
        cancel: function() {
            if (this.dragging) {
                this._mouseUp({
                    target: null
                }), "original" === this.options.helper ? this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper") : this.currentItem.show();
                //Post deactivating events to containers
                for (var i = this.containers.length - 1; i >= 0; i--) this.containers[i]._trigger("deactivate", null, this._uiHash(this)), 
                this.containers[i].containerCache.over && (this.containers[i]._trigger("out", null, this._uiHash(this)), 
                this.containers[i].containerCache.over = 0);
            }
            //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
            return this.placeholder && (this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]), 
            "original" !== this.options.helper && this.helper && this.helper[0].parentNode && this.helper.remove(), 
            $.extend(this, {
                helper: null,
                dragging: !1,
                reverting: !1,
                _noFinalSort: null
            }), this.domPosition.prev ? $(this.domPosition.prev).after(this.currentItem) : $(this.domPosition.parent).prepend(this.currentItem)), 
            this;
        },
        serialize: function(o) {
            var items = this._getItemsAsjQuery(o && o.connected), str = [];
            return o = o || {}, $(items).each(function() {
                var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || /(.+)[\-=_](.+)/);
                res && str.push((o.key || res[1] + "[]") + "=" + (o.key && o.expression ? res[1] : res[2]));
            }), !str.length && o.key && str.push(o.key + "="), str.join("&");
        },
        toArray: function(o) {
            var items = this._getItemsAsjQuery(o && o.connected), ret = [];
            return o = o || {}, items.each(function() {
                ret.push($(o.item || this).attr(o.attribute || "id") || "");
            }), ret;
        },
        /* Be careful with the following core functions */
        _intersectsWith: function(item) {
            var x1 = this.positionAbs.left, x2 = x1 + this.helperProportions.width, y1 = this.positionAbs.top, y2 = y1 + this.helperProportions.height, l = item.left, r = l + item.width, t = item.top, b = t + item.height, dyClick = this.offset.click.top, dxClick = this.offset.click.left, isOverElementHeight = "x" === this.options.axis || y1 + dyClick > t && b > y1 + dyClick, isOverElementWidth = "y" === this.options.axis || x1 + dxClick > l && r > x1 + dxClick, isOverElement = isOverElementHeight && isOverElementWidth;
            // Right Half
            // Left Half
            // Bottom Half
            return "pointer" === this.options.tolerance || this.options.forcePointerForContainers || "pointer" !== this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"] ? isOverElement : l < x1 + this.helperProportions.width / 2 && x2 - this.helperProportions.width / 2 < r && t < y1 + this.helperProportions.height / 2 && y2 - this.helperProportions.height / 2 < b;
        },
        _intersectsWithPointer: function(item) {
            var isOverElementHeight = "x" === this.options.axis || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height), isOverElementWidth = "y" === this.options.axis || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width), isOverElement = isOverElementHeight && isOverElementWidth, verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
            return isOverElement ? this.floating ? horizontalDirection && "right" === horizontalDirection || "down" === verticalDirection ? 2 : 1 : verticalDirection && ("down" === verticalDirection ? 2 : 1) : !1;
        },
        _intersectsWithSides: function(item) {
            var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height), isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width), verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
            return this.floating && horizontalDirection ? "right" === horizontalDirection && isOverRightHalf || "left" === horizontalDirection && !isOverRightHalf : verticalDirection && ("down" === verticalDirection && isOverBottomHalf || "up" === verticalDirection && !isOverBottomHalf);
        },
        _getDragVerticalDirection: function() {
            var delta = this.positionAbs.top - this.lastPositionAbs.top;
            return 0 !== delta && (delta > 0 ? "down" : "up");
        },
        _getDragHorizontalDirection: function() {
            var delta = this.positionAbs.left - this.lastPositionAbs.left;
            return 0 !== delta && (delta > 0 ? "right" : "left");
        },
        refresh: function(event) {
            return this._refreshItems(event), this._setHandleClassName(), this.refreshPositions(), 
            this;
        },
        _connectWith: function() {
            var options = this.options;
            return options.connectWith.constructor === String ? [ options.connectWith ] : options.connectWith;
        },
        _getItemsAsjQuery: function(connected) {
            function addItems() {
                items.push(this);
            }
            var i, j, cur, inst, items = [], queries = [], connectWith = this._connectWith();
            if (connectWith && connected) for (i = connectWith.length - 1; i >= 0; i--) for (cur = $(connectWith[i], this.document[0]), 
            j = cur.length - 1; j >= 0; j--) inst = $.data(cur[j], this.widgetFullName), inst && inst !== this && !inst.options.disabled && queries.push([ $.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst ]);
            for (queries.push([ $.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                options: this.options,
                item: this.currentItem
            }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this ]), 
            i = queries.length - 1; i >= 0; i--) queries[i][0].each(addItems);
            return $(items);
        },
        _removeCurrentsFromItems: function() {
            var list = this.currentItem.find(":data(" + this.widgetName + "-item)");
            this.items = $.grep(this.items, function(item) {
                for (var j = 0; j < list.length; j++) if (list[j] === item.item[0]) return !1;
                return !0;
            });
        },
        _refreshItems: function(event) {
            this.items = [], this.containers = [ this ];
            var i, j, cur, inst, targetData, _queries, item, queriesLength, items = this.items, queries = [ [ $.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {
                item: this.currentItem
            }) : $(this.options.items, this.element), this ] ], connectWith = this._connectWith();
            if (connectWith && this.ready) //Shouldn't be run the first time through due to massive slow-down
            for (i = connectWith.length - 1; i >= 0; i--) for (cur = $(connectWith[i], this.document[0]), 
            j = cur.length - 1; j >= 0; j--) inst = $.data(cur[j], this.widgetFullName), inst && inst !== this && !inst.options.disabled && (queries.push([ $.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {
                item: this.currentItem
            }) : $(inst.options.items, inst.element), inst ]), this.containers.push(inst));
            for (i = queries.length - 1; i >= 0; i--) for (targetData = queries[i][1], _queries = queries[i][0], 
            j = 0, queriesLength = _queries.length; queriesLength > j; j++) item = $(_queries[j]), 
            item.data(this.widgetName + "-item", targetData), // Data for target checking (mouse manager)
            items.push({
                item: item,
                instance: targetData,
                width: 0,
                height: 0,
                left: 0,
                top: 0
            });
        },
        refreshPositions: function(fast) {
            // Determine whether items are being displayed horizontally
            this.floating = this.items.length ? "x" === this.options.axis || this._isFloating(this.items[0].item) : !1, 
            //This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
            this.offsetParent && this.helper && (this.offset.parent = this._getParentOffset());
            var i, item, t, p;
            for (i = this.items.length - 1; i >= 0; i--) item = this.items[i], //We ignore calculating positions of all connected containers when we're not over them
            item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0] || (t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item, 
            fast || (item.width = t.outerWidth(), item.height = t.outerHeight()), p = t.offset(), 
            item.left = p.left, item.top = p.top);
            if (this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this); else for (i = this.containers.length - 1; i >= 0; i--) p = this.containers[i].element.offset(), 
            this.containers[i].containerCache.left = p.left, this.containers[i].containerCache.top = p.top, 
            this.containers[i].containerCache.width = this.containers[i].element.outerWidth(), 
            this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
            return this;
        },
        _createPlaceholder: function(that) {
            that = that || this;
            var className, o = that.options;
            o.placeholder && o.placeholder.constructor !== String || (className = o.placeholder, 
            o.placeholder = {
                element: function() {
                    var nodeName = that.currentItem[0].nodeName.toLowerCase(), element = $("<" + nodeName + ">", that.document[0]).addClass(className || that.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper");
                    return "tbody" === nodeName ? that._createTrPlaceholder(that.currentItem.find("tr").eq(0), $("<tr>", that.document[0]).appendTo(element)) : "tr" === nodeName ? that._createTrPlaceholder(that.currentItem, element) : "img" === nodeName && element.attr("src", that.currentItem.attr("src")), 
                    className || element.css("visibility", "hidden"), element;
                },
                update: function(container, p) {
                    // 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
                    // 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
                    (!className || o.forcePlaceholderSize) && (//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
                    p.height() || p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop") || 0, 10) - parseInt(that.currentItem.css("paddingBottom") || 0, 10)), 
                    p.width() || p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft") || 0, 10) - parseInt(that.currentItem.css("paddingRight") || 0, 10)));
                }
            }), //Create the placeholder
            that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem)), 
            //Append it after the actual current item
            that.currentItem.after(that.placeholder), //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
            o.placeholder.update(that, that.placeholder);
        },
        _createTrPlaceholder: function(sourceTr, targetTr) {
            var that = this;
            sourceTr.children().each(function() {
                $("<td>&#160;</td>", that.document[0]).attr("colspan", $(this).attr("colspan") || 1).appendTo(targetTr);
            });
        },
        _contactContainers: function(event) {
            var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis, innermostContainer = null, innermostIndex = null;
            // get innermost container that intersects with item
            for (i = this.containers.length - 1; i >= 0; i--) // never consider a container that's located within the item itself
            if (!$.contains(this.currentItem[0], this.containers[i].element[0])) if (this._intersectsWith(this.containers[i].containerCache)) {
                // if we've already found a container and it's more "inner" than this, then continue
                if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) continue;
                innermostContainer = this.containers[i], innermostIndex = i;
            } else // container doesn't intersect. trigger "out" event if necessary
            this.containers[i].containerCache.over && (this.containers[i]._trigger("out", event, this._uiHash(this)), 
            this.containers[i].containerCache.over = 0);
            // if no intersecting containers found, return
            if (innermostContainer) // move the item into the container if it's not there already
            if (1 === this.containers.length) this.containers[innermostIndex].containerCache.over || (this.containers[innermostIndex]._trigger("over", event, this._uiHash(this)), 
            this.containers[innermostIndex].containerCache.over = 1); else {
                for (//When entering a new container, we will find the item with the least distance and append our item near it
                dist = 1e4, itemWithLeastDistance = null, floating = innermostContainer.floating || this._isFloating(this.currentItem), 
                posProperty = floating ? "left" : "top", sizeProperty = floating ? "width" : "height", 
                axis = floating ? "clientX" : "clientY", j = this.items.length - 1; j >= 0; j--) $.contains(this.containers[innermostIndex].element[0], this.items[j].item[0]) && this.items[j].item[0] !== this.currentItem[0] && (cur = this.items[j].item.offset()[posProperty], 
                nearBottom = !1, event[axis] - cur > this.items[j][sizeProperty] / 2 && (nearBottom = !0), 
                Math.abs(event[axis] - cur) < dist && (dist = Math.abs(event[axis] - cur), itemWithLeastDistance = this.items[j], 
                this.direction = nearBottom ? "up" : "down"));
                //Check if dropOnEmpty is enabled
                if (!itemWithLeastDistance && !this.options.dropOnEmpty) return;
                if (this.currentContainer === this.containers[innermostIndex]) return void (this.currentContainer.containerCache.over || (this.containers[innermostIndex]._trigger("over", event, this._uiHash()), 
                this.currentContainer.containerCache.over = 1));
                itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, !0) : this._rearrange(event, null, this.containers[innermostIndex].element, !0), 
                this._trigger("change", event, this._uiHash()), this.containers[innermostIndex]._trigger("change", event, this._uiHash(this)), 
                this.currentContainer = this.containers[innermostIndex], //Update the placeholder
                this.options.placeholder.update(this.currentContainer, this.placeholder), this.containers[innermostIndex]._trigger("over", event, this._uiHash(this)), 
                this.containers[innermostIndex].containerCache.over = 1;
            }
        },
        _createHelper: function(event) {
            var o = this.options, helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [ event, this.currentItem ])) : "clone" === o.helper ? this.currentItem.clone() : this.currentItem;
            //Add the helper to the DOM if that didn't happen already
            return helper.parents("body").length || $("parent" !== o.appendTo ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]), 
            helper[0] === this.currentItem[0] && (this._storedCSS = {
                width: this.currentItem[0].style.width,
                height: this.currentItem[0].style.height,
                position: this.currentItem.css("position"),
                top: this.currentItem.css("top"),
                left: this.currentItem.css("left")
            }), (!helper[0].style.width || o.forceHelperSize) && helper.width(this.currentItem.width()), 
            (!helper[0].style.height || o.forceHelperSize) && helper.height(this.currentItem.height()), 
            helper;
        },
        _adjustOffsetFromHelper: function(obj) {
            "string" == typeof obj && (obj = obj.split(" ")), $.isArray(obj) && (obj = {
                left: +obj[0],
                top: +obj[1] || 0
            }), "left" in obj && (this.offset.click.left = obj.left + this.margins.left), "right" in obj && (this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left), 
            "top" in obj && (this.offset.click.top = obj.top + this.margins.top), "bottom" in obj && (this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top);
        },
        _getParentOffset: function() {
            //Get the offsetParent and cache its position
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();
            // This is a special case where we need to modify a offset calculated on start, since the following happened:
            // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
            // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
            //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
            // This needs to be actually done for all browsers, since pageX/pageY includes this information
            // with an ugly IE fix
            return "absolute" === this.cssPosition && this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0]) && (po.left += this.scrollParent.scrollLeft(), 
            po.top += this.scrollParent.scrollTop()), (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && $.ui.ie) && (po = {
                top: 0,
                left: 0
            }), {
                top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            };
        },
        _getRelativeOffset: function() {
            if ("relative" === this.cssPosition) {
                var p = this.currentItem.position();
                return {
                    top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                };
            }
            return {
                top: 0,
                left: 0
            };
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
                top: parseInt(this.currentItem.css("marginTop"), 10) || 0
            };
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            };
        },
        _setContainment: function() {
            var ce, co, over, o = this.options;
            "parent" === o.containment && (o.containment = this.helper[0].parentNode), ("document" === o.containment || "window" === o.containment) && (this.containment = [ 0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, "document" === o.containment ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, ("document" === o.containment ? this.document.width() : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ]), 
            /^(document|window|parent)$/.test(o.containment) || (ce = $(o.containment)[0], co = $(o.containment).offset(), 
            over = "hidden" !== $(ce).css("overflow"), this.containment = [ co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top ]);
        },
        _convertPositionTo: function(d, pos) {
            pos || (pos = this.position);
            var mod = "absolute" === d ? 1 : -1, scroll = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
            return {
                top: pos.top + // The absolute mouse position
                this.offset.relative.top * mod + // Only for relative positioned nodes: Relative offset from element to offset parent
                this.offset.parent.top * mod - // The offsetParent's offset without borders (offset + border)
                ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,
                left: pos.left + // The absolute mouse position
                this.offset.relative.left * mod + // Only for relative positioned nodes: Relative offset from element to offset parent
                this.offset.parent.left * mod - // The offsetParent's offset without borders (offset + border)
                ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod
            };
        },
        _generatePosition: function(event) {
            var top, left, o = this.options, pageX = event.pageX, pageY = event.pageY, scroll = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
            // This is another very weird special case that only happens for relative elements:
            // 1. If the css position is relative
            // 2. and the scroll parent is the document or similar to the offset parent
            // we have to refresh the relative offset during the scroll so there are no jumps
            /*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */
            //If we are not dragging yet, we won't check for options
            return "relative" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0] || (this.offset.relative = this._getRelativeOffset()), 
            this.originalPosition && (this.containment && (event.pageX - this.offset.click.left < this.containment[0] && (pageX = this.containment[0] + this.offset.click.left), 
            event.pageY - this.offset.click.top < this.containment[1] && (pageY = this.containment[1] + this.offset.click.top), 
            event.pageX - this.offset.click.left > this.containment[2] && (pageX = this.containment[2] + this.offset.click.left), 
            event.pageY - this.offset.click.top > this.containment[3] && (pageY = this.containment[3] + this.offset.click.top)), 
            o.grid && (top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1], 
            pageY = this.containment ? top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3] ? top : top - this.offset.click.top >= this.containment[1] ? top - o.grid[1] : top + o.grid[1] : top, 
            left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0], 
            pageX = this.containment ? left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2] ? left : left - this.offset.click.left >= this.containment[0] ? left - o.grid[0] : left + o.grid[0] : left)), 
            {
                top: pageY - // The absolute mouse position
                this.offset.click.top - // Click offset (relative to the element)
                this.offset.relative.top - // Only for relative positioned nodes: Relative offset from element to offset parent
                this.offset.parent.top + (// The offsetParent's offset without borders (offset + border)
                "fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),
                left: pageX - // The absolute mouse position
                this.offset.click.left - // Click offset (relative to the element)
                this.offset.relative.left - // Only for relative positioned nodes: Relative offset from element to offset parent
                this.offset.parent.left + (// The offsetParent's offset without borders (offset + border)
                "fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())
            };
        },
        _rearrange: function(event, i, a, hardRefresh) {
            a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], "down" === this.direction ? i.item[0] : i.item[0].nextSibling), 
            //Various things done here to improve the performance:
            // 1. we create a setTimeout, that calls refreshPositions
            // 2. on the instance, we have a counter variable, that get's higher after every append
            // 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
            // 4. this lets only the last addition to the timeout stack through
            this.counter = this.counter ? ++this.counter : 1;
            var counter = this.counter;
            this._delay(function() {
                counter === this.counter && this.refreshPositions(!hardRefresh);
            });
        },
        _clear: function(event, noPropagation) {
            //Post events to containers
            function delayEvent(type, instance, container) {
                return function(event) {
                    container._trigger(type, event, instance._uiHash(instance));
                };
            }
            this.reverting = !1;
            // We delay all events that have to be triggered to after the point where the placeholder has been removed and
            // everything else normalized again
            var i, delayedTriggers = [];
            if (// We first have to update the dom position of the actual currentItem
            // Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
            !this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem), 
            this._noFinalSort = null, this.helper[0] === this.currentItem[0]) {
                for (i in this._storedCSS) ("auto" === this._storedCSS[i] || "static" === this._storedCSS[i]) && (this._storedCSS[i] = "");
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
            } else this.currentItem.show();
            for (this.fromOutside && !noPropagation && delayedTriggers.push(function(event) {
                this._trigger("receive", event, this._uiHash(this.fromOutside));
            }), !this.fromOutside && this.domPosition.prev === this.currentItem.prev().not(".ui-sortable-helper")[0] && this.domPosition.parent === this.currentItem.parent()[0] || noPropagation || delayedTriggers.push(function(event) {
                this._trigger("update", event, this._uiHash());
            }), // Check if the items Container has Changed and trigger appropriate
            // events.
            this !== this.currentContainer && (noPropagation || (delayedTriggers.push(function(event) {
                this._trigger("remove", event, this._uiHash());
            }), delayedTriggers.push(function(c) {
                return function(event) {
                    c._trigger("receive", event, this._uiHash(this));
                };
            }.call(this, this.currentContainer)), delayedTriggers.push(function(c) {
                return function(event) {
                    c._trigger("update", event, this._uiHash(this));
                };
            }.call(this, this.currentContainer)))), i = this.containers.length - 1; i >= 0; i--) noPropagation || delayedTriggers.push(delayEvent("deactivate", this, this.containers[i])), 
            this.containers[i].containerCache.over && (delayedTriggers.push(delayEvent("out", this, this.containers[i])), 
            this.containers[i].containerCache.over = 0);
            if (//Do what was originally in plugins
            this.storedCursor && (this.document.find("body").css("cursor", this.storedCursor), 
            this.storedStylesheet.remove()), this._storedOpacity && this.helper.css("opacity", this._storedOpacity), 
            this._storedZIndex && this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex), 
            this.dragging = !1, noPropagation || this._trigger("beforeStop", event, this._uiHash()), 
            //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]), this.cancelHelperRemoval || (this.helper[0] !== this.currentItem[0] && this.helper.remove(), 
            this.helper = null), !noPropagation) {
                for (i = 0; i < delayedTriggers.length; i++) delayedTriggers[i].call(this, event);
                //Trigger all delayed events
                this._trigger("stop", event, this._uiHash());
            }
            return this.fromOutside = !1, !this.cancelHelperRemoval;
        },
        _trigger: function() {
            $.Widget.prototype._trigger.apply(this, arguments) === !1 && this.cancel();
        },
        _uiHash: function(_inst) {
            var inst = _inst || this;
            return {
                helper: inst.helper,
                placeholder: inst.placeholder || $([]),
                position: inst.position,
                originalPosition: inst.originalPosition,
                offset: inst.positionAbs,
                item: inst.currentItem,
                sender: _inst ? _inst.element : null
            };
        }
    }), $.widget("ui.spinner", {
        version: "1.11.4",
        defaultElement: "<input>",
        widgetEventPrefix: "spin",
        options: {
            culture: null,
            icons: {
                down: "ui-icon-triangle-1-s",
                up: "ui-icon-triangle-1-n"
            },
            incremental: !0,
            max: null,
            min: null,
            numberFormat: null,
            page: 10,
            step: 1,
            change: null,
            spin: null,
            start: null,
            stop: null
        },
        _create: function() {
            // handle string values that need to be parsed
            this._setOption("max", this.options.max), this._setOption("min", this.options.min), 
            this._setOption("step", this.options.step), // Only format if there is a value, prevents the field from being marked
            // as invalid in Firefox, see #9573.
            "" !== this.value() && // Format the value, but don't constrain.
            this._value(this.element.val(), !0), this._draw(), this._on(this._events), this._refresh(), 
            // turning off autocomplete prevents the browser from remembering the
            // value when navigating through history, so we re-enable autocomplete
            // if the page is unloaded before the widget is destroyed. #7790
            this._on(this.window, {
                beforeunload: function() {
                    this.element.removeAttr("autocomplete");
                }
            });
        },
        _getCreateOptions: function() {
            var options = {}, element = this.element;
            return $.each([ "min", "max", "step" ], function(i, option) {
                var value = element.attr(option);
                void 0 !== value && value.length && (options[option] = value);
            }), options;
        },
        _events: {
            keydown: function(event) {
                this._start(event) && this._keydown(event) && event.preventDefault();
            },
            keyup: "_stop",
            focus: function() {
                this.previous = this.element.val();
            },
            blur: function(event) {
                return this.cancelBlur ? void delete this.cancelBlur : (this._stop(), this._refresh(), 
                void (this.previous !== this.element.val() && this._trigger("change", event)));
            },
            mousewheel: function(event, delta) {
                if (delta) {
                    if (!this.spinning && !this._start(event)) return !1;
                    this._spin((delta > 0 ? 1 : -1) * this.options.step, event), clearTimeout(this.mousewheelTimer), 
                    this.mousewheelTimer = this._delay(function() {
                        this.spinning && this._stop(event);
                    }, 100), event.preventDefault();
                }
            },
            "mousedown .ui-spinner-button": function(event) {
                function checkFocus() {
                    var isActive = this.element[0] === this.document[0].activeElement;
                    isActive || (this.element.focus(), this.previous = previous, // support: IE
                    // IE sets focus asynchronously, so we need to check if focus
                    // moved off of the input because the user clicked on the button.
                    this._delay(function() {
                        this.previous = previous;
                    }));
                }
                var previous;
                // We never want the buttons to have focus; whenever the user is
                // interacting with the spinner, the focus should be on the input.
                // If the input is focused then this.previous is properly set from
                // when the input first received focus. If the input is not focused
                // then we need to set this.previous based on the value before spinning.
                previous = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val(), 
                // ensure focus is on (or stays on) the text field
                event.preventDefault(), checkFocus.call(this), // support: IE
                // IE doesn't prevent moving focus even with event.preventDefault()
                // so we set a flag to know when we should ignore the blur event
                // and check (again) if focus moved off of the input.
                this.cancelBlur = !0, this._delay(function() {
                    delete this.cancelBlur, checkFocus.call(this);
                }), this._start(event) !== !1 && this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
            },
            "mouseup .ui-spinner-button": "_stop",
            "mouseenter .ui-spinner-button": function(event) {
                // button will add ui-state-active if mouse was down while mouseleave and kept down
                // button will add ui-state-active if mouse was down while mouseleave and kept down
                return $(event.currentTarget).hasClass("ui-state-active") ? this._start(event) === !1 ? !1 : void this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event) : void 0;
            },
            // TODO: do we really want to consider this a stop?
            // shouldn't we just stop the repeater and wait until mouseup before
            // we trigger the stop event?
            "mouseleave .ui-spinner-button": "_stop"
        },
        _draw: function() {
            var uiSpinner = this.uiSpinner = this.element.addClass("ui-spinner-input").attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
            this.element.attr("role", "spinbutton"), // button bindings
            this.buttons = uiSpinner.find(".ui-spinner-button").attr("tabIndex", -1).button().removeClass("ui-corner-all"), 
            // IE 6 doesn't understand height: 50% for the buttons
            // unless the wrapper has an explicit height
            this.buttons.height() > Math.ceil(.5 * uiSpinner.height()) && uiSpinner.height() > 0 && uiSpinner.height(uiSpinner.height()), 
            // disable spinner if element was already disabled
            this.options.disabled && this.disable();
        },
        _keydown: function(event) {
            var options = this.options, keyCode = $.ui.keyCode;
            switch (event.keyCode) {
              case keyCode.UP:
                return this._repeat(null, 1, event), !0;

              case keyCode.DOWN:
                return this._repeat(null, -1, event), !0;

              case keyCode.PAGE_UP:
                return this._repeat(null, options.page, event), !0;

              case keyCode.PAGE_DOWN:
                return this._repeat(null, -options.page, event), !0;
            }
            return !1;
        },
        _uiSpinnerHtml: function() {
            return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
        },
        _buttonHtml: function() {
            return "<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon " + this.options.icons.up + "'>&#9650;</span></a><a class='ui-spinner-button ui-spinner-down ui-corner-br'><span class='ui-icon " + this.options.icons.down + "'>&#9660;</span></a>";
        },
        _start: function(event) {
            return this.spinning || this._trigger("start", event) !== !1 ? (this.counter || (this.counter = 1), 
            this.spinning = !0, !0) : !1;
        },
        _repeat: function(i, steps, event) {
            i = i || 500, clearTimeout(this.timer), this.timer = this._delay(function() {
                this._repeat(40, steps, event);
            }, i), this._spin(steps * this.options.step, event);
        },
        _spin: function(step, event) {
            var value = this.value() || 0;
            this.counter || (this.counter = 1), value = this._adjustValue(value + step * this._increment(this.counter)), 
            this.spinning && this._trigger("spin", event, {
                value: value
            }) === !1 || (this._value(value), this.counter++);
        },
        _increment: function(i) {
            var incremental = this.options.incremental;
            return incremental ? $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 5e4 - i * i / 500 + 17 * i / 200 + 1) : 1;
        },
        _precision: function() {
            var precision = this._precisionOf(this.options.step);
            return null !== this.options.min && (precision = Math.max(precision, this._precisionOf(this.options.min))), 
            precision;
        },
        _precisionOf: function(num) {
            var str = num.toString(), decimal = str.indexOf(".");
            return -1 === decimal ? 0 : str.length - decimal - 1;
        },
        _adjustValue: function(value) {
            var base, aboveMin, options = this.options;
            // clamp the value
            // make sure we're at a valid step
            // - find out where we are relative to the base (min or 0)
            // - round to the nearest step
            // - rounding is based on 0, so adjust back to our base
            // fix precision from bad JS floating point math
            // clamp the value
            return base = null !== options.min ? options.min : 0, aboveMin = value - base, aboveMin = Math.round(aboveMin / options.step) * options.step, 
            value = base + aboveMin, value = parseFloat(value.toFixed(this._precision())), null !== options.max && value > options.max ? options.max : null !== options.min && value < options.min ? options.min : value;
        },
        _stop: function(event) {
            this.spinning && (clearTimeout(this.timer), clearTimeout(this.mousewheelTimer), 
            this.counter = 0, this.spinning = !1, this._trigger("stop", event));
        },
        _setOption: function(key, value) {
            if ("culture" === key || "numberFormat" === key) {
                var prevValue = this._parse(this.element.val());
                return this.options[key] = value, void this.element.val(this._format(prevValue));
            }
            ("max" === key || "min" === key || "step" === key) && "string" == typeof value && (value = this._parse(value)), 
            "icons" === key && (this.buttons.first().find(".ui-icon").removeClass(this.options.icons.up).addClass(value.up), 
            this.buttons.last().find(".ui-icon").removeClass(this.options.icons.down).addClass(value.down)), 
            this._super(key, value), "disabled" === key && (this.widget().toggleClass("ui-state-disabled", !!value), 
            this.element.prop("disabled", !!value), this.buttons.button(value ? "disable" : "enable"));
        },
        _setOptions: spinner_modifier(function(options) {
            this._super(options);
        }),
        _parse: function(val) {
            return "string" == typeof val && "" !== val && (val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val), 
            "" === val || isNaN(val) ? null : val;
        },
        _format: function(value) {
            return "" === value ? "" : window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;
        },
        _refresh: function() {
            this.element.attr({
                "aria-valuemin": this.options.min,
                "aria-valuemax": this.options.max,
                // TODO: what should we do with values that can't be parsed?
                "aria-valuenow": this._parse(this.element.val())
            });
        },
        isValid: function() {
            var value = this.value();
            // null is invalid
            // null is invalid
            return null === value ? !1 : value === this._adjustValue(value);
        },
        // update the value without triggering change
        _value: function(value, allowAny) {
            var parsed;
            "" !== value && (parsed = this._parse(value), null !== parsed && (allowAny || (parsed = this._adjustValue(parsed)), 
            value = this._format(parsed))), this.element.val(value), this._refresh();
        },
        _destroy: function() {
            this.element.removeClass("ui-spinner-input").prop("disabled", !1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"), 
            this.uiSpinner.replaceWith(this.element);
        },
        stepUp: spinner_modifier(function(steps) {
            this._stepUp(steps);
        }),
        _stepUp: function(steps) {
            this._start() && (this._spin((steps || 1) * this.options.step), this._stop());
        },
        stepDown: spinner_modifier(function(steps) {
            this._stepDown(steps);
        }),
        _stepDown: function(steps) {
            this._start() && (this._spin((steps || 1) * -this.options.step), this._stop());
        },
        pageUp: spinner_modifier(function(pages) {
            this._stepUp((pages || 1) * this.options.page);
        }),
        pageDown: spinner_modifier(function(pages) {
            this._stepDown((pages || 1) * this.options.page);
        }),
        value: function(newVal) {
            return arguments.length ? void spinner_modifier(this._value).call(this, newVal) : this._parse(this.element.val());
        },
        widget: function() {
            return this.uiSpinner;
        }
    }), $.widget("ui.tabs", {
        version: "1.11.4",
        delay: 300,
        options: {
            active: null,
            collapsible: !1,
            event: "click",
            heightStyle: "content",
            hide: null,
            show: null,
            // callbacks
            activate: null,
            beforeActivate: null,
            beforeLoad: null,
            load: null
        },
        _isLocal: function() {
            var rhash = /#.*$/;
            return function(anchor) {
                var anchorUrl, locationUrl;
                // support: IE7
                // IE7 doesn't normalize the href property when set via script (#9317)
                anchor = anchor.cloneNode(!1), anchorUrl = anchor.href.replace(rhash, ""), locationUrl = location.href.replace(rhash, "");
                // decoding may throw an error if the URL isn't UTF-8 (#9518)
                try {
                    anchorUrl = decodeURIComponent(anchorUrl);
                } catch (error) {}
                try {
                    locationUrl = decodeURIComponent(locationUrl);
                } catch (error) {}
                return anchor.hash.length > 1 && anchorUrl === locationUrl;
            };
        }(),
        _create: function() {
            var that = this, options = this.options;
            this.running = !1, this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible", options.collapsible), 
            this._processTabs(), options.active = this._initialActive(), // Take disabling tabs via class attribute from HTML
            // into account and update option properly.
            $.isArray(options.disabled) && (options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"), function(li) {
                return that.tabs.index(li);
            }))).sort()), // check for length avoids error when initializing empty list
            this.options.active !== !1 && this.anchors.length ? this.active = this._findActive(options.active) : this.active = $(), 
            this._refresh(), this.active.length && this.load(options.active);
        },
        _initialActive: function() {
            var active = this.options.active, collapsible = this.options.collapsible, locationHash = location.hash.substring(1);
            // check the fragment identifier in the URL
            // check for a tab marked active via a class
            // no active tab, set to false
            // handle numbers: negative, out of range
            // don't allow collapsible: false and active: false
            return null === active && (locationHash && this.tabs.each(function(i, tab) {
                return $(tab).attr("aria-controls") === locationHash ? (active = i, !1) : void 0;
            }), null === active && (active = this.tabs.index(this.tabs.filter(".ui-tabs-active"))), 
            (null === active || -1 === active) && (active = this.tabs.length ? 0 : !1)), active !== !1 && (active = this.tabs.index(this.tabs.eq(active)), 
            -1 === active && (active = collapsible ? !1 : 0)), !collapsible && active === !1 && this.anchors.length && (active = 0), 
            active;
        },
        _getCreateEventData: function() {
            return {
                tab: this.active,
                panel: this.active.length ? this._getPanelForTab(this.active) : $()
            };
        },
        _tabKeydown: function(event) {
            var focusedTab = $(this.document[0].activeElement).closest("li"), selectedIndex = this.tabs.index(focusedTab), goingForward = !0;
            if (!this._handlePageNav(event)) {
                switch (event.keyCode) {
                  case $.ui.keyCode.RIGHT:
                  case $.ui.keyCode.DOWN:
                    selectedIndex++;
                    break;

                  case $.ui.keyCode.UP:
                  case $.ui.keyCode.LEFT:
                    goingForward = !1, selectedIndex--;
                    break;

                  case $.ui.keyCode.END:
                    selectedIndex = this.anchors.length - 1;
                    break;

                  case $.ui.keyCode.HOME:
                    selectedIndex = 0;
                    break;

                  case $.ui.keyCode.SPACE:
                    // Activate only, no collapsing
                    return event.preventDefault(), clearTimeout(this.activating), void this._activate(selectedIndex);

                  case $.ui.keyCode.ENTER:
                    // Toggle (cancel delayed activation, allow collapsing)
                    // Determine if we should collapse or activate
                    return event.preventDefault(), clearTimeout(this.activating), void this._activate(selectedIndex === this.options.active ? !1 : selectedIndex);

                  default:
                    return;
                }
                // Focus the appropriate tab, based on which key was pressed
                event.preventDefault(), clearTimeout(this.activating), selectedIndex = this._focusNextTab(selectedIndex, goingForward), 
                // Navigating with control/command key will prevent automatic activation
                event.ctrlKey || event.metaKey || (// Update aria-selected immediately so that AT think the tab is already selected.
                // Otherwise AT may confuse the user by stating that they need to activate the tab,
                // but the tab will already be activated by the time the announcement finishes.
                focusedTab.attr("aria-selected", "false"), this.tabs.eq(selectedIndex).attr("aria-selected", "true"), 
                this.activating = this._delay(function() {
                    this.option("active", selectedIndex);
                }, this.delay));
            }
        },
        _panelKeydown: function(event) {
            this._handlePageNav(event) || // Ctrl+up moves focus to the current tab
            event.ctrlKey && event.keyCode === $.ui.keyCode.UP && (event.preventDefault(), this.active.focus());
        },
        // Alt+page up/down moves focus to the previous/next tab (and activates)
        _handlePageNav: function(event) {
            return event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ? (this._activate(this._focusNextTab(this.options.active - 1, !1)), 
            !0) : event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ? (this._activate(this._focusNextTab(this.options.active + 1, !0)), 
            !0) : void 0;
        },
        _findNextTab: function(index, goingForward) {
            function constrain() {
                return index > lastTabIndex && (index = 0), 0 > index && (index = lastTabIndex), 
                index;
            }
            for (var lastTabIndex = this.tabs.length - 1; -1 !== $.inArray(constrain(), this.options.disabled); ) index = goingForward ? index + 1 : index - 1;
            return index;
        },
        _focusNextTab: function(index, goingForward) {
            return index = this._findNextTab(index, goingForward), this.tabs.eq(index).focus(), 
            index;
        },
        _setOption: function(key, value) {
            // _activate() will handle invalid values and update this.options
            // don't use the widget factory's disabled handling
            // Setting collapsible: false while collapsed; open first panel
            return "active" === key ? void this._activate(value) : "disabled" === key ? void this._setupDisabled(value) : (this._super(key, value), 
            "collapsible" === key && (this.element.toggleClass("ui-tabs-collapsible", value), 
            value || this.options.active !== !1 || this._activate(0)), "event" === key && this._setupEvents(value), 
            void ("heightStyle" === key && this._setupHeightStyle(value)));
        },
        _sanitizeSelector: function(hash) {
            return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
        },
        refresh: function() {
            var options = this.options, lis = this.tablist.children(":has(a[href])");
            // get disabled tabs from class attribute from HTML
            // this will get converted to a boolean if needed in _refresh()
            options.disabled = $.map(lis.filter(".ui-state-disabled"), function(tab) {
                return lis.index(tab);
            }), this._processTabs(), // was collapsed or no tabs
            options.active !== !1 && this.anchors.length ? this.active.length && !$.contains(this.tablist[0], this.active[0]) ? // all remaining tabs are disabled
            this.tabs.length === options.disabled.length ? (options.active = !1, this.active = $()) : this._activate(this._findNextTab(Math.max(0, options.active - 1), !1)) : // make sure active index is correct
            options.active = this.tabs.index(this.active) : (options.active = !1, this.active = $()), 
            this._refresh();
        },
        _refresh: function() {
            this._setupDisabled(this.options.disabled), this._setupEvents(this.options.event), 
            this._setupHeightStyle(this.options.heightStyle), this.tabs.not(this.active).attr({
                "aria-selected": "false",
                "aria-expanded": "false",
                tabIndex: -1
            }), this.panels.not(this._getPanelForTab(this.active)).hide().attr({
                "aria-hidden": "true"
            }), // Make sure one tab is in the tab order
            this.active.length ? (this.active.addClass("ui-tabs-active ui-state-active").attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            }), this._getPanelForTab(this.active).show().attr({
                "aria-hidden": "false"
            })) : this.tabs.eq(0).attr("tabIndex", 0);
        },
        _processTabs: function() {
            var that = this, prevTabs = this.tabs, prevAnchors = this.anchors, prevPanels = this.panels;
            this.tablist = this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role", "tablist").delegate("> li", "mousedown" + this.eventNamespace, function(event) {
                $(this).is(".ui-state-disabled") && event.preventDefault();
            }).delegate(".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
                $(this).closest("li").is(".ui-state-disabled") && this.blur();
            }), this.tabs = this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({
                role: "tab",
                tabIndex: -1
            }), this.anchors = this.tabs.map(function() {
                return $("a", this)[0];
            }).addClass("ui-tabs-anchor").attr({
                role: "presentation",
                tabIndex: -1
            }), this.panels = $(), this.anchors.each(function(i, anchor) {
                var selector, panel, panelId, anchorId = $(anchor).uniqueId().attr("id"), tab = $(anchor).closest("li"), originalAriaControls = tab.attr("aria-controls");
                // inline tab
                that._isLocal(anchor) ? (selector = anchor.hash, panelId = selector.substring(1), 
                panel = that.element.find(that._sanitizeSelector(selector))) : (// If the tab doesn't already have aria-controls,
                // generate an id by using a throw-away element
                panelId = tab.attr("aria-controls") || $({}).uniqueId()[0].id, selector = "#" + panelId, 
                panel = that.element.find(selector), panel.length || (panel = that._createPanel(panelId), 
                panel.insertAfter(that.panels[i - 1] || that.tablist)), panel.attr("aria-live", "polite")), 
                panel.length && (that.panels = that.panels.add(panel)), originalAriaControls && tab.data("ui-tabs-aria-controls", originalAriaControls), 
                tab.attr({
                    "aria-controls": panelId,
                    "aria-labelledby": anchorId
                }), panel.attr("aria-labelledby", anchorId);
            }), this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role", "tabpanel"), 
            // Avoid memory leaks (#10056)
            prevTabs && (this._off(prevTabs.not(this.tabs)), this._off(prevAnchors.not(this.anchors)), 
            this._off(prevPanels.not(this.panels)));
        },
        // allow overriding how to find the list for rare usage scenarios (#7715)
        _getList: function() {
            return this.tablist || this.element.find("ol,ul").eq(0);
        },
        _createPanel: function(id) {
            return $("<div>").attr("id", id).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", !0);
        },
        _setupDisabled: function(disabled) {
            $.isArray(disabled) && (disabled.length ? disabled.length === this.anchors.length && (disabled = !0) : disabled = !1);
            // disable tabs
            for (var li, i = 0; li = this.tabs[i]; i++) disabled === !0 || -1 !== $.inArray(i, disabled) ? $(li).addClass("ui-state-disabled").attr("aria-disabled", "true") : $(li).removeClass("ui-state-disabled").removeAttr("aria-disabled");
            this.options.disabled = disabled;
        },
        _setupEvents: function(event) {
            var events = {};
            event && $.each(event.split(" "), function(index, eventName) {
                events[eventName] = "_eventHandler";
            }), this._off(this.anchors.add(this.tabs).add(this.panels)), // Always prevent the default action, even when disabled
            this._on(!0, this.anchors, {
                click: function(event) {
                    event.preventDefault();
                }
            }), this._on(this.anchors, events), this._on(this.tabs, {
                keydown: "_tabKeydown"
            }), this._on(this.panels, {
                keydown: "_panelKeydown"
            }), this._focusable(this.tabs), this._hoverable(this.tabs);
        },
        _setupHeightStyle: function(heightStyle) {
            var maxHeight, parent = this.element.parent();
            "fill" === heightStyle ? (maxHeight = parent.height(), maxHeight -= this.element.outerHeight() - this.element.height(), 
            this.element.siblings(":visible").each(function() {
                var elem = $(this), position = elem.css("position");
                "absolute" !== position && "fixed" !== position && (maxHeight -= elem.outerHeight(!0));
            }), this.element.children().not(this.panels).each(function() {
                maxHeight -= $(this).outerHeight(!0);
            }), this.panels.each(function() {
                $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
            }).css("overflow", "auto")) : "auto" === heightStyle && (maxHeight = 0, this.panels.each(function() {
                maxHeight = Math.max(maxHeight, $(this).height("").height());
            }).height(maxHeight));
        },
        _eventHandler: function(event) {
            var options = this.options, active = this.active, anchor = $(event.currentTarget), tab = anchor.closest("li"), clickedIsActive = tab[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : this._getPanelForTab(tab), toHide = active.length ? this._getPanelForTab(active) : $(), eventData = {
                oldTab: active,
                oldPanel: toHide,
                newTab: collapsing ? $() : tab,
                newPanel: toShow
            };
            event.preventDefault(), tab.hasClass("ui-state-disabled") || // tab is already loading
            tab.hasClass("ui-tabs-loading") || // can't switch durning an animation
            this.running || // click on active header, but not collapsible
            clickedIsActive && !options.collapsible || // allow canceling activation
            this._trigger("beforeActivate", event, eventData) === !1 || (options.active = collapsing ? !1 : this.tabs.index(tab), 
            this.active = clickedIsActive ? $() : tab, this.xhr && this.xhr.abort(), toHide.length || toShow.length || $.error("jQuery UI Tabs: Mismatching fragment identifier."), 
            toShow.length && this.load(this.tabs.index(tab), event), this._toggle(event, eventData));
        },
        // handles show/hide for selecting tabs
        _toggle: function(event, eventData) {
            function complete() {
                that.running = !1, that._trigger("activate", event, eventData);
            }
            function show() {
                eventData.newTab.closest("li").addClass("ui-tabs-active ui-state-active"), toShow.length && that.options.show ? that._show(toShow, that.options.show, complete) : (toShow.show(), 
                complete());
            }
            var that = this, toShow = eventData.newPanel, toHide = eventData.oldPanel;
            this.running = !0, // start out by hiding, then showing, then completing
            toHide.length && this.options.hide ? this._hide(toHide, this.options.hide, function() {
                eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"), show();
            }) : (eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"), 
            toHide.hide(), show()), toHide.attr("aria-hidden", "true"), eventData.oldTab.attr({
                "aria-selected": "false",
                "aria-expanded": "false"
            }), // If we're switching tabs, remove the old tab from the tab order.
            // If we're opening from collapsed state, remove the previous tab from the tab order.
            // If we're collapsing, then keep the collapsing tab in the tab order.
            toShow.length && toHide.length ? eventData.oldTab.attr("tabIndex", -1) : toShow.length && this.tabs.filter(function() {
                return 0 === $(this).attr("tabIndex");
            }).attr("tabIndex", -1), toShow.attr("aria-hidden", "false"), eventData.newTab.attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            });
        },
        _activate: function(index) {
            var anchor, active = this._findActive(index);
            // trying to activate the already active panel
            active[0] !== this.active[0] && (// trying to collapse, simulate a click on the current active header
            active.length || (active = this.active), anchor = active.find(".ui-tabs-anchor")[0], 
            this._eventHandler({
                target: anchor,
                currentTarget: anchor,
                preventDefault: $.noop
            }));
        },
        _findActive: function(index) {
            return index === !1 ? $() : this.tabs.eq(index);
        },
        _getIndex: function(index) {
            // meta-function to give users option to provide a href string instead of a numerical index.
            return "string" == typeof index && (index = this.anchors.index(this.anchors.filter("[href$='" + index + "']"))), 
            index;
        },
        _destroy: function() {
            this.xhr && this.xhr.abort(), this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible"), 
            this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role"), 
            this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId(), 
            this.tablist.unbind(this.eventNamespace), this.tabs.add(this.panels).each(function() {
                $.data(this, "ui-tabs-destroy") ? $(this).remove() : $(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role");
            }), this.tabs.each(function() {
                var li = $(this), prev = li.data("ui-tabs-aria-controls");
                prev ? li.attr("aria-controls", prev).removeData("ui-tabs-aria-controls") : li.removeAttr("aria-controls");
            }), this.panels.show(), "content" !== this.options.heightStyle && this.panels.css("height", "");
        },
        enable: function(index) {
            var disabled = this.options.disabled;
            disabled !== !1 && (void 0 === index ? disabled = !1 : (index = this._getIndex(index), 
            disabled = $.isArray(disabled) ? $.map(disabled, function(num) {
                return num !== index ? num : null;
            }) : $.map(this.tabs, function(li, num) {
                return num !== index ? num : null;
            })), this._setupDisabled(disabled));
        },
        disable: function(index) {
            var disabled = this.options.disabled;
            if (disabled !== !0) {
                if (void 0 === index) disabled = !0; else {
                    if (index = this._getIndex(index), -1 !== $.inArray(index, disabled)) return;
                    disabled = $.isArray(disabled) ? $.merge([ index ], disabled).sort() : [ index ];
                }
                this._setupDisabled(disabled);
            }
        },
        load: function(index, event) {
            index = this._getIndex(index);
            var that = this, tab = this.tabs.eq(index), anchor = tab.find(".ui-tabs-anchor"), panel = this._getPanelForTab(tab), eventData = {
                tab: tab,
                panel: panel
            }, complete = function(jqXHR, status) {
                "abort" === status && that.panels.stop(!1, !0), tab.removeClass("ui-tabs-loading"), 
                panel.removeAttr("aria-busy"), jqXHR === that.xhr && delete that.xhr;
            };
            // not remote
            this._isLocal(anchor[0]) || (this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData)), 
            // support: jQuery <1.8
            // jQuery <1.8 returns false if the request is canceled in beforeSend,
            // but as of 1.8, $.ajax() always returns a jqXHR object.
            this.xhr && "canceled" !== this.xhr.statusText && (tab.addClass("ui-tabs-loading"), 
            panel.attr("aria-busy", "true"), this.xhr.done(function(response, status, jqXHR) {
                // support: jQuery <1.8
                // http://bugs.jquery.com/ticket/11778
                setTimeout(function() {
                    panel.html(response), that._trigger("load", event, eventData), complete(jqXHR, status);
                }, 1);
            }).fail(function(jqXHR, status) {
                // support: jQuery <1.8
                // http://bugs.jquery.com/ticket/11778
                setTimeout(function() {
                    complete(jqXHR, status);
                }, 1);
            })));
        },
        _ajaxSettings: function(anchor, event, eventData) {
            var that = this;
            return {
                url: anchor.attr("href"),
                beforeSend: function(jqXHR, settings) {
                    return that._trigger("beforeLoad", event, $.extend({
                        jqXHR: jqXHR,
                        ajaxSettings: settings
                    }, eventData));
                }
            };
        },
        _getPanelForTab: function(tab) {
            var id = $(tab).attr("aria-controls");
            return this.element.find(this._sanitizeSelector("#" + id));
        }
    }), $.widget("ui.tooltip", {
        version: "1.11.4",
        options: {
            content: function() {
                // support: IE<9, Opera in jQuery <1.7
                // .text() can't accept undefined, so coerce to a string
                var title = $(this).attr("title") || "";
                // Escape title, since we're going from an attribute to raw HTML
                return $("<a>").text(title).html();
            },
            hide: !0,
            // Disabled elements have inconsistent behavior across browsers (#8661)
            items: "[title]:not([disabled])",
            position: {
                my: "left top+15",
                at: "left bottom",
                collision: "flipfit flip"
            },
            show: !0,
            tooltipClass: null,
            track: !1,
            // callbacks
            close: null,
            open: null
        },
        _addDescribedBy: function(elem, id) {
            var describedby = (elem.attr("aria-describedby") || "").split(/\s+/);
            describedby.push(id), elem.data("ui-tooltip-id", id).attr("aria-describedby", $.trim(describedby.join(" ")));
        },
        _removeDescribedBy: function(elem) {
            var id = elem.data("ui-tooltip-id"), describedby = (elem.attr("aria-describedby") || "").split(/\s+/), index = $.inArray(id, describedby);
            -1 !== index && describedby.splice(index, 1), elem.removeData("ui-tooltip-id"), 
            describedby = $.trim(describedby.join(" ")), describedby ? elem.attr("aria-describedby", describedby) : elem.removeAttr("aria-describedby");
        },
        _create: function() {
            this._on({
                mouseover: "open",
                focusin: "open"
            }), // IDs of generated tooltips, needed for destroy
            this.tooltips = {}, // IDs of parent tooltips where we removed the title attribute
            this.parents = {}, this.options.disabled && this._disable(), // Append the aria-live region so tooltips announce correctly
            this.liveRegion = $("<div>").attr({
                role: "log",
                "aria-live": "assertive",
                "aria-relevant": "additions"
            }).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body);
        },
        _setOption: function(key, value) {
            var that = this;
            return "disabled" === key ? (this[value ? "_disable" : "_enable"](), void (this.options[key] = value)) : (this._super(key, value), 
            void ("content" === key && $.each(this.tooltips, function(id, tooltipData) {
                that._updateContent(tooltipData.element);
            })));
        },
        _disable: function() {
            var that = this;
            // close open tooltips
            $.each(this.tooltips, function(id, tooltipData) {
                var event = $.Event("blur");
                event.target = event.currentTarget = tooltipData.element[0], that.close(event, !0);
            }), // remove title attributes to prevent native tooltips
            this.element.find(this.options.items).addBack().each(function() {
                var element = $(this);
                element.is("[title]") && element.data("ui-tooltip-title", element.attr("title")).removeAttr("title");
            });
        },
        _enable: function() {
            // restore title attributes
            this.element.find(this.options.items).addBack().each(function() {
                var element = $(this);
                element.data("ui-tooltip-title") && element.attr("title", element.data("ui-tooltip-title"));
            });
        },
        open: function(event) {
            var that = this, target = $(event ? event.target : this.element).closest(this.options.items);
            // No element to show a tooltip for or the tooltip is already open
            target.length && !target.data("ui-tooltip-id") && (target.attr("title") && target.data("ui-tooltip-title", target.attr("title")), 
            target.data("ui-tooltip-open", !0), // kill parent tooltips, custom or native, for hover
            event && "mouseover" === event.type && target.parents().each(function() {
                var blurEvent, parent = $(this);
                parent.data("ui-tooltip-open") && (blurEvent = $.Event("blur"), blurEvent.target = blurEvent.currentTarget = this, 
                that.close(blurEvent, !0)), parent.attr("title") && (parent.uniqueId(), that.parents[this.id] = {
                    element: this,
                    title: parent.attr("title")
                }, parent.attr("title", ""));
            }), this._registerCloseHandlers(event, target), this._updateContent(target, event));
        },
        _updateContent: function(target, event) {
            var content, contentOption = this.options.content, that = this, eventType = event ? event.type : null;
            return "string" == typeof contentOption ? this._open(event, target, contentOption) : (content = contentOption.call(target[0], function(response) {
                // IE may instantly serve a cached response for ajax requests
                // delay this call to _open so the other call to _open runs first
                that._delay(function() {
                    // Ignore async response if tooltip was closed already
                    target.data("ui-tooltip-open") && (// jQuery creates a special event for focusin when it doesn't
                    // exist natively. To improve performance, the native event
                    // object is reused and the type is changed. Therefore, we can't
                    // rely on the type being correct after the event finished
                    // bubbling, so we set it back to the previous value. (#8740)
                    event && (event.type = eventType), this._open(event, target, response));
                });
            }), void (content && this._open(event, target, content)));
        },
        _open: function(event, target, content) {
            function position(event) {
                positionOption.of = event, tooltip.is(":hidden") || tooltip.position(positionOption);
            }
            var tooltipData, tooltip, delayedShow, a11yContent, positionOption = $.extend({}, this.options.position);
            if (content) {
                if (// Content can be updated multiple times. If the tooltip already
                // exists, then just update the content and bail.
                tooltipData = this._find(target)) return void tooltipData.tooltip.find(".ui-tooltip-content").html(content);
                // if we have a title, clear it to prevent the native tooltip
                // we have to check first to avoid defining a title if none exists
                // (we don't want to cause an element to start matching [title])
                //
                // We use removeAttr only for key events, to allow IE to export the correct
                // accessible attributes. For mouse events, set to empty string to avoid
                // native tooltip showing up (happens only when removing inside mouseover).
                target.is("[title]") && (event && "mouseover" === event.type ? target.attr("title", "") : target.removeAttr("title")), 
                tooltipData = this._tooltip(target), tooltip = tooltipData.tooltip, this._addDescribedBy(target, tooltip.attr("id")), 
                tooltip.find(".ui-tooltip-content").html(content), // Support: Voiceover on OS X, JAWS on IE <= 9
                // JAWS announces deletions even when aria-relevant="additions"
                // Voiceover will sometimes re-read the entire log region's contents from the beginning
                this.liveRegion.children().hide(), content.clone ? (a11yContent = content.clone(), 
                a11yContent.removeAttr("id").find("[id]").removeAttr("id")) : a11yContent = content, 
                $("<div>").html(a11yContent).appendTo(this.liveRegion), this.options.track && event && /^mouse/.test(event.type) ? (this._on(this.document, {
                    mousemove: position
                }), // trigger once to override element-relative positioning
                position(event)) : tooltip.position($.extend({
                    of: target
                }, this.options.position)), tooltip.hide(), this._show(tooltip, this.options.show), 
                // Handle tracking tooltips that are shown with a delay (#8644). As soon
                // as the tooltip is visible, position the tooltip using the most recent
                // event.
                this.options.show && this.options.show.delay && (delayedShow = this.delayedShow = setInterval(function() {
                    tooltip.is(":visible") && (position(positionOption.of), clearInterval(delayedShow));
                }, $.fx.interval)), this._trigger("open", event, {
                    tooltip: tooltip
                });
            }
        },
        _registerCloseHandlers: function(event, target) {
            var events = {
                keyup: function(event) {
                    if (event.keyCode === $.ui.keyCode.ESCAPE) {
                        var fakeEvent = $.Event(event);
                        fakeEvent.currentTarget = target[0], this.close(fakeEvent, !0);
                    }
                }
            };
            // Only bind remove handler for delegated targets. Non-delegated
            // tooltips will handle this in destroy.
            target[0] !== this.element[0] && (events.remove = function() {
                this._removeTooltip(this._find(target).tooltip);
            }), event && "mouseover" !== event.type || (events.mouseleave = "close"), event && "focusin" !== event.type || (events.focusout = "close"), 
            this._on(!0, target, events);
        },
        close: function(event) {
            var tooltip, that = this, target = $(event ? event.currentTarget : this.element), tooltipData = this._find(target);
            // The tooltip may already be closed
            // The tooltip may already be closed
            // disabling closes the tooltip, so we need to track when we're closing
            // to avoid an infinite loop in case the tooltip becomes disabled on close
            // Clear the interval for delayed tracking tooltips
            // only set title if we had one before (see comment in _open())
            // If the title attribute has changed since open(), don't restore
            // Remove 'remove' binding only on delegated targets
            // We set ui-tooltip-open immediately upon open (in open()), but only set the
            // additional data once there's actually content to show (in _open()). So even if the
            // tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in
            // the period between open() and _open().
            return tooltipData ? (tooltip = tooltipData.tooltip, void (tooltipData.closing || (clearInterval(this.delayedShow), 
            target.data("ui-tooltip-title") && !target.attr("title") && target.attr("title", target.data("ui-tooltip-title")), 
            this._removeDescribedBy(target), tooltipData.hiding = !0, tooltip.stop(!0), this._hide(tooltip, this.options.hide, function() {
                that._removeTooltip($(this));
            }), target.removeData("ui-tooltip-open"), this._off(target, "mouseleave focusout keyup"), 
            target[0] !== this.element[0] && this._off(target, "remove"), this._off(this.document, "mousemove"), 
            event && "mouseleave" === event.type && $.each(this.parents, function(id, parent) {
                $(parent.element).attr("title", parent.title), delete that.parents[id];
            }), tooltipData.closing = !0, this._trigger("close", event, {
                tooltip: tooltip
            }), tooltipData.hiding || (tooltipData.closing = !1)))) : void target.removeData("ui-tooltip-open");
        },
        _tooltip: function(element) {
            var tooltip = $("<div>").attr("role", "tooltip").addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content " + (this.options.tooltipClass || "")), id = tooltip.uniqueId().attr("id");
            return $("<div>").addClass("ui-tooltip-content").appendTo(tooltip), tooltip.appendTo(this.document[0].body), 
            this.tooltips[id] = {
                element: element,
                tooltip: tooltip
            };
        },
        _find: function(target) {
            var id = target.data("ui-tooltip-id");
            return id ? this.tooltips[id] : null;
        },
        _removeTooltip: function(tooltip) {
            tooltip.remove(), delete this.tooltips[tooltip.attr("id")];
        },
        _destroy: function() {
            var that = this;
            // close open tooltips
            $.each(this.tooltips, function(id, tooltipData) {
                // Delegate to close method to handle common cleanup
                var event = $.Event("blur"), element = tooltipData.element;
                event.target = event.currentTarget = element[0], that.close(event, !0), // Remove immediately; destroying an open tooltip doesn't use the
                // hide animation
                $("#" + id).remove(), // Restore the title
                element.data("ui-tooltip-title") && (// If the title attribute has changed since open(), don't restore
                element.attr("title") || element.attr("title", element.data("ui-tooltip-title")), 
                element.removeData("ui-tooltip-title"));
            }), this.liveRegion.remove();
        }
    });
}), /* http://keith-wood.name/countdown.html
   Countdown for jQuery v2.0.2.
   Written by Keith Wood (kbwood{at}iinet.com.au) January 2008.
   Available under the MIT (http://keith-wood.name/licence.html) license. 
   Please attribute the author if you use it. */
function($) {
    // Hide scope, no $ conflict
    var pluginName = "countdown", Y = 0, O = 1, W = 2, D = 3, H = 4, M = 5, S = 6;
    // Seconds
    /** Create the countdown plugin.
		<p>Sets an element to show the time remaining until a given instant.</p>
		<p>Expects HTML like:</p>
		<pre>&lt;div>&lt;/div></pre>
		<p>Provide inline configuration like:</p>
		<pre>&lt;div data-countdown="name: 'value'">&lt;/div></pre>
	 	@module Countdown
		@augments JQPlugin
		@example $(selector).countdown({until: +300}) */
    $.JQPlugin.createPlugin({
        /** The name of the plugin. */
        name: pluginName,
        /** Countdown expiry callback.
			Triggered when the countdown expires.
			@callback expiryCallback */
        /** Countdown server synchronisation callback.
			Triggered when the countdown is initialised.
			@callback serverSyncCallback
			@return {Date} The current date/time on the server as expressed in the local timezone. */
        /** Countdown tick callback.
			Triggered on every <code>tickInterval</code> ticks of the countdown.
			@callback tickCallback
			@param periods {number[]} The breakdown by period (years, months, weeks, days,
					hours, minutes, seconds) of the time remaining/passed. */
        /** Countdown which labels callback.
			Triggered when the countdown is being display to determine which set of labels
			(<code>labels</code>, <code>labels1</code>, ...) are to be used for the current period value.
			@callback whichLabelsCallback
			@param num {number} The current period value.
			@return {number} The suffix for the label set to use. */
        /** Default settings for the plugin.
			@property until {Date|number|string} The date/time to count down to, or number of seconds
						offset from now, or string of amounts and units for offset(s) from now:
						'Y' years, 'O' months, 'W' weeks, 'D' days, 'H' hours, 'M' minutes, 'S' seconds.
			@example until: new Date(2013, 12-1, 25, 13, 30)
 until: +300
 until: '+1O -2D'
			@property [since] {Date|number|string} The date/time to count up from, or
						number of seconds offset from now, or string for unit offset(s):
						'Y' years, 'O' months, 'W' weeks, 'D' days, 'H' hours, 'M' minutes, 'S' seconds.
			@example since: new Date(2013, 1-1, 1)
 since: -300
 since: '-1O +2D'
			@property [timezone=null] {number} The timezone (hours or minutes from GMT) for the target times,
						or null for client local timezone.
			@example timezone: +10
 timezone: -60
			@property [serverSync=null] {serverSyncCallback} A function to retrieve the current server time
						for synchronisation.
			@property [format='dHMS'] {string} The format for display - upper case for always, lower case only if non-zero,
						'Y' years, 'O' months, 'W' weeks, 'D' days, 'H' hours, 'M' minutes, 'S' seconds.
			@property [layout=''] {string} Build your own layout for the countdown.
			@example layout: '{d<}{dn} {dl}{d>} {hnn}:{mnn}:{snn}'
			@property [compact=false] {boolean} True to display in a compact format, false for an expanded one.
			@property [padZeroes=false] {boolean} True to add leading zeroes
			@property [significant=0] {number} The number of periods with non-zero values to show, zero for all.
			@property [description=''] {string} The description displayed for the countdown.
			@property [expiryUrl=''] {string} A URL to load upon expiry, replacing the current page.
			@property [expiryText=''] {string} Text to display upon expiry, replacing the countdown. This may be HTML.
			@property [alwaysExpire=false] {boolean} True to trigger <code>onExpiry</code> even if target time has passed.
			@property [onExpiry=null] {expiryCallback} Callback when the countdown expires -
						receives no parameters and <code>this</code> is the containing division.
			@example onExpiry: function() {
	...
 }
			@property [onTick=null] {tickCallback} Callback when the countdown is updated -
						receives <code>number[7]</code> being the breakdown by period
						(years, months, weeks, days, hours, minutes, seconds - based on
						<code>format</code>) and <code>this</code> is the containing division.
			@example onTick: function(periods) {
 	var secs = $.countdown.periodsToSeconds(periods);
 	if (secs < 300) { // Last five minutes
		...
 	}
 }
			@property [tickInterval=1] {number} The interval (seconds) between <code>onTick</code> callbacks. */
        defaultOptions: {
            until: null,
            since: null,
            timezone: null,
            serverSync: null,
            format: "dHMS",
            layout: "",
            compact: !1,
            padZeroes: !1,
            significant: 0,
            description: "",
            expiryUrl: "",
            expiryText: "",
            alwaysExpire: !1,
            onExpiry: null,
            onTick: null,
            tickInterval: 1
        },
        /** Localisations for the plugin.
			Entries are objects indexed by the language code ('' being the default US/English).
			Each object has the following attributes.
			@property [labels=['Years','Months','Weeks','Days','Hours','Minutes','Seconds']] {string[]}
						The display texts for the counter periods.
			@property [labels1=['Year','Month','Week','Day','Hour','Minute','Second']] {string[]}
						The display texts for the counter periods if they have a value of 1.
						Add other <code>labels<em>n</em></code> attributes as necessary to
						cater for other numeric idiosyncrasies of the localisation.
			@property [compactLabels=['y','m','w','d']] {string[]} The compact texts for the counter periods.
			@property [whichLabels=null] {whichLabelsCallback} A function to determine which
						<code>labels<em>n</em></code> to use.
			@example whichLabels: function(num) {
	return (num > 1 ? 0 : 1);
 }
			@property [digits=['0','1',...,'9']] {number[]} The digits to display (0-9).
			@property [timeSeparator=':'] {string} Separator for time periods in the compact layout.
			@property [isRTL=false] {boolean} True for right-to-left languages, false for left-to-right. */
        regionalOptions: {
            // Available regional settings, indexed by language/country code
            "": {
                // Default regional settings - English/US
                labels: [ "Years", "Months", "Weeks", "Days", "Hours", "Minutes", "Seconds" ],
                labels1: [ "Year", "Month", "Week", "Day", "Hour", "Minute", "Second" ],
                compactLabels: [ "y", "m", "w", "d" ],
                whichLabels: null,
                digits: [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ],
                timeSeparator: ":",
                isRTL: !1
            }
        },
        /** Names of getter methods - those that can't be chained. */
        _getters: [ "getTimes" ],
        /* Class name for the right-to-left marker. */
        _rtlClass: pluginName + "-rtl",
        /* Class name for the countdown section marker. */
        _sectionClass: pluginName + "-section",
        /* Class name for the period amount marker. */
        _amountClass: pluginName + "-amount",
        /* Class name for the period name marker. */
        _periodClass: pluginName + "-period",
        /* Class name for the countdown row marker. */
        _rowClass: pluginName + "-row",
        /* Class name for the holding countdown marker. */
        _holdingClass: pluginName + "-holding",
        /* Class name for the showing countdown marker. */
        _showClass: pluginName + "-show",
        /* Class name for the description marker. */
        _descrClass: pluginName + "-descr",
        /* List of currently active countdown elements. */
        _timerElems: [],
        /** Additional setup for the countdown.
			Apply default localisations.
			Create the timer. */
        _init: function() {
            // Shared timer for all countdowns
            function timerCallBack(timestamp) {
                var drawStart = 1e12 > timestamp ? // New HTML5 high resolution timer
                perfAvail ? performance.now() + performance.timing.navigationStart : now() : // Integer milliseconds since unix epoch
                timestamp || now();
                drawStart - animationStartTime >= 1e3 && (self._updateElems(), animationStartTime = drawStart), 
                requestAnimationFrame(timerCallBack);
            }
            var self = this;
            this._super(), this._serverSyncs = [];
            var now = "function" == typeof Date.now ? Date.now : function() {
                return new Date().getTime();
            }, perfAvail = window.performance && "function" == typeof window.performance.now, requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || null, animationStartTime = 0;
            !requestAnimationFrame || $.noRequestAnimationFrame ? ($.noRequestAnimationFrame = null, 
            setInterval(function() {
                self._updateElems();
            }, 980)) : (animationStartTime = window.animationStartTime || window.webkitAnimationStartTime || window.mozAnimationStartTime || window.oAnimationStartTime || window.msAnimationStartTime || now(), 
            requestAnimationFrame(timerCallBack));
        },
        /** Convert a date/time to UTC.
			@param tz {number} The hour or minute offset from GMT, e.g. +9, -360.
			@param year {Date|number} the date/time in that timezone or the year in that timezone.
			@param [month] {number} The month (0 - 11) (omit if <code>year</code> is a <code>Date</code>).
			@param [day] {number} The day (omit if <code>year</code> is a <code>Date</code>).
			@param [hours] {number} The hour (omit if <code>year</code> is a <code>Date</code>).
			@param [mins] {number} The minute (omit if <code>year</code> is a <code>Date</code>).
			@param [secs] {number} The second (omit if <code>year</code> is a <code>Date</code>).
			@param [ms] {number} The millisecond (omit if <code>year</code> is a <code>Date</code>).
			@return {Date} The equivalent UTC date/time.
			@example $.countdown.UTCDate(+10, 2013, 12-1, 25, 12, 0)
 $.countdown.UTCDate(-7, new Date(2013, 12-1, 25, 12, 0)) */
        UTCDate: function(tz, year, month, day, hours, mins, secs, ms) {
            "object" == typeof year && year.constructor == Date && (ms = year.getMilliseconds(), 
            secs = year.getSeconds(), mins = year.getMinutes(), hours = year.getHours(), day = year.getDate(), 
            month = year.getMonth(), year = year.getFullYear());
            var d = new Date();
            return d.setUTCFullYear(year), d.setUTCDate(1), d.setUTCMonth(month || 0), d.setUTCDate(day || 1), 
            d.setUTCHours(hours || 0), d.setUTCMinutes((mins || 0) - (Math.abs(tz) < 30 ? 60 * tz : tz)), 
            d.setUTCSeconds(secs || 0), d.setUTCMilliseconds(ms || 0), d;
        },
        /** Convert a set of periods into seconds.
	   Averaged for months and years.
			@param periods {number[]} The periods per year/month/week/day/hour/minute/second.
			@return {number} The corresponding number of seconds.
			@example var secs = $.countdown.periodsToSeconds(periods) */
        periodsToSeconds: function(periods) {
            return 31557600 * periods[0] + 2629800 * periods[1] + 604800 * periods[2] + 86400 * periods[3] + 3600 * periods[4] + 60 * periods[5] + periods[6];
        },
        /** Resynchronise the countdowns with the server.
			@example $.countdown.resync() */
        resync: function() {
            var self = this;
            $("." + this._getMarker()).each(function() {
                // Each countdown
                var inst = $.data(this, self.name);
                if (inst.options.serverSync) {
                    for (var serverSync = null, i = 0; i < self._serverSyncs.length; i++) if (self._serverSyncs[i][0] == inst.options.serverSync) {
                        // Find sync details
                        serverSync = self._serverSyncs[i];
                        break;
                    }
                    if (null == serverSync[2]) {
                        // Recalculate if missing
                        var serverResult = $.isFunction(inst.options.serverSync) ? inst.options.serverSync.apply(this, []) : null;
                        serverSync[2] = (serverResult ? new Date().getTime() - serverResult.getTime() : 0) - serverSync[1];
                    }
                    inst._since && // Apply difference
                    inst._since.setMilliseconds(inst._since.getMilliseconds() + serverSync[2]), inst._until.setMilliseconds(inst._until.getMilliseconds() + serverSync[2]);
                }
            });
            for (var i = 0; i < self._serverSyncs.length; i++) // Update sync details
            null != self._serverSyncs[i][2] && (self._serverSyncs[i][1] += self._serverSyncs[i][2], 
            delete self._serverSyncs[i][2]);
        },
        _instSettings: function(elem, options) {
            return {
                _periods: [ 0, 0, 0, 0, 0, 0, 0 ]
            };
        },
        /** Add an element to the list of active ones.
			@private
			@param elem {Element} The countdown element. */
        _addElem: function(elem) {
            this._hasElem(elem) || this._timerElems.push(elem);
        },
        /** See if an element is in the list of active ones.
			@private
			@param elem {Element} The countdown element.
			@return {boolean} True if present, false if not. */
        _hasElem: function(elem) {
            return $.inArray(elem, this._timerElems) > -1;
        },
        /** Remove an element from the list of active ones.
			@private
			@param elem {Element} The countdown element. */
        _removeElem: function(elem) {
            this._timerElems = $.map(this._timerElems, function(value) {
                return value == elem ? null : value;
            });
        },
        /** Update each active timer element.
			@private */
        _updateElems: function() {
            for (var i = this._timerElems.length - 1; i >= 0; i--) this._updateCountdown(this._timerElems[i]);
        },
        _optionsChanged: function(elem, inst, options) {
            options.layout && (options.layout = options.layout.replace(/&lt;/g, "<").replace(/&gt;/g, ">")), 
            this._resetExtraLabels(inst.options, options);
            var timezoneChanged = inst.options.timezone != options.timezone;
            $.extend(inst.options, options), this._adjustSettings(elem, inst, null != options.until || null != options.since || timezoneChanged);
            var now = new Date();
            (inst._since && inst._since < now || inst._until && inst._until > now) && this._addElem(elem[0]), 
            this._updateCountdown(elem, inst);
        },
        /** Redisplay the countdown with an updated display.
			@private
			@param elem {Element|jQuery} The containing division.
			@param inst {object} The current settings for this instance. */
        _updateCountdown: function(elem, inst) {
            if (elem = elem.jquery ? elem : $(elem), inst = inst || this._getInst(elem)) {
                if (elem.html(this._generateHTML(inst)).toggleClass(this._rtlClass, inst.options.isRTL), 
                $.isFunction(inst.options.onTick)) {
                    var periods = "lap" != inst._hold ? inst._periods : this._calculatePeriods(inst, inst._show, inst.options.significant, new Date());
                    (1 == inst.options.tickInterval || this.periodsToSeconds(periods) % inst.options.tickInterval == 0) && inst.options.onTick.apply(elem[0], [ periods ]);
                }
                var expired = "pause" != inst._hold && (inst._since ? inst._now.getTime() < inst._since.getTime() : inst._now.getTime() >= inst._until.getTime());
                if (expired && !inst._expiring) {
                    if (inst._expiring = !0, this._hasElem(elem[0]) || inst.options.alwaysExpire) {
                        if (this._removeElem(elem[0]), $.isFunction(inst.options.onExpiry) && inst.options.onExpiry.apply(elem[0], []), 
                        inst.options.expiryText) {
                            var layout = inst.options.layout;
                            inst.options.layout = inst.options.expiryText, this._updateCountdown(elem[0], inst), 
                            inst.options.layout = layout;
                        }
                        inst.options.expiryUrl && (window.location = inst.options.expiryUrl);
                    }
                    inst._expiring = !1;
                } else "pause" == inst._hold && this._removeElem(elem[0]);
            }
        },
        /** Reset any extra labelsn and compactLabelsn entries if changing labels.
			@private
			@param base {object} The options to be updated.
			@param options {object} The new option values. */
        _resetExtraLabels: function(base, options) {
            for (var n in options) n.match(/[Ll]abels[02-9]|compactLabels1/) && (base[n] = options[n]);
            for (var n in base) // Remove custom numbered labels
            n.match(/[Ll]abels[02-9]|compactLabels1/) && "undefined" == typeof options[n] && (base[n] = null);
        },
        /** Calculate internal settings for an instance.
			@private
			@param elem {jQuery} The containing division.
			@param inst {object} The current settings for this instance.
			@param recalc {boolean} True if until or since are set. */
        _adjustSettings: function(elem, inst, recalc) {
            for (var serverEntry = null, i = 0; i < this._serverSyncs.length; i++) if (this._serverSyncs[i][0] == inst.options.serverSync) {
                serverEntry = this._serverSyncs[i][1];
                break;
            }
            if (null != serverEntry) var serverOffset = inst.options.serverSync ? serverEntry : 0, now = new Date(); else {
                var serverResult = $.isFunction(inst.options.serverSync) ? inst.options.serverSync.apply(elem[0], []) : null, now = new Date(), serverOffset = serverResult ? now.getTime() - serverResult.getTime() : 0;
                this._serverSyncs.push([ inst.options.serverSync, serverOffset ]);
            }
            var timezone = inst.options.timezone;
            timezone = null == timezone ? -now.getTimezoneOffset() : timezone, (recalc || !recalc && null == inst._until && null == inst._since) && (inst._since = inst.options.since, 
            null != inst._since && (inst._since = this.UTCDate(timezone, this._determineTime(inst._since, null)), 
            inst._since && serverOffset && inst._since.setMilliseconds(inst._since.getMilliseconds() + serverOffset)), 
            inst._until = this.UTCDate(timezone, this._determineTime(inst.options.until, now)), 
            serverOffset && inst._until.setMilliseconds(inst._until.getMilliseconds() + serverOffset)), 
            inst._show = this._determineShow(inst);
        },
        /** Remove the countdown widget from a div.
			@param elem {jQuery} The containing division.
			@param inst {object} The current instance object. */
        _preDestroy: function(elem, inst) {
            this._removeElem(elem[0]), elem.empty();
        },
        /** Pause a countdown widget at the current time.
	   Stop it running but remember and display the current time.
			@param elem {Element} The containing division.
			@example $(selector).countdown('pause') */
        pause: function(elem) {
            this._hold(elem, "pause");
        },
        /** Pause a countdown widget at the current time.
	   Stop the display but keep the countdown running.
			@param elem {Element} The containing division.
			@example $(selector).countdown('lap') */
        lap: function(elem) {
            this._hold(elem, "lap");
        },
        /** Resume a paused countdown widget.
			@param elem {Element} The containing division.
			@example $(selector).countdown('resume') */
        resume: function(elem) {
            this._hold(elem, null);
        },
        /** Toggle a paused countdown widget.
			@param elem {Element} The containing division.
			@example $(selector).countdown('toggle') */
        toggle: function(elem) {
            var inst = $.data(elem, this.name) || {};
            this[inst._hold ? "resume" : "pause"](elem);
        },
        /** Toggle a lapped countdown widget.
			@param elem {Element} The containing division.
			@example $(selector).countdown('toggleLap') */
        toggleLap: function(elem) {
            var inst = $.data(elem, this.name) || {};
            this[inst._hold ? "resume" : "lap"](elem);
        },
        /** Pause or resume a countdown widget.
			@private
			@param elem {Element} The containing division.
			@param hold {string} The new hold setting. */
        _hold: function(elem, hold) {
            var inst = $.data(elem, this.name);
            if (inst) {
                if ("pause" == inst._hold && !hold) {
                    inst._periods = inst._savePeriods;
                    var sign = inst._since ? "-" : "+";
                    inst[inst._since ? "_since" : "_until"] = this._determineTime(sign + inst._periods[0] + "y" + sign + inst._periods[1] + "o" + sign + inst._periods[2] + "w" + sign + inst._periods[3] + "d" + sign + inst._periods[4] + "h" + sign + inst._periods[5] + "m" + sign + inst._periods[6] + "s"), 
                    this._addElem(elem);
                }
                inst._hold = hold, inst._savePeriods = "pause" == hold ? inst._periods : null, $.data(elem, this.name, inst), 
                this._updateCountdown(elem, inst);
            }
        },
        /** Return the current time periods.
			@param elem {Element} The containing division.
			@return {number[]} The current periods for the countdown.
			@example var periods = $(selector).countdown('getTimes') */
        getTimes: function(elem) {
            var inst = $.data(elem, this.name);
            return inst ? "pause" == inst._hold ? inst._savePeriods : inst._hold ? this._calculatePeriods(inst, inst._show, inst.options.significant, new Date()) : inst._periods : null;
        },
        /** A time may be specified as an exact value or a relative one.
			@private
			@param setting {string|number|Date} The date/time value as a relative or absolute value.
			@param defaultTime {Date} The date/time to use if no other is supplied.
			@return {Date} The corresponding date/time. */
        _determineTime: function(setting, defaultTime) {
            var self = this, offsetNumeric = function(offset) {
                // e.g. +300, -2
                var time = new Date();
                return time.setTime(time.getTime() + 1e3 * offset), time;
            }, offsetString = function(offset) {
                // e.g. '+2d', '-4w', '+3h +30m'
                offset = offset.toLowerCase();
                for (var time = new Date(), year = time.getFullYear(), month = time.getMonth(), day = time.getDate(), hour = time.getHours(), minute = time.getMinutes(), second = time.getSeconds(), pattern = /([+-]?[0-9]+)\s*(s|m|h|d|w|o|y)?/g, matches = pattern.exec(offset); matches; ) {
                    switch (matches[2] || "s") {
                      case "s":
                        second += parseInt(matches[1], 10);
                        break;

                      case "m":
                        minute += parseInt(matches[1], 10);
                        break;

                      case "h":
                        hour += parseInt(matches[1], 10);
                        break;

                      case "d":
                        day += parseInt(matches[1], 10);
                        break;

                      case "w":
                        day += 7 * parseInt(matches[1], 10);
                        break;

                      case "o":
                        month += parseInt(matches[1], 10), day = Math.min(day, self._getDaysInMonth(year, month));
                        break;

                      case "y":
                        year += parseInt(matches[1], 10), day = Math.min(day, self._getDaysInMonth(year, month));
                    }
                    matches = pattern.exec(offset);
                }
                return new Date(year, month, day, hour, minute, second, 0);
            }, time = null == setting ? defaultTime : "string" == typeof setting ? offsetString(setting) : "number" == typeof setting ? offsetNumeric(setting) : setting;
            return time && time.setMilliseconds(0), time;
        },
        /** Determine the number of days in a month.
			@private
			@param year {number} The year.
			@param month {number} The month.
			@return {number} The days in that month. */
        _getDaysInMonth: function(year, month) {
            return 32 - new Date(year, month, 32).getDate();
        },
        /** Default implementation to determine which set of labels should be used for an amount.
			Use the <code>labels</code> attribute with the same numeric suffix (if it exists).
			@private
			@param num {number} The amount to be displayed.
			@return {number} The set of labels to be used for this amount. */
        _normalLabels: function(num) {
            return num;
        },
        /** Generate the HTML to display the countdown widget.
			@private
			@param inst {object} The current settings for this instance.
			@return {string} The new HTML for the countdown display. */
        _generateHTML: function(inst) {
            var self = this;
            // Determine what to show
            inst._periods = inst._hold ? inst._periods : this._calculatePeriods(inst, inst._show, inst.options.significant, new Date());
            for (var shownNonZero = !1, showCount = 0, sigCount = inst.options.significant, show = $.extend({}, inst._show), period = Y; S >= period; period++) shownNonZero |= "?" == inst._show[period] && inst._periods[period] > 0, 
            show[period] = "?" != inst._show[period] || shownNonZero ? inst._show[period] : null, 
            showCount += show[period] ? 1 : 0, sigCount -= inst._periods[period] > 0 ? 1 : 0;
            for (var showSignificant = [ !1, !1, !1, !1, !1, !1, !1 ], period = S; period >= Y; period--) // Determine significant periods
            inst._show[period] && (inst._periods[period] ? showSignificant[period] = !0 : (showSignificant[period] = sigCount > 0, 
            sigCount--));
            var labels = inst.options.compact ? inst.options.compactLabels : inst.options.labels, whichLabels = inst.options.whichLabels || this._normalLabels, showCompact = function(period) {
                var labelsNum = inst.options["compactLabels" + whichLabels(inst._periods[period])];
                return show[period] ? self._translateDigits(inst, inst._periods[period]) + (labelsNum ? labelsNum[period] : labels[period]) + " " : "";
            }, minDigits = inst.options.padZeroes ? 2 : 1, showFull = function(period) {
                var labelsNum = inst.options["labels" + whichLabels(inst._periods[period])];
                return !inst.options.significant && show[period] || inst.options.significant && showSignificant[period] ? '<span class="' + self._sectionClass + '"><span class="' + self._amountClass + '">' + self._minDigits(inst, inst._periods[period], minDigits) + '</span><span class="' + self._periodClass + '">' + (labelsNum ? labelsNum[period] : labels[period]) + "</span></span>" : "";
            };
            // Compact version
            // Full version
            return inst.options.layout ? this._buildLayout(inst, show, inst.options.layout, inst.options.compact, inst.options.significant, showSignificant) : (inst.options.compact ? '<span class="' + this._rowClass + " " + this._amountClass + (inst._hold ? " " + this._holdingClass : "") + '">' + showCompact(Y) + showCompact(O) + showCompact(W) + showCompact(D) + (show[H] ? this._minDigits(inst, inst._periods[H], 2) : "") + (show[M] ? (show[H] ? inst.options.timeSeparator : "") + this._minDigits(inst, inst._periods[M], 2) : "") + (show[S] ? (show[H] || show[M] ? inst.options.timeSeparator : "") + this._minDigits(inst, inst._periods[S], 2) : "") : '<span class="' + this._rowClass + " " + this._showClass + (inst.options.significant || showCount) + (inst._hold ? " " + this._holdingClass : "") + '">' + showFull(Y) + showFull(O) + showFull(W) + showFull(D) + showFull(H) + showFull(M) + showFull(S)) + "</span>" + (inst.options.description ? '<span class="' + this._rowClass + " " + this._descrClass + '">' + inst.options.description + "</span>" : "");
        },
        /** Construct a custom layout.
			@private
			@param inst {object} The current settings for this instance.
			@param show {boolean[]} Flags indicating which periods are requested.
			@param layout {string} The customised layout.
			@param compact {boolean} True if using compact labels.
			@param significant {number} The number of periods with values to show, zero for all.
			@param showSignificant {boolean[]} Other periods to show for significance.
			@return {string} The custom HTML. */
        _buildLayout: function(inst, show, layout, compact, significant, showSignificant) {
            // Replace period containers: {p<}...{p>}
            for (var labels = inst.options[compact ? "compactLabels" : "labels"], whichLabels = inst.options.whichLabels || this._normalLabels, labelFor = function(index) {
                return (inst.options[(compact ? "compactLabels" : "labels") + whichLabels(inst._periods[index])] || labels)[index];
            }, digit = function(value, position) {
                return inst.options.digits[Math.floor(value / position) % 10];
            }, subs = {
                desc: inst.options.description,
                sep: inst.options.timeSeparator,
                yl: labelFor(Y),
                yn: this._minDigits(inst, inst._periods[Y], 1),
                ynn: this._minDigits(inst, inst._periods[Y], 2),
                ynnn: this._minDigits(inst, inst._periods[Y], 3),
                y1: digit(inst._periods[Y], 1),
                y10: digit(inst._periods[Y], 10),
                y100: digit(inst._periods[Y], 100),
                y1000: digit(inst._periods[Y], 1e3),
                ol: labelFor(O),
                on: this._minDigits(inst, inst._periods[O], 1),
                onn: this._minDigits(inst, inst._periods[O], 2),
                onnn: this._minDigits(inst, inst._periods[O], 3),
                o1: digit(inst._periods[O], 1),
                o10: digit(inst._periods[O], 10),
                o100: digit(inst._periods[O], 100),
                o1000: digit(inst._periods[O], 1e3),
                wl: labelFor(W),
                wn: this._minDigits(inst, inst._periods[W], 1),
                wnn: this._minDigits(inst, inst._periods[W], 2),
                wnnn: this._minDigits(inst, inst._periods[W], 3),
                w1: digit(inst._periods[W], 1),
                w10: digit(inst._periods[W], 10),
                w100: digit(inst._periods[W], 100),
                w1000: digit(inst._periods[W], 1e3),
                dl: labelFor(D),
                dn: this._minDigits(inst, inst._periods[D], 1),
                dnn: this._minDigits(inst, inst._periods[D], 2),
                dnnn: this._minDigits(inst, inst._periods[D], 3),
                d1: digit(inst._periods[D], 1),
                d10: digit(inst._periods[D], 10),
                d100: digit(inst._periods[D], 100),
                d1000: digit(inst._periods[D], 1e3),
                hl: labelFor(H),
                hn: this._minDigits(inst, inst._periods[H], 1),
                hnn: this._minDigits(inst, inst._periods[H], 2),
                hnnn: this._minDigits(inst, inst._periods[H], 3),
                h1: digit(inst._periods[H], 1),
                h10: digit(inst._periods[H], 10),
                h100: digit(inst._periods[H], 100),
                h1000: digit(inst._periods[H], 1e3),
                ml: labelFor(M),
                mn: this._minDigits(inst, inst._periods[M], 1),
                mnn: this._minDigits(inst, inst._periods[M], 2),
                mnnn: this._minDigits(inst, inst._periods[M], 3),
                m1: digit(inst._periods[M], 1),
                m10: digit(inst._periods[M], 10),
                m100: digit(inst._periods[M], 100),
                m1000: digit(inst._periods[M], 1e3),
                sl: labelFor(S),
                sn: this._minDigits(inst, inst._periods[S], 1),
                snn: this._minDigits(inst, inst._periods[S], 2),
                snnn: this._minDigits(inst, inst._periods[S], 3),
                s1: digit(inst._periods[S], 1),
                s10: digit(inst._periods[S], 10),
                s100: digit(inst._periods[S], 100),
                s1000: digit(inst._periods[S], 1e3)
            }, html = layout, i = Y; S >= i; i++) {
                var period = "yowdhms".charAt(i), re = new RegExp("\\{" + period + "<\\}([\\s\\S]*)\\{" + period + ">\\}", "g");
                html = html.replace(re, !significant && show[i] || significant && showSignificant[i] ? "$1" : "");
            }
            // Replace period values: {pn}
            return $.each(subs, function(n, v) {
                var re = new RegExp("\\{" + n + "\\}", "g");
                html = html.replace(re, v);
            }), html;
        },
        /** Ensure a numeric value has at least n digits for display.
			@private
			@param inst {object} The current settings for this instance.
			@param value {number} The value to display.
			@param len {number} The minimum length.
			@return {string} The display text. */
        _minDigits: function(inst, value, len) {
            return value = "" + value, value.length >= len ? this._translateDigits(inst, value) : (value = "0000000000" + value, 
            this._translateDigits(inst, value.substr(value.length - len)));
        },
        /** Translate digits into other representations.
			@private
			@param inst {object} The current settings for this instance.
			@param value {string} The text to translate.
			@return {string} The translated text. */
        _translateDigits: function(inst, value) {
            return ("" + value).replace(/[0-9]/g, function(digit) {
                return inst.options.digits[digit];
            });
        },
        /** Translate the format into flags for each period.
			@private
			@param inst {object} The current settings for this instance.
			@return {string[]} Flags indicating which periods are requested (?) or
					required (!) by year, month, week, day, hour, minute, second. */
        _determineShow: function(inst) {
            var format = inst.options.format, show = [];
            return show[Y] = format.match("y") ? "?" : format.match("Y") ? "!" : null, show[O] = format.match("o") ? "?" : format.match("O") ? "!" : null, 
            show[W] = format.match("w") ? "?" : format.match("W") ? "!" : null, show[D] = format.match("d") ? "?" : format.match("D") ? "!" : null, 
            show[H] = format.match("h") ? "?" : format.match("H") ? "!" : null, show[M] = format.match("m") ? "?" : format.match("M") ? "!" : null, 
            show[S] = format.match("s") ? "?" : format.match("S") ? "!" : null, show;
        },
        /** Calculate the requested periods between now and the target time.
			@private
			@param inst {object} The current settings for this instance.
			@param show {string[]} Flags indicating which periods are requested/required.
			@param significant {number} The number of periods with values to show, zero for all.
			@param now {Date} The current date and time.
			@return {number[]} The current time periods (always positive)
					by year, month, week, day, hour, minute, second. */
        _calculatePeriods: function(inst, show, significant, now) {
            // Find endpoints
            inst._now = now, inst._now.setMilliseconds(0);
            var until = new Date(inst._now.getTime());
            inst._since ? now.getTime() < inst._since.getTime() ? inst._now = now = until : now = inst._since : (until.setTime(inst._until.getTime()), 
            now.getTime() > inst._until.getTime() && (inst._now = now = until));
            // Calculate differences by period
            var periods = [ 0, 0, 0, 0, 0, 0, 0 ];
            if (show[Y] || show[O]) {
                // Treat end of months as the same
                var lastNow = this._getDaysInMonth(now.getFullYear(), now.getMonth()), lastUntil = this._getDaysInMonth(until.getFullYear(), until.getMonth()), sameDay = until.getDate() == now.getDate() || until.getDate() >= Math.min(lastNow, lastUntil) && now.getDate() >= Math.min(lastNow, lastUntil), getSecs = function(date) {
                    return 60 * (60 * date.getHours() + date.getMinutes()) + date.getSeconds();
                }, months = Math.max(0, 12 * (until.getFullYear() - now.getFullYear()) + until.getMonth() - now.getMonth() + (until.getDate() < now.getDate() && !sameDay || sameDay && getSecs(until) < getSecs(now) ? -1 : 0));
                periods[Y] = show[Y] ? Math.floor(months / 12) : 0, periods[O] = show[O] ? months - 12 * periods[Y] : 0, 
                // Adjust for months difference and end of month if necessary
                now = new Date(now.getTime());
                var wasLastDay = now.getDate() == lastNow, lastDay = this._getDaysInMonth(now.getFullYear() + periods[Y], now.getMonth() + periods[O]);
                now.getDate() > lastDay && now.setDate(lastDay), now.setFullYear(now.getFullYear() + periods[Y]), 
                now.setMonth(now.getMonth() + periods[O]), wasLastDay && now.setDate(lastDay);
            }
            var diff = Math.floor((until.getTime() - now.getTime()) / 1e3), extractPeriod = function(period, numSecs) {
                periods[period] = show[period] ? Math.floor(diff / numSecs) : 0, diff -= periods[period] * numSecs;
            };
            if (extractPeriod(W, 604800), extractPeriod(D, 86400), extractPeriod(H, 3600), extractPeriod(M, 60), 
            extractPeriod(S, 1), diff > 0 && !inst._since) for (var multiplier = [ 1, 12, 4.3482, 7, 24, 60, 60 ], lastShown = S, max = 1, period = S; period >= Y; period--) show[period] && (periods[lastShown] >= max && (periods[lastShown] = 0, 
            diff = 1), diff > 0 && (periods[period]++, diff = 0, lastShown = period, max = 1)), 
            max *= multiplier[period];
            if (significant) // Zero out insignificant periods
            for (var period = Y; S >= period; period++) significant && periods[period] ? significant-- : significant || (periods[period] = 0);
            return periods;
        }
    });
}(jQuery), /*! DataTables 1.10.9
 * ©2008-2015 SpryMedia Ltd - datatables.net/license
 */
/**
 * @summary     DataTables
 * @description Paginate, search and order HTML tables
 * @version     1.10.9
 * @file        jquery.dataTables.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2008-2015 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */
/*jslint evil: true, undef: true, browser: true */
/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/
/** @lends <global> */ function(window, document, undefined) {
    !function(factory) {
        "use strict";
        "function" == typeof define && define.amd ? // Define as an AMD module if possible
        define("datatables", [ "jquery" ], factory) : "object" == typeof exports ? // Node/CommonJS
        module.exports = factory(require("jquery")) : jQuery && !jQuery.fn.dataTable && // Define using browser globals otherwise
        // Prevent multiple instantiations if the script is loaded twice
        factory(jQuery);
    }(/** @lends <global> */ function($) {
        "use strict";
        /**
	 * Create a mapping object that allows camel case parameters to be looked up
	 * for their Hungarian counterparts. The mapping is stored in a private
	 * parameter called `_hungarianMap` which can be accessed on the source object.
	 *  @param {object} o
	 *  @memberof DataTable#oApi
	 */
        function _fnHungarianMap(o) {
            var match, newKey, hungarian = "a aa ai ao as b fn i m o s ", map = {};
            $.each(o, function(key, val) {
                match = key.match(/^([^A-Z]+?)([A-Z])/), match && -1 !== hungarian.indexOf(match[1] + " ") && (newKey = key.replace(match[0], match[2].toLowerCase()), 
                map[newKey] = key, "o" === match[1] && _fnHungarianMap(o[key]));
            }), o._hungarianMap = map;
        }
        /**
	 * Convert from camel case parameters to Hungarian, based on a Hungarian map
	 * created by _fnHungarianMap.
	 *  @param {object} src The model object which holds all parameters that can be
	 *    mapped.
	 *  @param {object} user The object to convert from camel case to Hungarian.
	 *  @param {boolean} force When set to `true`, properties which already have a
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	 *    won't be.
	 *  @memberof DataTable#oApi
	 */
        function _fnCamelToHungarian(src, user, force) {
            src._hungarianMap || _fnHungarianMap(src);
            var hungarianKey;
            $.each(user, function(key, val) {
                hungarianKey = src._hungarianMap[key], hungarianKey === undefined || !force && user[hungarianKey] !== undefined || (// For objects, we need to buzz down into the object to copy parameters
                "o" === hungarianKey.charAt(0) ? (// Copy the camelCase options over to the hungarian
                user[hungarianKey] || (user[hungarianKey] = {}), $.extend(!0, user[hungarianKey], user[key]), 
                _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force)) : user[hungarianKey] = user[key]);
            });
        }
        /**
	 * Language compatibility - when certain options are given, and others aren't, we
	 * need to duplicate the values over, in order to provide backwards compatibility
	 * with older language files.
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnLanguageCompat(lang) {
            var defaults = DataTable.defaults.oLanguage, zeroRecords = lang.sZeroRecords;
            /* Backwards compatibility - if there is no sEmptyTable given, then use the same as
		 * sZeroRecords - assuming that is given.
		 */
            !lang.sEmptyTable && zeroRecords && "No data available in table" === defaults.sEmptyTable && _fnMap(lang, lang, "sZeroRecords", "sEmptyTable"), 
            /* Likewise with loading records */
            !lang.sLoadingRecords && zeroRecords && "Loading..." === defaults.sLoadingRecords && _fnMap(lang, lang, "sZeroRecords", "sLoadingRecords"), 
            // Old parameter name of the thousands separator mapped onto the new
            lang.sInfoThousands && (lang.sThousands = lang.sInfoThousands);
            var decimal = lang.sDecimal;
            decimal && _addNumericSort(decimal);
        }
        /**
	 * Provide backwards compatibility for the main DT options. Note that the new
	 * options are mapped onto the old parameters, so this is an external interface
	 * change only.
	 *  @param {object} init Object to map
	 */
        function _fnCompatOpts(init) {
            _fnCompatMap(init, "ordering", "bSort"), _fnCompatMap(init, "orderMulti", "bSortMulti"), 
            _fnCompatMap(init, "orderClasses", "bSortClasses"), _fnCompatMap(init, "orderCellsTop", "bSortCellsTop"), 
            _fnCompatMap(init, "order", "aaSorting"), _fnCompatMap(init, "orderFixed", "aaSortingFixed"), 
            _fnCompatMap(init, "paging", "bPaginate"), _fnCompatMap(init, "pagingType", "sPaginationType"), 
            _fnCompatMap(init, "pageLength", "iDisplayLength"), _fnCompatMap(init, "searching", "bFilter"), 
            // Boolean initialisation of x-scrolling
            "boolean" == typeof init.sScrollX && (init.sScrollX = init.sScrollX ? "100%" : "");
            // Column search objects are in an array, so it needs to be converted
            // element by element
            var searchCols = init.aoSearchCols;
            if (searchCols) for (var i = 0, ien = searchCols.length; ien > i; i++) searchCols[i] && _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);
        }
        /**
	 * Provide backwards compatibility for column options. Note that the new options
	 * are mapped onto the old parameters, so this is an external interface change
	 * only.
	 *  @param {object} init Object to map
	 */
        function _fnCompatCols(init) {
            _fnCompatMap(init, "orderable", "bSortable"), _fnCompatMap(init, "orderData", "aDataSort"), 
            _fnCompatMap(init, "orderSequence", "asSorting"), _fnCompatMap(init, "orderDataType", "sortDataType");
            // orderData can be given as an integer
            var dataSort = init.aDataSort;
            dataSort && !$.isArray(dataSort) && (init.aDataSort = [ dataSort ]);
        }
        /**
	 * Browser feature detection for capabilities, quirks
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnBrowserDetect(settings) {
            // We don't need to do this every time DataTables is constructed, the values
            // calculated are specific to the browser and OS configuration which we
            // don't expect to change between initialisations
            if (!DataTable.__browser) {
                var browser = {};
                DataTable.__browser = browser;
                // Scrolling feature / quirks detection
                var n = $("<div/>").css({
                    position: "fixed",
                    top: 0,
                    left: 0,
                    height: 1,
                    width: 1,
                    overflow: "hidden"
                }).append($("<div/>").css({
                    position: "absolute",
                    top: 1,
                    left: 1,
                    width: 100,
                    overflow: "scroll"
                }).append($("<div/>").css({
                    width: "100%",
                    height: 10
                }))).appendTo("body"), outer = n.children(), inner = outer.children();
                // Numbers below, in order, are:
                // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
                //
                // IE6 XP:                           100 100 100  83
                // IE7 Vista:                        100 100 100  83
                // IE 8+ Windows:                     83  83 100  83
                // Evergreen Windows:                 83  83 100  83
                // Evergreen Mac with scrollbars:     85  85 100  85
                // Evergreen Mac without scrollbars: 100 100 100 100
                // Get scrollbar width
                browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth, // IE6/7 will oversize a width 100% element inside a scrolling element, to
                // include the width of the scrollbar, while other browsers ensure the inner
                // element is contained without forcing scrolling
                //console.log( inner.offsetWidth );
                browser.bScrollOversize = 100 === inner[0].offsetWidth && 100 !== outer[0].clientWidth, 
                // In rtl text layout, some browsers (most, but not all) will place the
                // scrollbar on the left, rather than the right.
                browser.bScrollbarLeft = 1 !== Math.round(inner.offset().left), // IE8- don't provide height and width for getBoundingClientRect
                browser.bBounding = n[0].getBoundingClientRect().width ? !0 : !1, n.remove();
            }
            $.extend(settings.oBrowser, DataTable.__browser), settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
        }
        /**
	 * Array.prototype reduce[Right] method, used for browsers which don't support
	 * JS 1.6. Done this way to reduce code size, since we iterate either way
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnReduce(that, fn, init, start, end, inc) {
            var value, i = start, isSet = !1;
            for (init !== undefined && (value = init, isSet = !0); i !== end; ) that.hasOwnProperty(i) && (value = isSet ? fn(value, that[i], i, that) : that[i], 
            isSet = !0, i += inc);
            return value;
        }
        /**
	 * Add a column to the list used for the table with default values
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} nTh The th element for this column
	 *  @memberof DataTable#oApi
	 */
        function _fnAddColumn(oSettings, nTh) {
            // Add column to aoColumns array
            var oDefaults = DataTable.defaults.column, iCol = oSettings.aoColumns.length, oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {
                nTh: nTh ? nTh : document.createElement("th"),
                sTitle: oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : "",
                aDataSort: oDefaults.aDataSort ? oDefaults.aDataSort : [ iCol ],
                mData: oDefaults.mData ? oDefaults.mData : iCol,
                idx: iCol
            });
            oSettings.aoColumns.push(oCol);
            // Add search object for column specific search. Note that the `searchCols[ iCol ]`
            // passed into extend can be undefined. This allows the user to give a default
            // with only some of the parameters defined, and also not give a default
            var searchCols = oSettings.aoPreSearchCols;
            searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]), // Use the default column options function to initialise classes etc
            _fnColumnOptions(oSettings, iCol, $(nTh).data());
        }
        /**
	 * Apply options for a column
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iCol column index to consider
	 *  @param {object} oOptions object with sType, bVisible and bSearchable etc
	 *  @memberof DataTable#oApi
	 */
        function _fnColumnOptions(oSettings, iCol, oOptions) {
            var oCol = oSettings.aoColumns[iCol], oClasses = oSettings.oClasses, th = $(oCol.nTh);
            // Try to get width information from the DOM. We can't get it from CSS
            // as we'd need to parse the CSS stylesheet. `width` option can override
            if (!oCol.sWidthOrig) {
                // Width attribute
                oCol.sWidthOrig = th.attr("width") || null;
                // Style attribute
                var t = (th.attr("style") || "").match(/width:\s*(\d+[pxem%]+)/);
                t && (oCol.sWidthOrig = t[1]);
            }
            /* User specified column options */
            oOptions !== undefined && null !== oOptions && (// Backwards compatibility
            _fnCompatCols(oOptions), // Map camel case parameters to their Hungarian counterparts
            _fnCamelToHungarian(DataTable.defaults.column, oOptions), /* Backwards compatibility for mDataProp */
            oOptions.mDataProp === undefined || oOptions.mData || (oOptions.mData = oOptions.mDataProp), 
            oOptions.sType && (oCol._sManualType = oOptions.sType), // `class` is a reserved word in Javascript, so we need to provide
            // the ability to use a valid name for the camel case input
            oOptions.className && !oOptions.sClass && (oOptions.sClass = oOptions.className), 
            $.extend(oCol, oOptions), _fnMap(oCol, oOptions, "sWidth", "sWidthOrig"), /* iDataSort to be applied (backwards compatibility), but aDataSort will take
			 * priority if defined
			 */
            oOptions.iDataSort !== undefined && (oCol.aDataSort = [ oOptions.iDataSort ]), _fnMap(oCol, oOptions, "aDataSort"));
            /* Cache the data get and set functions for speed */
            var mDataSrc = oCol.mData, mData = _fnGetObjectDataFn(mDataSrc), mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null, attrTest = function(src) {
                return "string" == typeof src && -1 !== src.indexOf("@");
            };
            oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)), 
            oCol.fnGetData = function(rowData, type, meta) {
                var innerData = mData(rowData, type, undefined, meta);
                return mRender && type ? mRender(innerData, type, rowData, meta) : innerData;
            }, oCol.fnSetData = function(rowData, val, meta) {
                return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);
            }, // Indicate if DataTables should read DOM data as an object or array
            // Used in _fnGetRowElements
            "number" != typeof mDataSrc && (oSettings._rowReadObject = !0), /* Feature sorting overrides column specific when off */
            oSettings.oFeatures.bSort || (oCol.bSortable = !1, th.addClass(oClasses.sSortableNone));
            /* Check that the class assignment is correct for sorting */
            var bAsc = -1 !== $.inArray("asc", oCol.asSorting), bDesc = -1 !== $.inArray("desc", oCol.asSorting);
            oCol.bSortable && (bAsc || bDesc) ? bAsc && !bDesc ? (oCol.sSortingClass = oClasses.sSortableAsc, 
            oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed) : !bAsc && bDesc ? (oCol.sSortingClass = oClasses.sSortableDesc, 
            oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed) : (oCol.sSortingClass = oClasses.sSortable, 
            oCol.sSortingClassJUI = oClasses.sSortJUI) : (oCol.sSortingClass = oClasses.sSortableNone, 
            oCol.sSortingClassJUI = "");
        }
        /**
	 * Adjust the table column widths for new data. Note: you would probably want to
	 * do a redraw after calling this function!
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnAdjustColumnSizing(settings) {
            /* Not interested in doing column width calculation if auto-width is disabled */
            if (settings.oFeatures.bAutoWidth !== !1) {
                var columns = settings.aoColumns;
                _fnCalculateColumnWidths(settings);
                for (var i = 0, iLen = columns.length; iLen > i; i++) columns[i].nTh.style.width = columns[i].sWidth;
            }
            var scroll = settings.oScroll;
            ("" !== scroll.sY || "" !== scroll.sX) && _fnScrollDraw(settings), _fnCallbackFire(settings, null, "column-sizing", [ settings ]);
        }
        /**
	 * Covert the index of a visible column to the index in the data array (take account
	 * of hidden columns)
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iMatch Visible column index to lookup
	 *  @returns {int} i the data index
	 *  @memberof DataTable#oApi
	 */
        function _fnVisibleToColumnIndex(oSettings, iMatch) {
            var aiVis = _fnGetColumns(oSettings, "bVisible");
            return "number" == typeof aiVis[iMatch] ? aiVis[iMatch] : null;
        }
        /**
	 * Covert the index of an index in the data array and convert it to the visible
	 *   column index (take account of hidden columns)
	 *  @param {int} iMatch Column index to lookup
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {int} i the data index
	 *  @memberof DataTable#oApi
	 */
        function _fnColumnIndexToVisible(oSettings, iMatch) {
            var aiVis = _fnGetColumns(oSettings, "bVisible"), iPos = $.inArray(iMatch, aiVis);
            return -1 !== iPos ? iPos : null;
        }
        /**
	 * Get the number of visible columns
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {int} i the number of visible columns
	 *  @memberof DataTable#oApi
	 */
        function _fnVisbleColumns(oSettings) {
            return _fnGetColumns(oSettings, "bVisible").length;
        }
        /**
	 * Get an array of column indexes that match a given property
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sParam Parameter in aoColumns to look for - typically
	 *    bVisible or bSearchable
	 *  @returns {array} Array of indexes with matched properties
	 *  @memberof DataTable#oApi
	 */
        function _fnGetColumns(oSettings, sParam) {
            var a = [];
            return $.map(oSettings.aoColumns, function(val, i) {
                val[sParam] && a.push(i);
            }), a;
        }
        /**
	 * Calculate the 'type' of a column
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnColumnTypes(settings) {
            var i, ien, j, jen, k, ken, col, detectedType, cache, columns = settings.aoColumns, data = settings.aoData, types = DataTable.ext.type.detect;
            // For each column, spin over the 
            for (i = 0, ien = columns.length; ien > i; i++) if (col = columns[i], cache = [], 
            !col.sType && col._sManualType) col.sType = col._sManualType; else if (!col.sType) {
                for (j = 0, jen = types.length; jen > j; j++) {
                    for (k = 0, ken = data.length; ken > k && (// Use a cache array so we only need to get the type data
                    // from the formatter once (when using multiple detectors)
                    cache[k] === undefined && (cache[k] = _fnGetCellData(settings, k, i, "type")), detectedType = types[j](cache[k], settings), 
                    detectedType || j === types.length - 1) && "html" !== detectedType; k++) ;
                    // Type is valid for all data points in the column - use this
                    // type
                    if (detectedType) {
                        col.sType = detectedType;
                        break;
                    }
                }
                // Fall back - if no type was detected, always use string
                col.sType || (col.sType = "string");
            }
        }
        /**
	 * Take the column definitions and static columns arrays and calculate how
	 * they relate to column indexes. The callback function will then apply the
	 * definition found for a column to a suitable configuration object.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
	 *  @param {array} aoCols The aoColumns array that defines columns individually
	 *  @param {function} fn Callback function - takes two parameters, the calculated
	 *    column index and the definition for that column.
	 *  @memberof DataTable#oApi
	 */
        function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {
            var i, iLen, j, jLen, k, kLen, def, columns = oSettings.aoColumns;
            // Column definitions with aTargets
            if (aoColDefs) /* Loop over the definitions array - loop in reverse so first instance has priority */
            for (i = aoColDefs.length - 1; i >= 0; i--) {
                def = aoColDefs[i];
                /* Each definition can target multiple columns, as it is an array */
                var aTargets = def.targets !== undefined ? def.targets : def.aTargets;
                for ($.isArray(aTargets) || (aTargets = [ aTargets ]), j = 0, jLen = aTargets.length; jLen > j; j++) if ("number" == typeof aTargets[j] && aTargets[j] >= 0) {
                    /* Add columns that we don't yet know about */
                    for (;columns.length <= aTargets[j]; ) _fnAddColumn(oSettings);
                    /* Integer, basic index */
                    fn(aTargets[j], def);
                } else if ("number" == typeof aTargets[j] && aTargets[j] < 0) /* Negative integer, right to left column counting */
                fn(columns.length + aTargets[j], def); else if ("string" == typeof aTargets[j]) /* Class name matching on TH element */
                for (k = 0, kLen = columns.length; kLen > k; k++) ("_all" == aTargets[j] || $(columns[k].nTh).hasClass(aTargets[j])) && fn(k, def);
            }
            // Statically defined columns array
            if (aoCols) for (i = 0, iLen = aoCols.length; iLen > i; i++) fn(i, aoCols[i]);
        }
        /**
	 * Add a data array to the table, creating DOM node etc. This is the parallel to
	 * _fnGatherData, but for adding rows from a Javascript source, rather than a
	 * DOM source.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {array} aData data array to be added
	 *  @param {node} [nTr] TR element to add to the table - optional. If not given,
	 *    DataTables will create a row automatically
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	 *    if nTr is.
	 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
	 *  @memberof DataTable#oApi
	 */
        function _fnAddData(oSettings, aDataIn, nTr, anTds) {
            /* Create the object for storing information about this new row */
            var iRow = oSettings.aoData.length, oData = $.extend(!0, {}, DataTable.models.oRow, {
                src: nTr ? "dom" : "data",
                idx: iRow
            });
            oData._aData = aDataIn, oSettings.aoData.push(oData);
            // Invalidate the column types as the new data needs to be revalidated
            for (var columns = oSettings.aoColumns, i = 0, iLen = columns.length; iLen > i; i++) columns[i].sType = null;
            /* Add to the display array */
            oSettings.aiDisplayMaster.push(iRow);
            var id = oSettings.rowIdFn(aDataIn);
            /* Create the DOM information, or register it if already present */
            return id !== undefined && (oSettings.aIds[id] = oData), (nTr || !oSettings.oFeatures.bDeferRender) && _fnCreateTr(oSettings, iRow, nTr, anTds), 
            iRow;
        }
        /**
	 * Add one or more TR elements to the table. Generally we'd expect to
	 * use this for reading data from a DOM sourced table, but it could be
	 * used for an TR element. Note that if a TR is given, it is used (i.e.
	 * it is not cloned).
	 *  @param {object} settings dataTables settings object
	 *  @param {array|node|jQuery} trs The TR element(s) to add to the table
	 *  @returns {array} Array of indexes for the added rows
	 *  @memberof DataTable#oApi
	 */
        function _fnAddTr(settings, trs) {
            var row;
            // Allow an individual node to be passed in
            return trs instanceof $ || (trs = $(trs)), trs.map(function(i, el) {
                return row = _fnGetRowElements(settings, el), _fnAddData(settings, row.data, el, row.cells);
            });
        }
        /**
	 * Take a TR element and convert it to an index in aoData
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} n the TR element to find
	 *  @returns {int} index if the node is found, null if not
	 *  @memberof DataTable#oApi
	 */
        function _fnNodeToDataIndex(oSettings, n) {
            return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;
        }
        /**
	 * Take a TD element and convert it into a column data index (not the visible index)
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iRow The row number the TD/TH can be found in
	 *  @param {node} n The TD/TH element to find
	 *  @returns {int} index if the node is found, -1 if not
	 *  @memberof DataTable#oApi
	 */
        function _fnNodeToColumnIndex(oSettings, iRow, n) {
            return $.inArray(n, oSettings.aoData[iRow].anCells);
        }
        /**
	 * Get the data for a given cell from the internal cache, taking into account data mapping
	 *  @param {object} settings dataTables settings object
	 *  @param {int} rowIdx aoData row id
	 *  @param {int} colIdx Column index
	 *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
	 *  @returns {*} Cell data
	 *  @memberof DataTable#oApi
	 */
        function _fnGetCellData(settings, rowIdx, colIdx, type) {
            var draw = settings.iDraw, col = settings.aoColumns[colIdx], rowData = settings.aoData[rowIdx]._aData, defaultContent = col.sDefaultContent, cellData = col.fnGetData(rowData, type, {
                settings: settings,
                row: rowIdx,
                col: colIdx
            });
            if (cellData === undefined) return settings.iDrawError != draw && null === defaultContent && (_fnLog(settings, 0, "Requested unknown parameter " + ("function" == typeof col.mData ? "{function}" : "'" + col.mData + "'") + " for row " + rowIdx, 4), 
            settings.iDrawError = draw), defaultContent;
            /* When the data source is null, we can use default column data */
            if (cellData !== rowData && null !== cellData || null === defaultContent) {
                if ("function" == typeof cellData) // If the data source is a function, then we run it and use the return,
                // executing in the scope of the data object (for instances)
                return cellData.call(rowData);
            } else cellData = defaultContent;
            return null === cellData && "display" == type ? "" : cellData;
        }
        /**
	 * Set the value for a specific cell, into the internal data cache
	 *  @param {object} settings dataTables settings object
	 *  @param {int} rowIdx aoData row id
	 *  @param {int} colIdx Column index
	 *  @param {*} val Value to set
	 *  @memberof DataTable#oApi
	 */
        function _fnSetCellData(settings, rowIdx, colIdx, val) {
            var col = settings.aoColumns[colIdx], rowData = settings.aoData[rowIdx]._aData;
            col.fnSetData(rowData, val, {
                settings: settings,
                row: rowIdx,
                col: colIdx
            });
        }
        /**
	 * Split string on periods, taking into account escaped periods
	 * @param  {string} str String to split
	 * @return {array} Split string
	 */
        function _fnSplitObjNotation(str) {
            return $.map(str.match(/(\\.|[^\.])+/g) || [ "" ], function(s) {
                return s.replace(/\\./g, ".");
            });
        }
        /**
	 * Return a function that can be used to get data from a source object, taking
	 * into account the ability to use nested objects as a source
	 *  @param {string|int|function} mSource The data source for the object
	 *  @returns {function} Data get function
	 *  @memberof DataTable#oApi
	 */
        function _fnGetObjectDataFn(mSource) {
            if ($.isPlainObject(mSource)) {
                /* Build an object of get functions, and wrap them in a single call */
                var o = {};
                return $.each(mSource, function(key, val) {
                    val && (o[key] = _fnGetObjectDataFn(val));
                }), function(data, type, row, meta) {
                    var t = o[type] || o._;
                    return t !== undefined ? t(data, type, row, meta) : data;
                };
            }
            if (null === mSource) /* Give an empty string for rendering / sorting etc */
            return function(data) {
                // type, row and meta also passed, but not used
                return data;
            };
            if ("function" == typeof mSource) return function(data, type, row, meta) {
                return mSource(data, type, row, meta);
            };
            if ("string" != typeof mSource || -1 === mSource.indexOf(".") && -1 === mSource.indexOf("[") && -1 === mSource.indexOf("(")) /* Array or flat object mapping */
            return function(data, type) {
                // row and meta also passed, but not used
                return data[mSource];
            };
            /* If there is a . in the source string then the data source is in a
			 * nested object so we loop over the data for each level to get the next
			 * level down. On each loop we test for undefined, and if found immediately
			 * return. This allows entire objects to be missing and sDefaultContent to
			 * be used if defined, rather than throwing an error
			 */
            var fetchData = function(data, type, src) {
                var arrayNotation, funcNotation, out, innerSrc;
                if ("" !== src) for (var a = _fnSplitObjNotation(src), i = 0, iLen = a.length; iLen > i; i++) {
                    if (// Check if we are dealing with special notation
                    arrayNotation = a[i].match(__reArray), funcNotation = a[i].match(__reFn), arrayNotation) {
                        // Traverse each entry in the array getting the properties requested
                        if (// Array notation
                        a[i] = a[i].replace(__reArray, ""), // Condition allows simply [] to be passed in
                        "" !== a[i] && (data = data[a[i]]), out = [], // Get the remainder of the nested object to get
                        a.splice(0, i + 1), innerSrc = a.join("."), $.isArray(data)) for (var j = 0, jLen = data.length; jLen > j; j++) out.push(fetchData(data[j], type, innerSrc));
                        // If a string is given in between the array notation indicators, that
                        // is used to join the strings together, otherwise an array is returned
                        var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);
                        data = "" === join ? out : out.join(join);
                        // The inner call to fetchData has already traversed through the remainder
                        // of the source requested, so we exit from the loop
                        break;
                    }
                    if (funcNotation) // Function call
                    a[i] = a[i].replace(__reFn, ""), data = data[a[i]](); else {
                        if (null === data || data[a[i]] === undefined) return undefined;
                        data = data[a[i]];
                    }
                }
                return data;
            };
            return function(data, type) {
                // row and meta also passed, but not used
                return fetchData(data, type, mSource);
            };
        }
        /**
	 * Return a function that can be used to set data from a source object, taking
	 * into account the ability to use nested objects as a source
	 *  @param {string|int|function} mSource The data source for the object
	 *  @returns {function} Data set function
	 *  @memberof DataTable#oApi
	 */
        function _fnSetObjectDataFn(mSource) {
            if ($.isPlainObject(mSource)) /* Unlike get, only the underscore (global) option is used for for
			 * setting data since we don't know the type here. This is why an object
			 * option is not documented for `mData` (which is read/write), but it is
			 * for `mRender` which is read only.
			 */
            return _fnSetObjectDataFn(mSource._);
            if (null === mSource) /* Nothing to do when the data source is null */
            return function() {};
            if ("function" == typeof mSource) return function(data, val, meta) {
                mSource(data, "set", val, meta);
            };
            if ("string" != typeof mSource || -1 === mSource.indexOf(".") && -1 === mSource.indexOf("[") && -1 === mSource.indexOf("(")) /* Array or flat object mapping */
            return function(data, val) {
                // meta is also passed in, but not used
                data[mSource] = val;
            };
            /* Like the get, we need to get data from a nested object */
            var setData = function(data, val, src) {
                for (var b, arrayNotation, funcNotation, o, innerSrc, a = _fnSplitObjNotation(src), aLast = a[a.length - 1], i = 0, iLen = a.length - 1; iLen > i; i++) {
                    if (// Check if we are dealing with an array notation request
                    arrayNotation = a[i].match(__reArray), funcNotation = a[i].match(__reFn), arrayNotation) {
                        // Traverse each entry in the array setting the properties requested
                        if (a[i] = a[i].replace(__reArray, ""), data[a[i]] = [], // Get the remainder of the nested object to set so we can recurse
                        b = a.slice(), b.splice(0, i + 1), innerSrc = b.join("."), $.isArray(val)) for (var j = 0, jLen = val.length; jLen > j; j++) o = {}, 
                        setData(o, val[j], innerSrc), data[a[i]].push(o); else // We've been asked to save data to an array, but it
                        // isn't array data to be saved. Best that can be done
                        // is to just save the value.
                        data[a[i]] = val;
                        // The inner call to setData has already traversed through the remainder
                        // of the source and has set the data, thus we can exit here
                        return;
                    }
                    funcNotation && (// Function call
                    a[i] = a[i].replace(__reFn, ""), data = data[a[i]](val)), // If the nested object doesn't currently exist - since we are
                    // trying to set the value - create it
                    (null === data[a[i]] || data[a[i]] === undefined) && (data[a[i]] = {}), data = data[a[i]];
                }
                // Last item in the input - i.e, the actual set
                aLast.match(__reFn) ? // Function call
                data = data[aLast.replace(__reFn, "")](val) : // If array notation is used, we just want to strip it and use the property name
                // and assign the value. If it isn't used, then we get the result we want anyway
                data[aLast.replace(__reArray, "")] = val;
            };
            return function(data, val) {
                // meta is also passed in, but not used
                return setData(data, val, mSource);
            };
        }
        /**
	 * Return an array with the full table data
	 *  @param {object} oSettings dataTables settings object
	 *  @returns array {array} aData Master data array
	 *  @memberof DataTable#oApi
	 */
        function _fnGetDataMaster(settings) {
            return _pluck(settings.aoData, "_aData");
        }
        /**
	 * Nuke the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnClearTable(settings) {
            settings.aoData.length = 0, settings.aiDisplayMaster.length = 0, settings.aiDisplay.length = 0, 
            settings.aIds = {};
        }
        /**
	 * Take an array of integers (index array) and remove a target integer (value - not
	 * the key!)
	 *  @param {array} a Index array to target
	 *  @param {int} iTarget value to find
	 *  @memberof DataTable#oApi
	 */
        function _fnDeleteIndex(a, iTarget, splice) {
            for (var iTargetIndex = -1, i = 0, iLen = a.length; iLen > i; i++) a[i] == iTarget ? iTargetIndex = i : a[i] > iTarget && a[i]--;
            -1 != iTargetIndex && splice === undefined && a.splice(iTargetIndex, 1);
        }
        /**
	 * Mark cached data as invalid such that a re-read of the data will occur when
	 * the cached data is next requested. Also update from the data source object.
	 *
	 * @param {object} settings DataTables settings object
	 * @param {int}    rowIdx   Row index to invalidate
	 * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
	 *     or 'data'
	 * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
	 *     row will be invalidated
	 * @memberof DataTable#oApi
	 *
	 * @todo For the modularisation of v1.11 this will need to become a callback, so
	 *   the sort and filter methods can subscribe to it. That will required
	 *   initialisation options for sorting, which is why it is not already baked in
	 */
        function _fnInvalidate(settings, rowIdx, src, colIdx) {
            var i, ien, row = settings.aoData[rowIdx], cellWrite = function(cell, col) {
                // This is very frustrating, but in IE if you just write directly
                // to innerHTML, and elements that are overwritten are GC'ed,
                // even if there is a reference to them elsewhere
                for (;cell.childNodes.length; ) cell.removeChild(cell.firstChild);
                cell.innerHTML = _fnGetCellData(settings, rowIdx, col, "display");
            };
            // Are we reading last data from DOM or the data object?
            if ("dom" !== src && (src && "auto" !== src || "dom" !== row.src)) {
                // Reading from data object, update the DOM
                var cells = row.anCells;
                if (cells) if (colIdx !== undefined) cellWrite(cells[colIdx], colIdx); else for (i = 0, 
                ien = cells.length; ien > i; i++) cellWrite(cells[i], i);
            } else // Read the data from the DOM
            row._aData = _fnGetRowElements(settings, row, colIdx, colIdx === undefined ? undefined : row._aData).data;
            // For both row and cell invalidation, the cached data for sorting and
            // filtering is nulled out
            row._aSortData = null, row._aFilterData = null;
            // Invalidate the type for a specific column (if given) or all columns since
            // the data might have changed
            var cols = settings.aoColumns;
            if (colIdx !== undefined) cols[colIdx].sType = null; else {
                for (i = 0, ien = cols.length; ien > i; i++) cols[i].sType = null;
                // Update DataTables special `DT_*` attributes for the row
                _fnRowAttributes(settings, row);
            }
        }
        /**
	 * Build a data source object from an HTML row, reading the contents of the
	 * cells that are in the row.
	 *
	 * @param {object} settings DataTables settings object
	 * @param {node|object} TR element from which to read data or existing row
	 *   object from which to re-read the data from the cells
	 * @param {int} [colIdx] Optional column index
	 * @param {array|object} [d] Data source object. If `colIdx` is given then this
	 *   parameter should also be given and will be used to write the data into.
	 *   Only the column in question will be written
	 * @returns {object} Object with two parameters: `data` the data read, in
	 *   document order, and `cells` and array of nodes (they can be useful to the
	 *   caller, so rather than needing a second traversal to get them, just return
	 *   them from here).
	 * @memberof DataTable#oApi
	 */
        function _fnGetRowElements(settings, row, colIdx, d) {
            var name, col, contents, tds = [], td = row.firstChild, i = 0, columns = settings.aoColumns, objectRead = settings._rowReadObject;
            // Allow the data object to be passed in, or construct
            d = d !== undefined ? d : objectRead ? {} : [];
            var attr = function(str, td) {
                if ("string" == typeof str) {
                    var idx = str.indexOf("@");
                    if (-1 !== idx) {
                        var attr = str.substring(idx + 1), setter = _fnSetObjectDataFn(str);
                        setter(d, td.getAttribute(attr));
                    }
                }
            }, cellProcess = function(cell) {
                if (colIdx === undefined || colIdx === i) if (col = columns[i], contents = $.trim(cell.innerHTML), 
                col && col._bAttrSrc) {
                    var setter = _fnSetObjectDataFn(col.mData._);
                    setter(d, contents), attr(col.mData.sort, cell), attr(col.mData.type, cell), attr(col.mData.filter, cell);
                } else // Depending on the `data` option for the columns the data can
                // be read to either an object or an array.
                objectRead ? (col._setter || (// Cache the setter function
                col._setter = _fnSetObjectDataFn(col.mData)), col._setter(d, contents)) : d[i] = contents;
                i++;
            };
            if (td) // `tr` element was passed in
            for (;td; ) name = td.nodeName.toUpperCase(), ("TD" == name || "TH" == name) && (cellProcess(td), 
            tds.push(td)), td = td.nextSibling; else {
                // Existing row object passed in
                tds = row.anCells;
                for (var j = 0, jen = tds.length; jen > j; j++) cellProcess(tds[j]);
            }
            // Read the ID from the DOM if present
            var rowNode = td ? row : row.nTr;
            if (rowNode) {
                var id = rowNode.getAttribute("id");
                id && _fnSetObjectDataFn(settings.rowId)(d, id);
            }
            return {
                data: d,
                cells: tds
            };
        }
        /**
	 * Create a new TR element (and it's TD children) for a row
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iRow Row to consider
	 *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
	 *    DataTables will create a row automatically
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	 *    if nTr is.
	 *  @memberof DataTable#oApi
	 */
        function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {
            var nTr, nTd, oCol, i, iLen, row = oSettings.aoData[iRow], rowData = row._aData, cells = [];
            if (null === row.nTr) {
                /* Process each column */
                for (nTr = nTrIn || document.createElement("tr"), row.nTr = nTr, row.anCells = cells, 
                /* Use a private property on the node to allow reserve mapping from the node
			 * to the aoData array for fast look up
			 */
                nTr._DT_RowIndex = iRow, /* Special parameters can be given by the data source to be used on the row */
                _fnRowAttributes(oSettings, row), i = 0, iLen = oSettings.aoColumns.length; iLen > i; i++) oCol = oSettings.aoColumns[i], 
                nTd = nTrIn ? anTds[i] : document.createElement(oCol.sCellType), cells.push(nTd), 
                // Need to create the HTML if new, or if a rendering function is defined
                (!nTrIn || oCol.mRender || oCol.mData !== i) && (nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, "display")), 
                /* Add user defined class */
                oCol.sClass && (nTd.className += " " + oCol.sClass), // Visibility - add or remove as required
                oCol.bVisible && !nTrIn ? nTr.appendChild(nTd) : !oCol.bVisible && nTrIn && nTd.parentNode.removeChild(nTd), 
                oCol.fnCreatedCell && oCol.fnCreatedCell.call(oSettings.oInstance, nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i);
                _fnCallbackFire(oSettings, "aoRowCreatedCallback", null, [ nTr, rowData, iRow ]);
            }
            // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
            // and deployed
            row.nTr.setAttribute("role", "row");
        }
        /**
	 * Add attributes to a row based on the special `DT_*` parameters in a data
	 * source object.
	 *  @param {object} settings DataTables settings object
	 *  @param {object} DataTables row object for the row to be modified
	 *  @memberof DataTable#oApi
	 */
        function _fnRowAttributes(settings, row) {
            var tr = row.nTr, data = row._aData;
            if (tr) {
                var id = settings.rowIdFn(data);
                if (id && (tr.id = id), data.DT_RowClass) {
                    // Remove any classes added by DT_RowClass before
                    var a = data.DT_RowClass.split(" ");
                    row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a, $(tr).removeClass(row.__rowc.join(" ")).addClass(data.DT_RowClass);
                }
                data.DT_RowAttr && $(tr).attr(data.DT_RowAttr), data.DT_RowData && $(tr).data(data.DT_RowData);
            }
        }
        /**
	 * Create the HTML header for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnBuildHead(oSettings) {
            var i, ien, cell, row, column, thead = oSettings.nTHead, tfoot = oSettings.nTFoot, createHeader = 0 === $("th, td", thead).length, classes = oSettings.oClasses, columns = oSettings.aoColumns;
            for (createHeader && (row = $("<tr/>").appendTo(thead)), i = 0, ien = columns.length; ien > i; i++) column = columns[i], 
            cell = $(column.nTh).addClass(column.sClass), createHeader && cell.appendTo(row), 
            // 1.11 move into sorting
            oSettings.oFeatures.bSort && (cell.addClass(column.sSortingClass), column.bSortable !== !1 && (cell.attr("tabindex", oSettings.iTabIndex).attr("aria-controls", oSettings.sTableId), 
            _fnSortAttachListener(oSettings, column.nTh, i))), column.sTitle != cell[0].innerHTML && cell.html(column.sTitle), 
            _fnRenderer(oSettings, "header")(oSettings, cell, column, classes);
            // Cache the footer cells. Note that we only take the cells from the first
            // row in the footer. If there is more than one row the user wants to
            // interact with, they need to use the table().foot() method. Note also this
            // allows cells to be used for multiple columns using colspan
            if (createHeader && _fnDetectHeader(oSettings.aoHeader, thead), /* ARIA role for the rows */
            $(thead).find(">tr").attr("role", "row"), /* Deal with the footer - add classes if required */
            $(thead).find(">tr>th, >tr>td").addClass(classes.sHeaderTH), $(tfoot).find(">tr>th, >tr>td").addClass(classes.sFooterTH), 
            null !== tfoot) {
                var cells = oSettings.aoFooter[0];
                for (i = 0, ien = cells.length; ien > i; i++) column = columns[i], column.nTf = cells[i].cell, 
                column.sClass && $(column.nTf).addClass(column.sClass);
            }
        }
        /**
	 * Draw the header (or footer) element based on the column visibility states. The
	 * methodology here is to use the layout array from _fnDetectHeader, modified for
	 * the instantaneous column visibility, to construct the new layout. The grid is
	 * traversed over cell at a time in a rows x columns grid fashion, although each
	 * cell insert can cover multiple elements in the grid - which is tracks using the
	 * aApplied array. Cell inserts in the grid will only occur where there isn't
	 * already a cell in that position.
	 *  @param {object} oSettings dataTables settings object
	 *  @param array {objects} aoSource Layout array from _fnDetectHeader
	 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
	 *  @memberof DataTable#oApi
	 */
        function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {
            var i, iLen, j, jLen, k, n, nLocalTr, iRowspan, iColspan, aoLocal = [], aApplied = [], iColumns = oSettings.aoColumns.length;
            if (aoSource) {
                /* Make a copy of the master layout array, but without the visible columns in it */
                for (bIncludeHidden === undefined && (bIncludeHidden = !1), i = 0, iLen = aoSource.length; iLen > i; i++) {
                    /* Remove any columns which are currently hidden */
                    for (aoLocal[i] = aoSource[i].slice(), aoLocal[i].nTr = aoSource[i].nTr, j = iColumns - 1; j >= 0; j--) oSettings.aoColumns[j].bVisible || bIncludeHidden || aoLocal[i].splice(j, 1);
                    /* Prep the applied array - it needs an element for each row */
                    aApplied.push([]);
                }
                for (i = 0, iLen = aoLocal.length; iLen > i; i++) {
                    /* All cells are going to be replaced, so empty out the row */
                    if (nLocalTr = aoLocal[i].nTr) for (;n = nLocalTr.firstChild; ) nLocalTr.removeChild(n);
                    for (j = 0, jLen = aoLocal[i].length; jLen > j; j++) /* Check to see if there is already a cell (row/colspan) covering our target
				 * insert point. If there is, then there is nothing to do.
				 */
                    if (iRowspan = 1, iColspan = 1, aApplied[i][j] === undefined) {
                        /* Expand the cell to cover as many rows as needed */
                        for (nLocalTr.appendChild(aoLocal[i][j].cell), aApplied[i][j] = 1; aoLocal[i + iRowspan] !== undefined && aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell; ) aApplied[i + iRowspan][j] = 1, 
                        iRowspan++;
                        /* Expand the cell to cover as many columns as needed */
                        for (;aoLocal[i][j + iColspan] !== undefined && aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell; ) {
                            /* Must update the applied array over the rows for the columns */
                            for (k = 0; iRowspan > k; k++) aApplied[i + k][j + iColspan] = 1;
                            iColspan++;
                        }
                        /* Do the actual expansion in the DOM */
                        $(aoLocal[i][j].cell).attr("rowspan", iRowspan).attr("colspan", iColspan);
                    }
                }
            }
        }
        /**
	 * Insert the required TR nodes into the table for display
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnDraw(oSettings) {
            /* Provide a pre-callback function which can be used to cancel the draw is false is returned */
            var aPreDraw = _fnCallbackFire(oSettings, "aoPreDrawCallback", "preDraw", [ oSettings ]);
            if (-1 !== $.inArray(!1, aPreDraw)) return void _fnProcessingDisplay(oSettings, !1);
            var anRows = [], iRowCount = 0, asStripeClasses = oSettings.asStripeClasses, iStripes = asStripeClasses.length, oLang = (oSettings.aoOpenRows.length, 
            oSettings.oLanguage), iInitDisplayStart = oSettings.iInitDisplayStart, bServerSide = "ssp" == _fnDataSource(oSettings), aiDisplay = oSettings.aiDisplay;
            oSettings.bDrawing = !0, /* Check and see if we have an initial draw position from state saving */
            iInitDisplayStart !== undefined && -1 !== iInitDisplayStart && (oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart, 
            oSettings.iInitDisplayStart = -1);
            var iDisplayStart = oSettings._iDisplayStart, iDisplayEnd = oSettings.fnDisplayEnd();
            /* Server-side processing draw intercept */
            if (oSettings.bDeferLoading) oSettings.bDeferLoading = !1, oSettings.iDraw++, _fnProcessingDisplay(oSettings, !1); else if (bServerSide) {
                if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) return;
            } else oSettings.iDraw++;
            if (0 !== aiDisplay.length) for (var iStart = bServerSide ? 0 : iDisplayStart, iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd, j = iStart; iEnd > j; j++) {
                var iDataIndex = aiDisplay[j], aoData = oSettings.aoData[iDataIndex];
                null === aoData.nTr && _fnCreateTr(oSettings, iDataIndex);
                var nRow = aoData.nTr;
                /* Remove the old striping classes and then add the new one */
                if (0 !== iStripes) {
                    var sStripe = asStripeClasses[iRowCount % iStripes];
                    aoData._sRowStripe != sStripe && ($(nRow).removeClass(aoData._sRowStripe).addClass(sStripe), 
                    aoData._sRowStripe = sStripe);
                }
                // Row callback functions - might want to manipulate the row
                // iRowCount and j are not currently documented. Are they at all
                // useful?
                _fnCallbackFire(oSettings, "aoRowCallback", null, [ nRow, aoData._aData, iRowCount, j ]), 
                anRows.push(nRow), iRowCount++;
            } else {
                /* Table is empty - create a row with an empty message in it */
                var sZero = oLang.sZeroRecords;
                1 == oSettings.iDraw && "ajax" == _fnDataSource(oSettings) ? sZero = oLang.sLoadingRecords : oLang.sEmptyTable && 0 === oSettings.fnRecordsTotal() && (sZero = oLang.sEmptyTable), 
                anRows[0] = $("<tr/>", {
                    "class": iStripes ? asStripeClasses[0] : ""
                }).append($("<td />", {
                    valign: "top",
                    colSpan: _fnVisbleColumns(oSettings),
                    "class": oSettings.oClasses.sRowEmpty
                }).html(sZero))[0];
            }
            /* Header and footer callbacks */
            _fnCallbackFire(oSettings, "aoHeaderCallback", "header", [ $(oSettings.nTHead).children("tr")[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay ]), 
            _fnCallbackFire(oSettings, "aoFooterCallback", "footer", [ $(oSettings.nTFoot).children("tr")[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay ]);
            var body = $(oSettings.nTBody);
            body.children().detach(), body.append($(anRows)), /* Call all required callback functions for the end of a draw */
            _fnCallbackFire(oSettings, "aoDrawCallback", "draw", [ oSettings ]), /* Draw is complete, sorting and filtering must be as well */
            oSettings.bSorted = !1, oSettings.bFiltered = !1, oSettings.bDrawing = !1;
        }
        /**
	 * Redraw the table - taking account of the various features which are enabled
	 *  @param {object} oSettings dataTables settings object
	 *  @param {boolean} [holdPosition] Keep the current paging position. By default
	 *    the paging is reset to the first page
	 *  @memberof DataTable#oApi
	 */
        function _fnReDraw(settings, holdPosition) {
            var features = settings.oFeatures, sort = features.bSort, filter = features.bFilter;
            sort && _fnSort(settings), filter ? _fnFilterComplete(settings, settings.oPreviousSearch) : // No filtering, so we want to just use the display master
            settings.aiDisplay = settings.aiDisplayMaster.slice(), holdPosition !== !0 && (settings._iDisplayStart = 0), 
            // Let any modules know about the draw hold position state (used by
            // scrolling internally)
            settings._drawHold = holdPosition, _fnDraw(settings), settings._drawHold = !1;
        }
        /**
	 * Add the options to the page HTML for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnAddOptionsHtml(oSettings) {
            var classes = oSettings.oClasses, table = $(oSettings.nTable), holding = $("<div/>").insertBefore(table), features = oSettings.oFeatures, insert = $("<div/>", {
                id: oSettings.sTableId + "_wrapper",
                "class": classes.sWrapper + (oSettings.nTFoot ? "" : " " + classes.sNoFooter)
            });
            oSettings.nHolding = holding[0], oSettings.nTableWrapper = insert[0], oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
            for (var featureNode, cOption, nNewNode, cNext, sAttr, j, aDom = oSettings.sDom.split(""), i = 0; i < aDom.length; i++) {
                if (featureNode = null, cOption = aDom[i], "<" == cOption) {
                    if (/* New container div */
                    nNewNode = $("<div/>")[0], /* Check to see if we should append an id and/or a class name to the container */
                    cNext = aDom[i + 1], "'" == cNext || '"' == cNext) {
                        for (sAttr = "", j = 2; aDom[i + j] != cNext; ) sAttr += aDom[i + j], j++;
                        /* The attribute can be in the format of "#id.class", "#id" or "class" This logic
					 * breaks the string into parts and applies them as needed
					 */
                        if (/* Replace jQuery UI constants @todo depreciated */
                        "H" == sAttr ? sAttr = classes.sJUIHeader : "F" == sAttr && (sAttr = classes.sJUIFooter), 
                        -1 != sAttr.indexOf(".")) {
                            var aSplit = sAttr.split(".");
                            nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1), nNewNode.className = aSplit[1];
                        } else "#" == sAttr.charAt(0) ? nNewNode.id = sAttr.substr(1, sAttr.length - 1) : nNewNode.className = sAttr;
                        i += j;
                    }
                    insert.append(nNewNode), insert = $(nNewNode);
                } else if (">" == cOption) /* End container div */
                insert = insert.parent(); else if ("l" == cOption && features.bPaginate && features.bLengthChange) /* Length */
                featureNode = _fnFeatureHtmlLength(oSettings); else if ("f" == cOption && features.bFilter) /* Filter */
                featureNode = _fnFeatureHtmlFilter(oSettings); else if ("r" == cOption && features.bProcessing) /* pRocessing */
                featureNode = _fnFeatureHtmlProcessing(oSettings); else if ("t" == cOption) /* Table */
                featureNode = _fnFeatureHtmlTable(oSettings); else if ("i" == cOption && features.bInfo) /* Info */
                featureNode = _fnFeatureHtmlInfo(oSettings); else if ("p" == cOption && features.bPaginate) /* Pagination */
                featureNode = _fnFeatureHtmlPaginate(oSettings); else if (0 !== DataTable.ext.feature.length) for (var aoFeatures = DataTable.ext.feature, k = 0, kLen = aoFeatures.length; kLen > k; k++) if (cOption == aoFeatures[k].cFeature) {
                    featureNode = aoFeatures[k].fnInit(oSettings);
                    break;
                }
                /* Add to the 2D features array */
                if (featureNode) {
                    var aanFeatures = oSettings.aanFeatures;
                    aanFeatures[cOption] || (aanFeatures[cOption] = []), aanFeatures[cOption].push(featureNode), 
                    insert.append(featureNode);
                }
            }
            /* Built our DOM structure - replace the holding div with what we want */
            holding.replaceWith(insert), oSettings.nHolding = null;
        }
        /**
	 * Use the DOM source to create up an array of header cells. The idea here is to
	 * create a layout grid (array) of rows x columns, which contains a reference
	 * to the cell that that point in the grid (regardless of col/rowspan), such that
	 * any column / row could be removed and the new grid constructed
	 *  @param array {object} aLayout Array to store the calculated layout in
	 *  @param {node} nThead The header/footer element for the table
	 *  @memberof DataTable#oApi
	 */
        function _fnDetectHeader(aLayout, nThead) {
            var nTr, nCell, i, k, l, iLen, iColShifted, iColumn, iColspan, iRowspan, bUnique, nTrs = $(nThead).children("tr"), fnShiftCol = function(a, i, j) {
                for (var k = a[i]; k[j]; ) j++;
                return j;
            };
            /* We know how many rows there are in the layout - so prep it */
            for (aLayout.splice(0, aLayout.length), i = 0, iLen = nTrs.length; iLen > i; i++) aLayout.push([]);
            /* Calculate a layout array */
            for (i = 0, iLen = nTrs.length; iLen > i; i++) for (nTr = nTrs[i], iColumn = 0, 
            /* For every cell in the row... */
            nCell = nTr.firstChild; nCell; ) {
                if ("TD" == nCell.nodeName.toUpperCase() || "TH" == nCell.nodeName.toUpperCase()) /* If there is col / rowspan, copy the information into the layout grid */
                for (/* Get the col and rowspan attributes from the DOM and sanitise them */
                iColspan = 1 * nCell.getAttribute("colspan"), iRowspan = 1 * nCell.getAttribute("rowspan"), 
                iColspan = iColspan && 0 !== iColspan && 1 !== iColspan ? iColspan : 1, iRowspan = iRowspan && 0 !== iRowspan && 1 !== iRowspan ? iRowspan : 1, 
                /* There might be colspan cells already in this row, so shift our target
					 * accordingly
					 */
                iColShifted = fnShiftCol(aLayout, i, iColumn), /* Cache calculation for unique columns */
                bUnique = 1 === iColspan ? !0 : !1, l = 0; iColspan > l; l++) for (k = 0; iRowspan > k; k++) aLayout[i + k][iColShifted + l] = {
                    cell: nCell,
                    unique: bUnique
                }, aLayout[i + k].nTr = nTr;
                nCell = nCell.nextSibling;
            }
        }
        /**
	 * Get an array of unique th elements, one for each column
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} nHeader automatically detect the layout from this node - optional
	 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
	 *  @returns array {node} aReturn list of unique th's
	 *  @memberof DataTable#oApi
	 */
        function _fnGetUniqueThs(oSettings, nHeader, aLayout) {
            var aReturn = [];
            aLayout || (aLayout = oSettings.aoHeader, nHeader && (aLayout = [], _fnDetectHeader(aLayout, nHeader)));
            for (var i = 0, iLen = aLayout.length; iLen > i; i++) for (var j = 0, jLen = aLayout[i].length; jLen > j; j++) !aLayout[i][j].unique || aReturn[j] && oSettings.bSortCellsTop || (aReturn[j] = aLayout[i][j].cell);
            return aReturn;
        }
        /**
	 * Create an Ajax call based on the table's settings, taking into account that
	 * parameters can have multiple forms, and backwards compatibility.
	 *
	 * @param {object} oSettings dataTables settings object
	 * @param {array} data Data to send to the server, required by
	 *     DataTables - may be augmented by developer callbacks
	 * @param {function} fn Callback function to run when data is obtained
	 */
        function _fnBuildAjax(oSettings, data, fn) {
            // Convert to object based for 1.10+ if using the old array scheme which can
            // come from server-side processing or serverParams
            if (// Compatibility with 1.9-, allow fnServerData and event to manipulate
            _fnCallbackFire(oSettings, "aoServerParams", "serverParams", [ data ]), data && $.isArray(data)) {
                var tmp = {}, rbracket = /(.*?)\[\]$/;
                $.each(data, function(key, val) {
                    var match = val.name.match(rbracket);
                    if (match) {
                        // Support for arrays
                        var name = match[0];
                        tmp[name] || (tmp[name] = []), tmp[name].push(val.value);
                    } else tmp[val.name] = val.value;
                }), data = tmp;
            }
            var ajaxData, ajax = oSettings.ajax, instance = oSettings.oInstance, callback = function(json) {
                _fnCallbackFire(oSettings, null, "xhr", [ oSettings, json, oSettings.jqXHR ]), fn(json);
            };
            if ($.isPlainObject(ajax) && ajax.data) {
                ajaxData = ajax.data;
                var newData = $.isFunction(ajaxData) ? ajaxData(data, oSettings) : // fn can manipulate data or return
                ajaxData;
                // an object object or array to merge
                // If the function returned something, use that alone
                data = $.isFunction(ajaxData) && newData ? newData : $.extend(!0, data, newData), 
                // Remove the data property as we've resolved it already and don't want
                // jQuery to do it again (it is restored at the end of the function)
                delete ajax.data;
            }
            var baseAjax = {
                data: data,
                success: function(json) {
                    var error = json.error || json.sError;
                    error && _fnLog(oSettings, 0, error), oSettings.json = json, callback(json);
                },
                dataType: "json",
                cache: !1,
                type: oSettings.sServerMethod,
                error: function(xhr, error, thrown) {
                    var ret = _fnCallbackFire(oSettings, null, "xhr", [ oSettings, null, oSettings.jqXHR ]);
                    -1 === $.inArray(!0, ret) && ("parsererror" == error ? _fnLog(oSettings, 0, "Invalid JSON response", 1) : 4 === xhr.readyState && _fnLog(oSettings, 0, "Ajax error", 7)), 
                    _fnProcessingDisplay(oSettings, !1);
                }
            };
            // Store the data submitted for the API
            oSettings.oAjaxData = data, // Allow plug-ins and external processes to modify the data
            _fnCallbackFire(oSettings, null, "preXhr", [ oSettings, data ]), oSettings.fnServerData ? // DataTables 1.9- compatibility
            oSettings.fnServerData.call(instance, oSettings.sAjaxSource, $.map(data, function(val, key) {
                // Need to convert back to 1.9 trad format
                return {
                    name: key,
                    value: val
                };
            }), callback, oSettings) : oSettings.sAjaxSource || "string" == typeof ajax ? // DataTables 1.9- compatibility
            oSettings.jqXHR = $.ajax($.extend(baseAjax, {
                url: ajax || oSettings.sAjaxSource
            })) : $.isFunction(ajax) ? // Is a function - let the caller define what needs to be done
            oSettings.jqXHR = ajax.call(instance, data, callback, oSettings) : (// Object to extend the base settings
            oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax)), // Restore for next time around
            ajax.data = ajaxData);
        }
        /**
	 * Update the table using an Ajax call
	 *  @param {object} settings dataTables settings object
	 *  @returns {boolean} Block the table drawing or not
	 *  @memberof DataTable#oApi
	 */
        function _fnAjaxUpdate(settings) {
            return settings.bAjaxDataGet ? (settings.iDraw++, _fnProcessingDisplay(settings, !0), 
            _fnBuildAjax(settings, _fnAjaxParameters(settings), function(json) {
                _fnAjaxUpdateDraw(settings, json);
            }), !1) : !0;
        }
        /**
	 * Build up the parameters in an object needed for a server-side processing
	 * request. Note that this is basically done twice, is different ways - a modern
	 * method which is used by default in DataTables 1.10 which uses objects and
	 * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
	 * the sAjaxSource option is used in the initialisation, or the legacyAjax
	 * option is set.
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {bool} block the table drawing or not
	 *  @memberof DataTable#oApi
	 */
        function _fnAjaxParameters(settings) {
            var i, dataProp, column, columnSearch, columns = settings.aoColumns, columnCount = columns.length, features = settings.oFeatures, preSearch = settings.oPreviousSearch, preColSearch = settings.aoPreSearchCols, data = [], sort = _fnSortFlatten(settings), displayStart = settings._iDisplayStart, displayLength = features.bPaginate !== !1 ? settings._iDisplayLength : -1, param = function(name, value) {
                data.push({
                    name: name,
                    value: value
                });
            };
            // DataTables 1.9- compatible method
            param("sEcho", settings.iDraw), param("iColumns", columnCount), param("sColumns", _pluck(columns, "sName").join(",")), 
            param("iDisplayStart", displayStart), param("iDisplayLength", displayLength);
            // DataTables 1.10+ method
            var d = {
                draw: settings.iDraw,
                columns: [],
                order: [],
                start: displayStart,
                length: displayLength,
                search: {
                    value: preSearch.sSearch,
                    regex: preSearch.bRegex
                }
            };
            for (i = 0; columnCount > i; i++) column = columns[i], columnSearch = preColSearch[i], 
            dataProp = "function" == typeof column.mData ? "function" : column.mData, d.columns.push({
                data: dataProp,
                name: column.sName,
                searchable: column.bSearchable,
                orderable: column.bSortable,
                search: {
                    value: columnSearch.sSearch,
                    regex: columnSearch.bRegex
                }
            }), param("mDataProp_" + i, dataProp), features.bFilter && (param("sSearch_" + i, columnSearch.sSearch), 
            param("bRegex_" + i, columnSearch.bRegex), param("bSearchable_" + i, column.bSearchable)), 
            features.bSort && param("bSortable_" + i, column.bSortable);
            features.bFilter && (param("sSearch", preSearch.sSearch), param("bRegex", preSearch.bRegex)), 
            features.bSort && ($.each(sort, function(i, val) {
                d.order.push({
                    column: val.col,
                    dir: val.dir
                }), param("iSortCol_" + i, val.col), param("sSortDir_" + i, val.dir);
            }), param("iSortingCols", sort.length));
            // If the legacy.ajax parameter is null, then we automatically decide which
            // form to use, based on sAjaxSource
            var legacy = DataTable.ext.legacy.ajax;
            return null === legacy ? settings.sAjaxSource ? data : d : legacy ? data : d;
        }
        /**
	 * Data the data from the server (nuking the old) and redraw the table
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} json json data return from the server.
	 *  @param {string} json.sEcho Tracking flag for DataTables to match requests
	 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
	 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
	 *  @param {array} json.aaData The data to display on this page
	 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
	 *  @memberof DataTable#oApi
	 */
        function _fnAjaxUpdateDraw(settings, json) {
            // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
            // Support both
            var compat = function(old, modern) {
                return json[old] !== undefined ? json[old] : json[modern];
            }, data = _fnAjaxDataSrc(settings, json), draw = compat("sEcho", "draw"), recordsTotal = compat("iTotalRecords", "recordsTotal"), recordsFiltered = compat("iTotalDisplayRecords", "recordsFiltered");
            if (draw) {
                // Protect against out of sequence returns
                if (1 * draw < settings.iDraw) return;
                settings.iDraw = 1 * draw;
            }
            _fnClearTable(settings), settings._iRecordsTotal = parseInt(recordsTotal, 10), settings._iRecordsDisplay = parseInt(recordsFiltered, 10);
            for (var i = 0, ien = data.length; ien > i; i++) _fnAddData(settings, data[i]);
            settings.aiDisplay = settings.aiDisplayMaster.slice(), settings.bAjaxDataGet = !1, 
            _fnDraw(settings), settings._bInitComplete || _fnInitComplete(settings, json), settings.bAjaxDataGet = !0, 
            _fnProcessingDisplay(settings, !1);
        }
        /**
	 * Get the data from the JSON data source to use for drawing a table. Using
	 * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
	 * source object, or from a processing function.
	 *  @param {object} oSettings dataTables settings object
	 *  @param  {object} json Data source object / array from the server
	 *  @return {array} Array of data to use
	 */
        function _fnAjaxDataSrc(oSettings, json) {
            var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ? oSettings.ajax.dataSrc : oSettings.sAjaxDataProp;
            // Compatibility with 1.9-.
            // Compatibility with 1.9-. In order to read from aaData, check if the
            // default has been changed, if not, check for aaData
            // Compatibility with 1.9-.
            // Compatibility with 1.9-. In order to read from aaData, check if the
            // default has been changed, if not, check for aaData
            return "data" === dataSrc ? json.aaData || json[dataSrc] : "" !== dataSrc ? _fnGetObjectDataFn(dataSrc)(json) : json;
        }
        /**
	 * Generate the node required for filtering text
	 *  @returns {node} Filter control element
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnFeatureHtmlFilter(settings) {
            var classes = settings.oClasses, tableId = settings.sTableId, language = settings.oLanguage, previousSearch = settings.oPreviousSearch, features = settings.aanFeatures, input = '<input type="search" class="' + classes.sFilterInput + '"/>', str = language.sSearch;
            str = str.match(/_INPUT_/) ? str.replace("_INPUT_", input) : str + input;
            var filter = $("<div/>", {
                id: features.f ? null : tableId + "_filter",
                "class": classes.sFilter
            }).append($("<label/>").append(str)), searchFn = function() {
                /* Update all other filter input elements for the new display */
                var val = (features.f, this.value ? this.value : "");
                // mental IE8 fix :-(
                /* Now do the filter */
                val != previousSearch.sSearch && (_fnFilterComplete(settings, {
                    sSearch: val,
                    bRegex: previousSearch.bRegex,
                    bSmart: previousSearch.bSmart,
                    bCaseInsensitive: previousSearch.bCaseInsensitive
                }), // Need to redraw, without resorting
                settings._iDisplayStart = 0, _fnDraw(settings));
            }, searchDelay = null !== settings.searchDelay ? settings.searchDelay : "ssp" === _fnDataSource(settings) ? 400 : 0, jqFilter = $("input", filter).val(previousSearch.sSearch).attr("placeholder", language.sSearchPlaceholder).bind("keyup.DT search.DT input.DT paste.DT cut.DT", searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn).bind("keypress.DT", function(e) {
                /* Prevent form submission */
                /* Prevent form submission */
                return 13 == e.keyCode ? !1 : void 0;
            }).attr("aria-controls", tableId);
            // Update the input elements whenever the table is filtered
            return $(settings.nTable).on("search.dt.DT", function(ev, s) {
                if (settings === s) // IE9 throws an 'unknown error' if document.activeElement is used
                // inside an iframe or frame...
                try {
                    jqFilter[0] !== document.activeElement && jqFilter.val(previousSearch.sSearch);
                } catch (e) {}
            }), filter[0];
        }
        /**
	 * Filter the table using both the global filter and column based filtering
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} oSearch search information
	 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
	 *  @memberof DataTable#oApi
	 */
        function _fnFilterComplete(oSettings, oInput, iForce) {
            var oPrevSearch = oSettings.oPreviousSearch, aoPrevSearch = oSettings.aoPreSearchCols, fnSaveFilter = function(oFilter) {
                /* Save the filtering values */
                oPrevSearch.sSearch = oFilter.sSearch, oPrevSearch.bRegex = oFilter.bRegex, oPrevSearch.bSmart = oFilter.bSmart, 
                oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
            }, fnRegex = function(o) {
                // Backwards compatibility with the bEscapeRegex option
                return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
            };
            /* In server-side processing all filtering is done by the server, so no point hanging around here */
            if (// Resolve any column types that are unknown due to addition or invalidation
            // @todo As per sort - can this be moved into an event handler?
            _fnColumnTypes(oSettings), "ssp" != _fnDataSource(oSettings)) {
                /* Global filter */
                _fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive), 
                fnSaveFilter(oInput);
                /* Now do the individual column filter */
                for (var i = 0; i < aoPrevSearch.length; i++) _fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]), aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);
                /* Custom filtering */
                _fnFilterCustom(oSettings);
            } else fnSaveFilter(oInput);
            /* Tell the draw function we have been filtering */
            oSettings.bFiltered = !0, _fnCallbackFire(oSettings, null, "search", [ oSettings ]);
        }
        /**
	 * Apply custom filtering functions
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnFilterCustom(settings) {
            for (var row, rowIdx, filters = DataTable.ext.search, displayRows = settings.aiDisplay, i = 0, ien = filters.length; ien > i; i++) {
                // Loop over each row and see if it should be included
                for (var rows = [], j = 0, jen = displayRows.length; jen > j; j++) rowIdx = displayRows[j], 
                row = settings.aoData[rowIdx], filters[i](settings, row._aFilterData, rowIdx, row._aData, j) && rows.push(rowIdx);
                // So the array reference doesn't break set the results into the
                // existing array
                displayRows.length = 0, $.merge(displayRows, rows);
            }
        }
        /**
	 * Filter the table on a per-column basis
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sInput string to filter on
	 *  @param {int} iColumn column to filter
	 *  @param {bool} bRegex treat search string as a regular expression or not
	 *  @param {bool} bSmart use smart filtering or not
	 *  @param {bool} bCaseInsensitive Do case insenstive matching or not
	 *  @memberof DataTable#oApi
	 */
        function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {
            if ("" !== searchStr) for (var data, display = settings.aiDisplay, rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive), i = display.length - 1; i >= 0; i--) data = settings.aoData[display[i]]._aFilterData[colIdx], 
            rpSearch.test(data) || display.splice(i, 1);
        }
        /**
	 * Filter the data table based on user input and draw the table
	 *  @param {object} settings dataTables settings object
	 *  @param {string} input string to filter on
	 *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
	 *  @param {bool} regex treat as a regular expression or not
	 *  @param {bool} smart perform smart filtering or not
	 *  @param {bool} caseInsensitive Do case insenstive matching or not
	 *  @memberof DataTable#oApi
	 */
        function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {
            var display, invalidated, i, rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive), prevSearch = settings.oPreviousSearch.sSearch, displayMaster = settings.aiDisplayMaster;
            // If the input is blank - we just want the full data set
            if (// Need to take account of custom filtering functions - always filter
            0 !== DataTable.ext.search.length && (force = !0), // Check if any of the rows were invalidated
            invalidated = _fnFilterData(settings), input.length <= 0) settings.aiDisplay = displayMaster.slice(); else for (// New search - start from the master array
            (invalidated || force || prevSearch.length > input.length || 0 !== input.indexOf(prevSearch) || settings.bSorted) && (settings.aiDisplay = displayMaster.slice()), 
            // Search the display array
            display = settings.aiDisplay, i = display.length - 1; i >= 0; i--) rpSearch.test(settings.aoData[display[i]]._sFilterRow) || display.splice(i, 1);
        }
        /**
	 * Build a regular expression object suitable for searching a table
	 *  @param {string} sSearch string to search for
	 *  @param {bool} bRegex treat as a regular expression or not
	 *  @param {bool} bSmart perform smart filtering or not
	 *  @param {bool} bCaseInsensitive Do case insensitive matching or not
	 *  @returns {RegExp} constructed object
	 *  @memberof DataTable#oApi
	 */
        function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {
            if (search = regex ? search : _fnEscapeRegex(search), smart) {
                /* For smart filtering we want to allow the search to work regardless of
			 * word order. We also want double quoted text to be preserved, so word
			 * order is important - a la google. So this is what we want to
			 * generate:
			 * 
			 * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
			 */
                var a = $.map(search.match(/"[^"]+"|[^ ]+/g) || [ "" ], function(word) {
                    if ('"' === word.charAt(0)) {
                        var m = word.match(/^"(.*)"$/);
                        word = m ? m[1] : word;
                    }
                    return word.replace('"', "");
                });
                search = "^(?=.*?" + a.join(")(?=.*?") + ").*$";
            }
            return new RegExp(search, caseInsensitive ? "i" : "");
        }
        /**
	 * Escape a string such that it can be used in a regular expression
	 *  @param {string} sVal string to escape
	 *  @returns {string} escaped string
	 *  @memberof DataTable#oApi
	 */
        function _fnEscapeRegex(sVal) {
            return sVal.replace(_re_escape_regex, "\\$1");
        }
        // Update the filtering data for each row if needed (by invalidation or first run)
        function _fnFilterData(settings) {
            var column, i, j, ien, jen, filterData, cellData, row, columns = settings.aoColumns, fomatters = DataTable.ext.type.search, wasInvalidated = !1;
            for (i = 0, ien = settings.aoData.length; ien > i; i++) if (row = settings.aoData[i], 
            !row._aFilterData) {
                for (filterData = [], j = 0, jen = columns.length; jen > j; j++) column = columns[j], 
                column.bSearchable ? (cellData = _fnGetCellData(settings, i, j, "filter"), fomatters[column.sType] && (cellData = fomatters[column.sType](cellData)), 
                // Search in DataTables 1.10 is string based. In 1.11 this
                // should be altered to also allow strict type checking.
                null === cellData && (cellData = ""), "string" != typeof cellData && cellData.toString && (cellData = cellData.toString())) : cellData = "", 
                // If it looks like there is an HTML entity in the string,
                // attempt to decode it so sorting works as expected. Note that
                // we could use a single line of jQuery to do this, but the DOM
                // method used here is much faster http://jsperf.com/html-decode
                cellData.indexOf && -1 !== cellData.indexOf("&") && (__filter_div.innerHTML = cellData, 
                cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText), 
                cellData.replace && (cellData = cellData.replace(/[\r\n]/g, "")), filterData.push(cellData);
                row._aFilterData = filterData, row._sFilterRow = filterData.join("  "), wasInvalidated = !0;
            }
            return wasInvalidated;
        }
        /**
	 * Convert from the internal Hungarian notation to camelCase for external
	 * interaction
	 *  @param {object} obj Object to convert
	 *  @returns {object} Inverted object
	 *  @memberof DataTable#oApi
	 */
        function _fnSearchToCamel(obj) {
            return {
                search: obj.sSearch,
                smart: obj.bSmart,
                regex: obj.bRegex,
                caseInsensitive: obj.bCaseInsensitive
            };
        }
        /**
	 * Convert from camelCase notation to the internal Hungarian. We could use the
	 * Hungarian convert function here, but this is cleaner
	 *  @param {object} obj Object to convert
	 *  @returns {object} Inverted object
	 *  @memberof DataTable#oApi
	 */
        function _fnSearchToHung(obj) {
            return {
                sSearch: obj.search,
                bSmart: obj.smart,
                bRegex: obj.regex,
                bCaseInsensitive: obj.caseInsensitive
            };
        }
        /**
	 * Generate the node required for the info display
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {node} Information element
	 *  @memberof DataTable#oApi
	 */
        function _fnFeatureHtmlInfo(settings) {
            var tid = settings.sTableId, nodes = settings.aanFeatures.i, n = $("<div/>", {
                "class": settings.oClasses.sInfo,
                id: nodes ? null : tid + "_info"
            });
            // Update display on each draw
            // Table is described by our info div
            return nodes || (settings.aoDrawCallback.push({
                fn: _fnUpdateInfo,
                sName: "information"
            }), n.attr("role", "status").attr("aria-live", "polite"), $(settings.nTable).attr("aria-describedby", tid + "_info")), 
            n[0];
        }
        /**
	 * Update the information elements in the display
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnUpdateInfo(settings) {
            /* Show information about the table */
            var nodes = settings.aanFeatures.i;
            if (0 !== nodes.length) {
                var lang = settings.oLanguage, start = settings._iDisplayStart + 1, end = settings.fnDisplayEnd(), max = settings.fnRecordsTotal(), total = settings.fnRecordsDisplay(), out = total ? lang.sInfo : lang.sInfoEmpty;
                total !== max && (/* Record set after filtering */
                out += " " + lang.sInfoFiltered), // Convert the macros
                out += lang.sInfoPostFix, out = _fnInfoMacros(settings, out);
                var callback = lang.fnInfoCallback;
                null !== callback && (out = callback.call(settings.oInstance, settings, start, end, max, total, out)), 
                $(nodes).html(out);
            }
        }
        function _fnInfoMacros(settings, str) {
            // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
            // internally
            var formatter = settings.fnFormatNumber, start = settings._iDisplayStart + 1, len = settings._iDisplayLength, vis = settings.fnRecordsDisplay(), all = -1 === len;
            return str.replace(/_START_/g, formatter.call(settings, start)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));
        }
        /**
	 * Draw the table for the first time, adding all required features
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnInitialise(settings) {
            var i, iLen, column, iAjaxStart = settings.iInitDisplayStart, columns = settings.aoColumns, features = settings.oFeatures, deferLoading = settings.bDeferLoading;
            // value modified by the draw
            /* Ensure that the table data is fully initialised */
            if (!settings.bInitialised) return void setTimeout(function() {
                _fnInitialise(settings);
            }, 200);
            for (/* Show the display HTML options */
            _fnAddOptionsHtml(settings), /* Build and draw the header / footer for the table */
            _fnBuildHead(settings), _fnDrawHead(settings, settings.aoHeader), _fnDrawHead(settings, settings.aoFooter), 
            /* Okay to show that something is going on now */
            _fnProcessingDisplay(settings, !0), /* Calculate sizes for columns */
            features.bAutoWidth && _fnCalculateColumnWidths(settings), i = 0, iLen = columns.length; iLen > i; i++) column = columns[i], 
            column.sWidth && (column.nTh.style.width = _fnStringToCss(column.sWidth));
            _fnCallbackFire(settings, null, "preInit", [ settings ]), // If there is default sorting required - let's do it. The sort function
            // will do the drawing for us. Otherwise we draw the table regardless of the
            // Ajax source - this allows the table to look initialised for Ajax sourcing
            // data (show 'loading' message possibly)
            _fnReDraw(settings);
            // Server-side processing init complete is done by _fnAjaxUpdateDraw
            var dataSrc = _fnDataSource(settings);
            ("ssp" != dataSrc || deferLoading) && (// if there is an ajax source load the data
            "ajax" == dataSrc ? _fnBuildAjax(settings, [], function(json) {
                var aData = _fnAjaxDataSrc(settings, json);
                // Got the data - add it to the table
                for (i = 0; i < aData.length; i++) _fnAddData(settings, aData[i]);
                // Reset the init display for cookie saving. We've already done
                // a filter, and therefore cleared it before. So we need to make
                // it appear 'fresh'
                settings.iInitDisplayStart = iAjaxStart, _fnReDraw(settings), _fnProcessingDisplay(settings, !1), 
                _fnInitComplete(settings, json);
            }, settings) : (_fnProcessingDisplay(settings, !1), _fnInitComplete(settings)));
        }
        /**
	 * Draw the table for the first time, adding all required features
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
	 *    with client-side processing (optional)
	 *  @memberof DataTable#oApi
	 */
        function _fnInitComplete(settings, json) {
            settings._bInitComplete = !0, // When data was added after the initialisation (data or Ajax) we need to
            // calculate the column sizing
            (json || settings.oInit.aaData) && _fnAdjustColumnSizing(settings), _fnCallbackFire(settings, "aoInitComplete", "init", [ settings, json ]);
        }
        function _fnLengthChange(settings, val) {
            var len = parseInt(val, 10);
            settings._iDisplayLength = len, _fnLengthOverflow(settings), // Fire length change event
            _fnCallbackFire(settings, null, "length", [ settings, len ]);
        }
        /**
	 * Generate the node required for user display length changing
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Display length feature node
	 *  @memberof DataTable#oApi
	 */
        function _fnFeatureHtmlLength(settings) {
            for (var classes = settings.oClasses, tableId = settings.sTableId, menu = settings.aLengthMenu, d2 = $.isArray(menu[0]), lengths = d2 ? menu[0] : menu, language = d2 ? menu[1] : menu, select = $("<select/>", {
                name: tableId + "_length",
                "aria-controls": tableId,
                "class": classes.sLengthSelect
            }), i = 0, ien = lengths.length; ien > i; i++) select[0][i] = new Option(language[i], lengths[i]);
            var div = $("<div><label/></div>").addClass(classes.sLength);
            // Can't use `select` variable as user might provide their own and the
            // reference is broken by the use of outerHTML
            // Update node value whenever anything changes the table's length
            return settings.aanFeatures.l || (div[0].id = tableId + "_length"), div.children().append(settings.oLanguage.sLengthMenu.replace("_MENU_", select[0].outerHTML)), 
            $("select", div).val(settings._iDisplayLength).bind("change.DT", function(e) {
                _fnLengthChange(settings, $(this).val()), _fnDraw(settings);
            }), $(settings.nTable).bind("length.dt.DT", function(e, s, len) {
                settings === s && $("select", div).val(len);
            }), div[0];
        }
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Note that most of the paging logic is done in
	 * DataTable.ext.pager
	 */
        /**
	 * Generate the node required for default pagination
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {node} Pagination feature node
	 *  @memberof DataTable#oApi
	 */
        function _fnFeatureHtmlPaginate(settings) {
            var type = settings.sPaginationType, plugin = DataTable.ext.pager[type], modern = "function" == typeof plugin, redraw = function(settings) {
                _fnDraw(settings);
            }, node = $("<div/>").addClass(settings.oClasses.sPaging + type)[0], features = settings.aanFeatures;
            /* Add a draw callback for the pagination on first instance, to update the paging display */
            return modern || plugin.fnInit(settings, node, redraw), features.p || (node.id = settings.sTableId + "_paginate", 
            settings.aoDrawCallback.push({
                fn: function(settings) {
                    if (modern) {
                        var i, ien, start = settings._iDisplayStart, len = settings._iDisplayLength, visRecords = settings.fnRecordsDisplay(), all = -1 === len, page = all ? 0 : Math.ceil(start / len), pages = all ? 1 : Math.ceil(visRecords / len), buttons = plugin(page, pages);
                        for (i = 0, ien = features.p.length; ien > i; i++) _fnRenderer(settings, "pageButton")(settings, features.p[i], i, buttons, page, pages);
                    } else plugin.fnUpdate(settings, redraw);
                },
                sName: "pagination"
            })), node;
        }
        /**
	 * Alter the display settings to change the page
	 *  @param {object} settings DataTables settings object
	 *  @param {string|int} action Paging action to take: "first", "previous",
	 *    "next" or "last" or page number to jump to (integer)
	 *  @param [bool] redraw Automatically draw the update or not
	 *  @returns {bool} true page has changed, false - no change
	 *  @memberof DataTable#oApi
	 */
        function _fnPageChange(settings, action, redraw) {
            var start = settings._iDisplayStart, len = settings._iDisplayLength, records = settings.fnRecordsDisplay();
            0 === records || -1 === len ? start = 0 : "number" == typeof action ? (start = action * len, 
            start > records && (start = 0)) : "first" == action ? start = 0 : "previous" == action ? (start = len >= 0 ? start - len : 0, 
            0 > start && (start = 0)) : "next" == action ? records > start + len && (start += len) : "last" == action ? start = Math.floor((records - 1) / len) * len : _fnLog(settings, 0, "Unknown paging action: " + action, 5);
            var changed = settings._iDisplayStart !== start;
            return settings._iDisplayStart = start, changed && (_fnCallbackFire(settings, null, "page", [ settings ]), 
            redraw && _fnDraw(settings)), changed;
        }
        /**
	 * Generate the node required for the processing node
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Processing element
	 *  @memberof DataTable#oApi
	 */
        function _fnFeatureHtmlProcessing(settings) {
            return $("<div/>", {
                id: settings.aanFeatures.r ? null : settings.sTableId + "_processing",
                "class": settings.oClasses.sProcessing
            }).html(settings.oLanguage.sProcessing).insertBefore(settings.nTable)[0];
        }
        /**
	 * Display or hide the processing indicator
	 *  @param {object} settings dataTables settings object
	 *  @param {bool} show Show the processing indicator (true) or not (false)
	 *  @memberof DataTable#oApi
	 */
        function _fnProcessingDisplay(settings, show) {
            settings.oFeatures.bProcessing && $(settings.aanFeatures.r).css("display", show ? "block" : "none"), 
            _fnCallbackFire(settings, null, "processing", [ settings, show ]);
        }
        /**
	 * Add any control elements for the table - specifically scrolling
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Node to add to the DOM
	 *  @memberof DataTable#oApi
	 */
        function _fnFeatureHtmlTable(settings) {
            var table = $(settings.nTable);
            // Add the ARIA grid role to the table
            table.attr("role", "grid");
            // Scrolling from here on in
            var scroll = settings.oScroll;
            if ("" === scroll.sX && "" === scroll.sY) return settings.nTable;
            var scrollX = scroll.sX, scrollY = scroll.sY, classes = settings.oClasses, caption = table.children("caption"), captionSide = caption.length ? caption[0]._captionSide : null, headerClone = $(table[0].cloneNode(!1)), footerClone = $(table[0].cloneNode(!1)), footer = table.children("tfoot"), _div = "<div/>", size = function(s) {
                return s ? _fnStringToCss(s) : null;
            };
            // This is fairly messy, but with x scrolling enabled, if the table has a
            // width attribute, regardless of any width applied using the column width
            // options, the browser will shrink or grow the table as needed to fit into
            // that 100%. That would make the width options useless. So we remove it.
            // This is okay, under the assumption that width:100% is applied to the
            // table in CSS (it is in the default stylesheet) which will set the table
            // width as appropriate (the attribute and css behave differently...)
            scroll.sX && "100%" === table.attr("width") && table.removeAttr("width"), footer.length || (footer = null);
            /*
		 * The HTML structure that we want to generate in this function is:
		 *  div - scroller
		 *    div - scroll head
		 *      div - scroll head inner
		 *        table - scroll head table
		 *          thead - thead
		 *    div - scroll body
		 *      table - table (master table)
		 *        thead - thead clone for sizing
		 *        tbody - tbody
		 *    div - scroll foot
		 *      div - scroll foot inner
		 *        table - scroll foot table
		 *          tfoot - tfoot
		 */
            var scroller = $(_div, {
                "class": classes.sScrollWrapper
            }).append($(_div, {
                "class": classes.sScrollHead
            }).css({
                overflow: "hidden",
                position: "relative",
                border: 0,
                width: scrollX ? size(scrollX) : "100%"
            }).append($(_div, {
                "class": classes.sScrollHeadInner
            }).css({
                "box-sizing": "content-box",
                width: scroll.sXInner || "100%"
            }).append(headerClone.removeAttr("id").css("margin-left", 0).append("top" === captionSide ? caption : null).append(table.children("thead"))))).append($(_div, {
                "class": classes.sScrollBody
            }).css({
                position: "relative",
                overflow: "auto",
                width: size(scrollX)
            }).append(table));
            footer && scroller.append($(_div, {
                "class": classes.sScrollFoot
            }).css({
                overflow: "hidden",
                border: 0,
                width: scrollX ? size(scrollX) : "100%"
            }).append($(_div, {
                "class": classes.sScrollFootInner
            }).append(footerClone.removeAttr("id").css("margin-left", 0).append("bottom" === captionSide ? caption : null).append(table.children("tfoot")))));
            var children = scroller.children(), scrollHead = children[0], scrollBody = children[1], scrollFoot = footer ? children[2] : null;
            // When the body is scrolled, then we also want to scroll the headers
            // On redraw - align columns
            return scrollX && $(scrollBody).on("scroll.DT", function(e) {
                var scrollLeft = this.scrollLeft;
                scrollHead.scrollLeft = scrollLeft, footer && (scrollFoot.scrollLeft = scrollLeft);
            }), $(scrollBody).css(scrollY && scroll.bCollapse ? "max-height" : "height", scrollY), 
            settings.nScrollHead = scrollHead, settings.nScrollBody = scrollBody, settings.nScrollFoot = scrollFoot, 
            settings.aoDrawCallback.push({
                fn: _fnScrollDraw,
                sName: "scrolling"
            }), scroller[0];
        }
        /**
	 * Update the header, footer and body tables for resizing - i.e. column
	 * alignment.
	 *
	 * Welcome to the most horrible function DataTables. The process that this
	 * function follows is basically:
	 *   1. Re-create the table inside the scrolling div
	 *   2. Take live measurements from the DOM
	 *   3. Apply the measurements to align the columns
	 *   4. Clean up
	 *
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnScrollDraw(settings) {
            // Given that this is such a monster function, a lot of variables are use
            // to try and keep the minimised size as small as possible
            var headerTrgEls, footerTrgEls, headerSrcEls, footerSrcEls, headerCopy, footerCopy, idx, correction, sanityWidth, scroll = settings.oScroll, scrollX = scroll.sX, scrollXInner = scroll.sXInner, scrollY = scroll.sY, barWidth = scroll.iBarWidth, divHeader = $(settings.nScrollHead), divHeaderStyle = divHeader[0].style, divHeaderInner = divHeader.children("div"), divHeaderInnerStyle = divHeaderInner[0].style, divHeaderTable = divHeaderInner.children("table"), divBodyEl = settings.nScrollBody, divBody = $(divBodyEl), divBodyStyle = divBodyEl.style, divFooter = $(settings.nScrollFoot), divFooterInner = divFooter.children("div"), divFooterTable = divFooterInner.children("table"), header = $(settings.nTHead), table = $(settings.nTable), tableEl = table[0], tableStyle = tableEl.style, footer = settings.nTFoot ? $(settings.nTFoot) : null, browser = settings.oBrowser, ie67 = browser.bScrollOversize, headerWidths = [], footerWidths = [], headerContent = [], zeroOut = function(nSizer) {
                var style = nSizer.style;
                style.paddingTop = "0", style.paddingBottom = "0", style.borderTopWidth = "0", style.borderBottomWidth = "0", 
                style.height = 0;
            };
            /*
		 * 1. Re-create the table inside the scrolling div
		 */
            // Remove the old minimised thead and tfoot elements in the inner table
            table.children("thead, tfoot").remove(), // Clone the current header and footer elements and then place it into the inner table
            headerCopy = header.clone().prependTo(table), headerTrgEls = header.find("tr"), 
            // original header is in its own table
            headerSrcEls = headerCopy.find("tr"), headerCopy.find("th, td").removeAttr("tabindex"), 
            footer && (footerCopy = footer.clone().prependTo(table), footerTrgEls = footer.find("tr"), 
            // the original tfoot is in its own table and must be sized
            footerSrcEls = footerCopy.find("tr")), /*
		 * 2. Take live measurements from the DOM - do not alter the DOM itself!
		 */
            // Remove old sizing and apply the calculated column widths
            // Get the unique column headers in the newly created (cloned) header. We want to apply the
            // calculated sizes to this header
            scrollX || (divBodyStyle.width = "100%", divHeader[0].style.width = "100%"), $.each(_fnGetUniqueThs(settings, headerCopy), function(i, el) {
                idx = _fnVisibleToColumnIndex(settings, i), el.style.width = settings.aoColumns[idx].sWidth;
            }), footer && _fnApplyToChildren(function(n) {
                n.style.width = "";
            }, footerSrcEls), // Size the table as a whole
            sanityWidth = table.outerWidth(), "" === scrollX ? (// No x scrolling
            tableStyle.width = "100%", // IE7 will make the width of the table when 100% include the scrollbar
            // - which is shouldn't. When there is a scrollbar we need to take this
            // into account.
            ie67 && (table.find("tbody").height() > divBodyEl.offsetHeight || "scroll" == divBody.css("overflow-y")) && (tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth)), 
            // Recalculate the sanity width
            sanityWidth = table.outerWidth()) : "" !== scrollXInner && (// legacy x scroll inner has been given - use it
            tableStyle.width = _fnStringToCss(scrollXInner), // Recalculate the sanity width
            sanityWidth = table.outerWidth()), // Hidden header should have zero height, so remove padding and borders. Then
            // set the width based on the real headers
            // Apply all styles in one pass
            _fnApplyToChildren(zeroOut, headerSrcEls), // Read all widths in next pass
            _fnApplyToChildren(function(nSizer) {
                headerContent.push(nSizer.innerHTML), headerWidths.push(_fnStringToCss($(nSizer).css("width")));
            }, headerSrcEls), // Apply all widths in final pass
            _fnApplyToChildren(function(nToSize, i) {
                nToSize.style.width = headerWidths[i];
            }, headerTrgEls), $(headerSrcEls).height(0), /* Same again with the footer if we have one */
            footer && (_fnApplyToChildren(zeroOut, footerSrcEls), _fnApplyToChildren(function(nSizer) {
                footerWidths.push(_fnStringToCss($(nSizer).css("width")));
            }, footerSrcEls), _fnApplyToChildren(function(nToSize, i) {
                nToSize.style.width = footerWidths[i];
            }, footerTrgEls), $(footerSrcEls).height(0)), /*
		 * 3. Apply the measurements
		 */
            // "Hide" the header and footer that we used for the sizing. We need to keep
            // the content of the cell so that the width applied to the header and body
            // both match, but we want to hide it completely. We want to also fix their
            // width to what they currently are
            _fnApplyToChildren(function(nSizer, i) {
                nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + headerContent[i] + "</div>", 
                nSizer.style.width = headerWidths[i];
            }, headerSrcEls), footer && _fnApplyToChildren(function(nSizer, i) {
                nSizer.innerHTML = "", nSizer.style.width = footerWidths[i];
            }, footerSrcEls), // Sanity check that the table is of a sensible width. If not then we are going to get
            // misalignment - try to prevent this by not allowing the table to shrink below its min width
            table.outerWidth() < sanityWidth ? (// The min width depends upon if we have a vertical scrollbar visible or not */
            correction = divBodyEl.scrollHeight > divBodyEl.offsetHeight || "scroll" == divBody.css("overflow-y") ? sanityWidth + barWidth : sanityWidth, 
            // IE6/7 are a law unto themselves...
            ie67 && (divBodyEl.scrollHeight > divBodyEl.offsetHeight || "scroll" == divBody.css("overflow-y")) && (tableStyle.width = _fnStringToCss(correction - barWidth)), 
            // And give the user a warning that we've stopped the table getting too small
            ("" === scrollX || "" !== scrollXInner) && _fnLog(settings, 1, "Possible column misalignment", 6)) : correction = "100%", 
            // Apply to the container elements
            divBodyStyle.width = _fnStringToCss(correction), divHeaderStyle.width = _fnStringToCss(correction), 
            footer && (settings.nScrollFoot.style.width = _fnStringToCss(correction)), /*
		 * 4. Clean up
		 */
            scrollY || /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
			 * the scrollbar height from the visible display, rather than adding it on. We need to
			 * set the height in order to sort this. Don't want to do it in any other browsers.
			 */
            ie67 && (divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth));
            /* Finally set the width's of the header and footer tables */
            var iOuterWidth = table.outerWidth();
            divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth), divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth);
            // Figure out if there are scrollbar present - if so then we need a the header and footer to
            // provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
            var bScrolling = table.height() > divBodyEl.clientHeight || "scroll" == divBody.css("overflow-y"), padding = "padding" + (browser.bScrollbarLeft ? "Left" : "Right");
            divHeaderInnerStyle[padding] = bScrolling ? barWidth + "px" : "0px", footer && (divFooterTable[0].style.width = _fnStringToCss(iOuterWidth), 
            divFooterInner[0].style.width = _fnStringToCss(iOuterWidth), divFooterInner[0].style[padding] = bScrolling ? barWidth + "px" : "0px"), 
            /* Adjust the position of the header in case we loose the y-scrollbar */
            divBody.scroll(), // If sorting or filtering has occurred, jump the scrolling back to the top
            // only if we aren't holding the position
            !settings.bSorted && !settings.bFiltered || settings._drawHold || (divBodyEl.scrollTop = 0);
        }
        /**
	 * Apply a given function to the display child nodes of an element array (typically
	 * TD children of TR rows
	 *  @param {function} fn Method to apply to the objects
	 *  @param array {nodes} an1 List of elements to look through for display children
	 *  @param array {nodes} an2 Another list (identical structure to the first) - optional
	 *  @memberof DataTable#oApi
	 */
        function _fnApplyToChildren(fn, an1, an2) {
            for (var nNode1, nNode2, index = 0, i = 0, iLen = an1.length; iLen > i; ) {
                for (nNode1 = an1[i].firstChild, nNode2 = an2 ? an2[i].firstChild : null; nNode1; ) 1 === nNode1.nodeType && (an2 ? fn(nNode1, nNode2, index) : fn(nNode1, index), 
                index++), nNode1 = nNode1.nextSibling, nNode2 = an2 ? nNode2.nextSibling : null;
                i++;
            }
        }
        /**
	 * Calculate the width of columns for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnCalculateColumnWidths(oSettings) {
            var i, column, columnIdx, width, outerWidth, table = oSettings.nTable, columns = oSettings.aoColumns, scroll = oSettings.oScroll, scrollY = scroll.sY, scrollX = scroll.sX, scrollXInner = scroll.sXInner, columnCount = columns.length, visibleColumns = _fnGetColumns(oSettings, "bVisible"), headerCells = $("th", oSettings.nTHead), tableWidthAttr = table.getAttribute("width"), // from DOM element
            tableContainer = table.parentNode, userInputs = !1, browser = oSettings.oBrowser, ie67 = browser.bScrollOversize, styleWidth = table.style.width;
            /* Convert any user input sizes into pixel sizes */
            for (styleWidth && -1 !== styleWidth.indexOf("%") && (tableWidthAttr = styleWidth), 
            i = 0; i < visibleColumns.length; i++) column = columns[visibleColumns[i]], null !== column.sWidth && (column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer), 
            userInputs = !0);
            /* If the number of columns in the DOM equals the number that we have to
		 * process in DataTables, then we can use the offsets that are created by
		 * the web- browser. No custom sizes can be set in order for this to happen,
		 * nor scrolling used
		 */
            if (ie67 || !userInputs && !scrollX && !scrollY && columnCount == _fnVisbleColumns(oSettings) && columnCount == headerCells.length) for (i = 0; columnCount > i; i++) {
                var colIdx = _fnVisibleToColumnIndex(oSettings, i);
                colIdx && (columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i).width()));
            } else {
                // Otherwise construct a single row, worst case, table with the widest
                // node in the data, assign any user defined widths, then insert it into
                // the DOM and allow the browser to do all the hard work of calculating
                // table widths
                var tmpTable = $(table).clone().css("visibility", "hidden").removeAttr("id");
                // Clean up the table body
                tmpTable.find("tbody tr").remove();
                var tr = $("<tr/>").appendTo(tmpTable.find("tbody"));
                for (// Clone the table header and footer - we can't use the header / footer
                // from the cloned table, since if scrolling is active, the table's
                // real header and footer are contained in different table tags
                tmpTable.find("thead, tfoot").remove(), tmpTable.append($(oSettings.nTHead).clone()).append($(oSettings.nTFoot).clone()), 
                // Remove any assigned widths from the footer (from scrolling)
                tmpTable.find("tfoot th, tfoot td").css("width", ""), // Apply custom sizing to the cloned header
                headerCells = _fnGetUniqueThs(oSettings, tmpTable.find("thead")[0]), i = 0; i < visibleColumns.length; i++) column = columns[visibleColumns[i]], 
                headerCells[i].style.width = null !== column.sWidthOrig && "" !== column.sWidthOrig ? _fnStringToCss(column.sWidthOrig) : "";
                // Find the widest cell for each column and put it into the table
                if (oSettings.aoData.length) for (i = 0; i < visibleColumns.length; i++) columnIdx = visibleColumns[i], 
                column = columns[columnIdx], $(_fnGetWidestNode(oSettings, columnIdx)).clone(!1).append(column.sContentPadding).appendTo(tr);
                // Table has been built, attach to the document so we can work with it.
                // A holding element is used, positioned at the top of the container
                // with minimal height, so it has no effect on if the container scrolls
                // or not. Otherwise it might trigger scrolling when it actually isn't
                // needed
                var holder = $("<div/>").css(scrollX || scrollY ? {
                    position: "absolute",
                    top: 0,
                    left: 0,
                    height: 1,
                    right: 0,
                    overflow: "hidden"
                } : {}).append(tmpTable).appendTo(tableContainer);
                // Browsers need a bit of a hand when a width is assigned to any columns
                // when x-scrolling as they tend to collapse the table to the min-width,
                // even if we sent the column widths. So we need to keep track of what
                // the table width should be by summing the user given values, and the
                // automatic values
                if (// When scrolling (X or Y) we want to set the width of the table as 
                // appropriate. However, when not scrolling leave the table width as it
                // is. This results in slightly different, but I think correct behaviour
                scrollX && scrollXInner ? tmpTable.width(scrollXInner) : scrollX ? (tmpTable.css("width", "auto"), 
                tmpTable.width() < tableContainer.clientWidth && tmpTable.width(tableContainer.clientWidth)) : scrollY ? tmpTable.width(tableContainer.clientWidth) : tableWidthAttr && tmpTable.width(tableWidthAttr), 
                scrollX) {
                    var total = 0;
                    for (i = 0; i < visibleColumns.length; i++) column = columns[visibleColumns[i]], 
                    // Much prefer to use getBoundingClientRect due to its sub-pixel
                    // resolution, but IE8- do not support the width property.
                    outerWidth = browser.bBounding ? headerCells[i].getBoundingClientRect().width : $(headerCells[i]).outerWidth(), 
                    total += null === column.sWidthOrig ? outerWidth : parseInt(column.sWidth, 10) + outerWidth - $(headerCells[i]).width();
                    tmpTable.width(_fnStringToCss(total)), table.style.width = _fnStringToCss(total);
                }
                // Get the width of each column in the constructed table
                for (i = 0; i < visibleColumns.length; i++) column = columns[visibleColumns[i]], 
                width = $(headerCells[i]).width(), width && (column.sWidth = _fnStringToCss(width));
                table.style.width = _fnStringToCss(tmpTable.css("width")), // Finished with the table - ditch it
                holder.remove();
            }
            if (// If there is a width attr, we want to attach an event listener which
            // allows the table sizing to automatically adjust when the window is
            // resized. Use the width attr rather than CSS, since we can't know if the
            // CSS is a relative value or absolute - DOM read is always px.
            tableWidthAttr && (table.style.width = _fnStringToCss(tableWidthAttr)), (tableWidthAttr || scrollX) && !oSettings._reszEvt) {
                var bindResize = function() {
                    $(window).bind("resize.DT-" + oSettings.sInstance, _fnThrottle(function() {
                        _fnAdjustColumnSizing(oSettings);
                    }));
                };
                // IE6/7 will crash if we bind a resize event handler on page load.
                // To be removed in 1.11 which drops IE6/7 support
                ie67 ? setTimeout(bindResize, 1e3) : bindResize(), oSettings._reszEvt = !0;
            }
        }
        /**
	 * Throttle the calls to a function. Arguments and context are maintained for
	 * the throttled function
	 *  @param {function} fn Function to be called
	 *  @param {int} [freq=200] call frequency in mS
	 *  @returns {function} wrapped function
	 *  @memberof DataTable#oApi
	 */
        function _fnThrottle(fn, freq) {
            var last, timer, frequency = freq !== undefined ? freq : 200;
            return function() {
                var that = this, now = +new Date(), args = arguments;
                last && last + frequency > now ? (clearTimeout(timer), timer = setTimeout(function() {
                    last = undefined, fn.apply(that, args);
                }, frequency)) : (last = now, fn.apply(that, args));
            };
        }
        /**
	 * Convert a CSS unit width to pixels (e.g. 2em)
	 *  @param {string} width width to be converted
	 *  @param {node} parent parent to get the with for (required for relative widths) - optional
	 *  @returns {int} width in pixels
	 *  @memberof DataTable#oApi
	 */
        function _fnConvertToWidth(width, parent) {
            if (!width) return 0;
            var n = $("<div/>").css("width", _fnStringToCss(width)).appendTo(parent || document.body), val = n[0].offsetWidth;
            return n.remove(), val;
        }
        /**
	 * Get the widest node
	 *  @param {object} settings dataTables settings object
	 *  @param {int} colIdx column of interest
	 *  @returns {node} widest table node
	 *  @memberof DataTable#oApi
	 */
        function _fnGetWidestNode(settings, colIdx) {
            var idx = _fnGetMaxLenString(settings, colIdx);
            if (0 > idx) return null;
            var data = settings.aoData[idx];
            // Might not have been created when deferred rendering
            return data.nTr ? data.anCells[colIdx] : $("<td/>").html(_fnGetCellData(settings, idx, colIdx, "display"))[0];
        }
        /**
	 * Get the maximum strlen for each data column
	 *  @param {object} settings dataTables settings object
	 *  @param {int} colIdx column of interest
	 *  @returns {string} max string length for each column
	 *  @memberof DataTable#oApi
	 */
        function _fnGetMaxLenString(settings, colIdx) {
            for (var s, max = -1, maxIdx = -1, i = 0, ien = settings.aoData.length; ien > i; i++) s = _fnGetCellData(settings, i, colIdx, "display") + "", 
            s = s.replace(__re_html_remove, ""), s.length > max && (max = s.length, maxIdx = i);
            return maxIdx;
        }
        /**
	 * Append a CSS unit (only if required) to a string
	 *  @param {string} value to css-ify
	 *  @returns {string} value with css unit
	 *  @memberof DataTable#oApi
	 */
        function _fnStringToCss(s) {
            return null === s ? "0px" : "number" == typeof s ? 0 > s ? "0px" : s + "px" : s.match(/\d$/) ? s + "px" : s;
        }
        function _fnSortFlatten(settings) {
            var i, k, kLen, aDataSort, iCol, sType, srcCol, aSort = [], aoColumns = settings.aoColumns, fixed = settings.aaSortingFixed, fixedObj = $.isPlainObject(fixed), nestedSort = [], add = function(a) {
                a.length && !$.isArray(a[0]) ? // 1D array
                nestedSort.push(a) : // 2D array
                $.merge(nestedSort, a);
            };
            for (// Build the sort array, with pre-fix and post-fix options if they have been
            // specified
            $.isArray(fixed) && add(fixed), fixedObj && fixed.pre && add(fixed.pre), add(settings.aaSorting), 
            fixedObj && fixed.post && add(fixed.post), i = 0; i < nestedSort.length; i++) for (srcCol = nestedSort[i][0], 
            aDataSort = aoColumns[srcCol].aDataSort, k = 0, kLen = aDataSort.length; kLen > k; k++) iCol = aDataSort[k], 
            sType = aoColumns[iCol].sType || "string", nestedSort[i]._idx === undefined && (nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting)), 
            aSort.push({
                src: srcCol,
                col: iCol,
                dir: nestedSort[i][1],
                index: nestedSort[i]._idx,
                type: sType,
                formatter: DataTable.ext.type.order[sType + "-pre"]
            });
            return aSort;
        }
        /**
	 * Change the order of the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 *  @todo This really needs split up!
	 */
        function _fnSort(oSettings) {
            var i, ien, iLen, sortCol, aSort, aiOrig = [], oExtSort = DataTable.ext.type.order, aoData = oSettings.aoData, formatters = (oSettings.aoColumns, 
            0), displayMaster = oSettings.aiDisplayMaster;
            for (// Resolve any column types that are unknown due to addition or invalidation
            // @todo Can this be moved into a 'data-ready' handler which is called when
            //   data is going to be used in the table?
            _fnColumnTypes(oSettings), aSort = _fnSortFlatten(oSettings), i = 0, ien = aSort.length; ien > i; i++) sortCol = aSort[i], 
            // Track if we can use the fast sort algorithm
            sortCol.formatter && formatters++, // Load the data needed for the sort, for each cell
            _fnSortData(oSettings, sortCol.col);
            /* No sorting required if server-side or no sorting array */
            if ("ssp" != _fnDataSource(oSettings) && 0 !== aSort.length) {
                // Create a value - key array of the current row positions such that we can use their
                // current position during the sort, if values match, in order to perform stable sorting
                for (i = 0, iLen = displayMaster.length; iLen > i; i++) aiOrig[displayMaster[i]] = i;
                /* Do the sort - here we want multi-column sorting based on a given data source (column)
			 * and sorting function (from oSort) in a certain direction. It's reasonably complex to
			 * follow on it's own, but this is what we want (example two column sorting):
			 *  fnLocalSorting = function(a,b){
			 *    var iTest;
			 *    iTest = oSort['string-asc']('data11', 'data12');
			 *      if (iTest !== 0)
			 *        return iTest;
			 *    iTest = oSort['numeric-desc']('data21', 'data22');
			 *    if (iTest !== 0)
			 *      return iTest;
			 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
			 *  }
			 * Basically we have a test for each sorting column, if the data in that column is equal,
			 * test the next column. If all columns match, then we use a numeric sort on the row
			 * positions in the original data array to provide a stable sort.
			 *
			 * Note - I know it seems excessive to have two sorting methods, but the first is around
			 * 15% faster, so the second is only maintained for backwards compatibility with sorting
			 * methods which do not have a pre-sort formatting function.
			 */
                formatters === aSort.length ? // All sort types have formatting functions
                displayMaster.sort(function(a, b) {
                    var x, y, k, test, sort, len = aSort.length, dataA = aoData[a]._aSortData, dataB = aoData[b]._aSortData;
                    for (k = 0; len > k; k++) if (sort = aSort[k], x = dataA[sort.col], y = dataB[sort.col], 
                    test = y > x ? -1 : x > y ? 1 : 0, 0 !== test) return "asc" === sort.dir ? test : -test;
                    return x = aiOrig[a], y = aiOrig[b], y > x ? -1 : x > y ? 1 : 0;
                }) : // Depreciated - remove in 1.11 (providing a plug-in option)
                // Not all sort types have formatting methods, so we have to call their sorting
                // methods.
                displayMaster.sort(function(a, b) {
                    var x, y, k, test, sort, fn, len = aSort.length, dataA = aoData[a]._aSortData, dataB = aoData[b]._aSortData;
                    for (k = 0; len > k; k++) if (sort = aSort[k], x = dataA[sort.col], y = dataB[sort.col], 
                    fn = oExtSort[sort.type + "-" + sort.dir] || oExtSort["string-" + sort.dir], test = fn(x, y), 
                    0 !== test) return test;
                    return x = aiOrig[a], y = aiOrig[b], y > x ? -1 : x > y ? 1 : 0;
                });
            }
            /* Tell the draw function that we have sorted the data */
            oSettings.bSorted = !0;
        }
        function _fnSortAria(settings) {
            // ARIA attributes - need to loop all columns, to update all (removing old
            // attributes as needed)
            for (var label, nextSort, columns = settings.aoColumns, aSort = _fnSortFlatten(settings), oAria = settings.oLanguage.oAria, i = 0, iLen = columns.length; iLen > i; i++) {
                var col = columns[i], asSorting = col.asSorting, sTitle = col.sTitle.replace(/<.*?>/g, ""), th = col.nTh;
                // IE7 is throwing an error when setting these properties with jQuery's
                // attr() and removeAttr() methods...
                th.removeAttribute("aria-sort"), /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
                col.bSortable ? (aSort.length > 0 && aSort[0].col == i ? (th.setAttribute("aria-sort", "asc" == aSort[0].dir ? "ascending" : "descending"), 
                nextSort = asSorting[aSort[0].index + 1] || asSorting[0]) : nextSort = asSorting[0], 
                label = sTitle + ("asc" === nextSort ? oAria.sSortAscending : oAria.sSortDescending)) : label = sTitle, 
                th.setAttribute("aria-label", label);
            }
        }
        /**
	 * Function to run on user sort request
	 *  @param {object} settings dataTables settings object
	 *  @param {node} attachTo node to attach the handler to
	 *  @param {int} colIdx column sorting index
	 *  @param {boolean} [append=false] Append the requested sort to the existing
	 *    sort if true (i.e. multi-column sort)
	 *  @param {function} [callback] callback function
	 *  @memberof DataTable#oApi
	 */
        function _fnSortListener(settings, colIdx, append, callback) {
            var nextSortIdx, col = settings.aoColumns[colIdx], sorting = settings.aaSorting, asSorting = col.asSorting, next = function(a, overflow) {
                var idx = a._idx;
                return idx === undefined && (idx = $.inArray(a[1], asSorting)), idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;
            };
            // If appending the sort then we are multi-column sorting
            if (// Convert to 2D array if needed
            "number" == typeof sorting[0] && (sorting = settings.aaSorting = [ sorting ]), append && settings.oFeatures.bSortMulti) {
                // Are we already doing some kind of sort on this column?
                var sortIdx = $.inArray(colIdx, _pluck(sorting, "0"));
                -1 !== sortIdx ? (// Yes, modify the sort
                nextSortIdx = next(sorting[sortIdx], !0), null === nextSortIdx && 1 === sorting.length && (nextSortIdx = 0), 
                null === nextSortIdx ? sorting.splice(sortIdx, 1) : (sorting[sortIdx][1] = asSorting[nextSortIdx], 
                sorting[sortIdx]._idx = nextSortIdx)) : (// No sort on this column yet
                sorting.push([ colIdx, asSorting[0], 0 ]), sorting[sorting.length - 1]._idx = 0);
            } else sorting.length && sorting[0][0] == colIdx ? (// Single column - already sorting on this column, modify the sort
            nextSortIdx = next(sorting[0]), sorting.length = 1, sorting[0][1] = asSorting[nextSortIdx], 
            sorting[0]._idx = nextSortIdx) : (// Single column - sort only on this column
            sorting.length = 0, sorting.push([ colIdx, asSorting[0] ]), sorting[0]._idx = 0);
            // Run the sort by calling a full redraw
            _fnReDraw(settings), // callback used for async user interaction
            "function" == typeof callback && callback(settings);
        }
        /**
	 * Attach a sort handler (click) to a node
	 *  @param {object} settings dataTables settings object
	 *  @param {node} attachTo node to attach the handler to
	 *  @param {int} colIdx column sorting index
	 *  @param {function} [callback] callback function
	 *  @memberof DataTable#oApi
	 */
        function _fnSortAttachListener(settings, attachTo, colIdx, callback) {
            var col = settings.aoColumns[colIdx];
            _fnBindAction(attachTo, {}, function(e) {
                /* If the column is not sortable - don't to anything */
                col.bSortable !== !1 && (// If processing is enabled use a timeout to allow the processing
                // display to be shown - otherwise to it synchronously
                settings.oFeatures.bProcessing ? (_fnProcessingDisplay(settings, !0), setTimeout(function() {
                    _fnSortListener(settings, colIdx, e.shiftKey, callback), // In server-side processing, the draw callback will remove the
                    // processing display
                    "ssp" !== _fnDataSource(settings) && _fnProcessingDisplay(settings, !1);
                }, 0)) : _fnSortListener(settings, colIdx, e.shiftKey, callback));
            });
        }
        /**
	 * Set the sorting classes on table's body, Note: it is safe to call this function
	 * when bSort and bSortClasses are false
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnSortingClasses(settings) {
            var i, ien, colIdx, oldSort = settings.aLastSort, sortClass = settings.oClasses.sSortColumn, sort = _fnSortFlatten(settings), features = settings.oFeatures;
            if (features.bSort && features.bSortClasses) {
                // Remove old sorting classes
                for (i = 0, ien = oldSort.length; ien > i; i++) colIdx = oldSort[i].src, // Remove column sorting
                $(_pluck(settings.aoData, "anCells", colIdx)).removeClass(sortClass + (2 > i ? i + 1 : 3));
                // Add new column sorting
                for (i = 0, ien = sort.length; ien > i; i++) colIdx = sort[i].src, $(_pluck(settings.aoData, "anCells", colIdx)).addClass(sortClass + (2 > i ? i + 1 : 3));
            }
            settings.aLastSort = sort;
        }
        // Get the data to sort a column, be it from cache, fresh (populating the
        // cache), or from a sort formatter
        function _fnSortData(settings, idx) {
            // Custom sorting function - provided by the sort data type
            var customData, column = settings.aoColumns[idx], customSort = DataTable.ext.order[column.sSortDataType];
            customSort && (customData = customSort.call(settings.oInstance, settings, idx, _fnColumnIndexToVisible(settings, idx)));
            for (var row, cellData, formatter = DataTable.ext.type.order[column.sType + "-pre"], i = 0, ien = settings.aoData.length; ien > i; i++) row = settings.aoData[i], 
            row._aSortData || (row._aSortData = []), (!row._aSortData[idx] || customSort) && (cellData = customSort ? customData[i] : // If there was a custom sort function, use data from there
            _fnGetCellData(settings, i, idx, "sort"), row._aSortData[idx] = formatter ? formatter(cellData) : cellData);
        }
        /**
	 * Save the state of a table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
        function _fnSaveState(settings) {
            if (settings.oFeatures.bStateSave && !settings.bDestroying) {
                /* Store the interesting variables */
                var state = {
                    time: +new Date(),
                    start: settings._iDisplayStart,
                    length: settings._iDisplayLength,
                    order: $.extend(!0, [], settings.aaSorting),
                    search: _fnSearchToCamel(settings.oPreviousSearch),
                    columns: $.map(settings.aoColumns, function(col, i) {
                        return {
                            visible: col.bVisible,
                            search: _fnSearchToCamel(settings.aoPreSearchCols[i])
                        };
                    })
                };
                _fnCallbackFire(settings, "aoStateSaveParams", "stateSaveParams", [ settings, state ]), 
                settings.oSavedState = state, settings.fnStateSaveCallback.call(settings.oInstance, settings, state);
            }
        }
        /**
	 * Attempt to load a saved table state
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} oInit DataTables init object so we can override settings
	 *  @memberof DataTable#oApi
	 */
        function _fnLoadState(settings, oInit) {
            var i, ien, columns = settings.aoColumns;
            if (settings.oFeatures.bStateSave) {
                var state = settings.fnStateLoadCallback.call(settings.oInstance, settings);
                if (state && state.time) {
                    /* Allow custom and plug-in manipulation functions to alter the saved data set and
		 * cancelling of loading by returning false
		 */
                    var abStateLoad = _fnCallbackFire(settings, "aoStateLoadParams", "stateLoadParams", [ settings, state ]);
                    if (-1 === $.inArray(!1, abStateLoad)) {
                        /* Reject old data */
                        var duration = settings.iStateDuration;
                        if (!(duration > 0 && state.time < +new Date() - 1e3 * duration) && columns.length === state.columns.length) // Number of columns have changed - all bets are off, no restore of settings
                        {
                            // Columns
                            for (// Store the saved state so it might be accessed at any time
                            settings.oLoadedState = $.extend(!0, {}, state), // Restore key features - todo - for 1.11 this needs to be done by
                            // subscribed events
                            state.start !== undefined && (settings._iDisplayStart = state.start, settings.iInitDisplayStart = state.start), 
                            state.length !== undefined && (settings._iDisplayLength = state.length), // Order
                            state.order !== undefined && (settings.aaSorting = [], $.each(state.order, function(i, col) {
                                settings.aaSorting.push(col[0] >= columns.length ? [ 0, col[1] ] : col);
                            })), // Search
                            state.search !== undefined && $.extend(settings.oPreviousSearch, _fnSearchToHung(state.search)), 
                            i = 0, ien = state.columns.length; ien > i; i++) {
                                var col = state.columns[i];
                                // Visibility
                                col.visible !== undefined && (columns[i].bVisible = col.visible), // Search
                                col.search !== undefined && $.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));
                            }
                            _fnCallbackFire(settings, "aoStateLoaded", "stateLoaded", [ settings, state ]);
                        }
                    }
                }
            }
        }
        /**
	 * Return the settings object for a particular table
	 *  @param {node} table table we are using as a dataTable
	 *  @returns {object} Settings object - or null if not found
	 *  @memberof DataTable#oApi
	 */
        function _fnSettingsFromNode(table) {
            var settings = DataTable.settings, idx = $.inArray(table, _pluck(settings, "nTable"));
            return -1 !== idx ? settings[idx] : null;
        }
        /**
	 * Log an error message
	 *  @param {object} settings dataTables settings object
	 *  @param {int} level log error messages, or display them to the user
	 *  @param {string} msg error message
	 *  @param {int} tn Technical note id to get more information about the error.
	 *  @memberof DataTable#oApi
	 */
        function _fnLog(settings, level, msg, tn) {
            if (msg = "DataTables warning: " + (settings ? "table id=" + settings.sTableId + " - " : "") + msg, 
            tn && (msg += ". For more information about this error, please see http://datatables.net/tn/" + tn), 
            level) window.console && console.log && console.log(msg); else {
                // Backwards compatibility pre 1.10
                var ext = DataTable.ext, type = ext.sErrMode || ext.errMode;
                if (settings && _fnCallbackFire(settings, null, "error", [ settings, tn, msg ]), 
                "alert" == type) alert(msg); else {
                    if ("throw" == type) throw new Error(msg);
                    "function" == typeof type && type(settings, tn, msg);
                }
            }
        }
        /**
	 * See if a property is defined on one object, if so assign it to the other object
	 *  @param {object} ret target object
	 *  @param {object} src source object
	 *  @param {string} name property
	 *  @param {string} [mappedName] name to map too - optional, name used if not given
	 *  @memberof DataTable#oApi
	 */
        function _fnMap(ret, src, name, mappedName) {
            return $.isArray(name) ? void $.each(name, function(i, val) {
                $.isArray(val) ? _fnMap(ret, src, val[0], val[1]) : _fnMap(ret, src, val);
            }) : (mappedName === undefined && (mappedName = name), void (src[name] !== undefined && (ret[mappedName] = src[name])));
        }
        /**
	 * Extend objects - very similar to jQuery.extend, but deep copy objects, and
	 * shallow copy arrays. The reason we need to do this, is that we don't want to
	 * deep copy array init values (such as aaSorting) since the dev wouldn't be
	 * able to override them, but we do want to deep copy arrays.
	 *  @param {object} out Object to extend
	 *  @param {object} extender Object from which the properties will be applied to
	 *      out
	 *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
	 *      independent copy with the exception of the `data` or `aaData` parameters
	 *      if they are present. This is so you can pass in a collection to
	 *      DataTables and have that used as your data source without breaking the
	 *      references
	 *  @returns {object} out Reference, just for convenience - out === the return.
	 *  @memberof DataTable#oApi
	 *  @todo This doesn't take account of arrays inside the deep copied objects.
	 */
        function _fnExtend(out, extender, breakRefs) {
            var val;
            for (var prop in extender) extender.hasOwnProperty(prop) && (val = extender[prop], 
            $.isPlainObject(val) ? ($.isPlainObject(out[prop]) || (out[prop] = {}), $.extend(!0, out[prop], val)) : breakRefs && "data" !== prop && "aaData" !== prop && $.isArray(val) ? out[prop] = val.slice() : out[prop] = val);
            return out;
        }
        /**
	 * Bind an event handers to allow a click or return key to activate the callback.
	 * This is good for accessibility since a return on the keyboard will have the
	 * same effect as a click, if the element has focus.
	 *  @param {element} n Element to bind the action to
	 *  @param {object} oData Data object to pass to the triggered function
	 *  @param {function} fn Callback function for when the event is triggered
	 *  @memberof DataTable#oApi
	 */
        function _fnBindAction(n, oData, fn) {
            $(n).bind("click.DT", oData, function(e) {
                n.blur(), // Remove focus outline for mouse users
                fn(e);
            }).bind("keypress.DT", oData, function(e) {
                13 === e.which && (e.preventDefault(), fn(e));
            }).bind("selectstart.DT", function() {
                /* Take the brutal approach to cancelling text selection */
                return !1;
            });
        }
        /**
	 * Register a callback function. Easily allows a callback function to be added to
	 * an array store of callback functions that can then all be called together.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sStore Name of the array storage for the callbacks in oSettings
	 *  @param {function} fn Function to be called back
	 *  @param {string} sName Identifying name for the callback (i.e. a label)
	 *  @memberof DataTable#oApi
	 */
        function _fnCallbackReg(oSettings, sStore, fn, sName) {
            fn && oSettings[sStore].push({
                fn: fn,
                sName: sName
            });
        }
        /**
	 * Fire callback functions and trigger events. Note that the loop over the
	 * callback array store is done backwards! Further note that you do not want to
	 * fire off triggers in time sensitive applications (for example cell creation)
	 * as its slow.
	 *  @param {object} settings dataTables settings object
	 *  @param {string} callbackArr Name of the array storage for the callbacks in
	 *      oSettings
	 *  @param {string} eventName Name of the jQuery custom event to trigger. If
	 *      null no trigger is fired
	 *  @param {array} args Array of arguments to pass to the callback function /
	 *      trigger
	 *  @memberof DataTable#oApi
	 */
        function _fnCallbackFire(settings, callbackArr, eventName, args) {
            var ret = [];
            if (callbackArr && (ret = $.map(settings[callbackArr].slice().reverse(), function(val, i) {
                return val.fn.apply(settings.oInstance, args);
            })), null !== eventName) {
                var e = $.Event(eventName + ".dt");
                $(settings.nTable).trigger(e, args), ret.push(e.result);
            }
            return ret;
        }
        function _fnLengthOverflow(settings) {
            var start = settings._iDisplayStart, end = settings.fnDisplayEnd(), len = settings._iDisplayLength;
            /* If we have space to show extra rows (backing up from the end point - then do so */
            start >= end && (start = end - len), // Keep the start record on the current page
            start -= start % len, (-1 === len || 0 > start) && (start = 0), settings._iDisplayStart = start;
        }
        function _fnRenderer(settings, type) {
            var renderer = settings.renderer, host = DataTable.ext.renderer[type];
            return $.isPlainObject(renderer) && renderer[type] ? host[renderer[type]] || host._ : "string" == typeof renderer ? host[renderer] || host._ : host._;
        }
        /**
	 * Detect the data source being used for the table. Used to simplify the code
	 * a little (ajax) and to make it compress a little smaller.
	 *
	 *  @param {object} settings dataTables settings object
	 *  @returns {string} Data source
	 *  @memberof DataTable#oApi
	 */
        function _fnDataSource(settings) {
            return settings.oFeatures.bServerSide ? "ssp" : settings.ajax || settings.sAjaxSource ? "ajax" : "dom";
        }
        function _numbers(page, pages) {
            var numbers = [], buttons = extPagination.numbers_length, half = Math.floor(buttons / 2);
            // no unshift in ie6
            return buttons >= pages ? numbers = _range(0, pages) : half >= page ? (numbers = _range(0, buttons - 2), 
            numbers.push("ellipsis"), numbers.push(pages - 1)) : page >= pages - 1 - half ? (numbers = _range(pages - (buttons - 2), pages), 
            numbers.splice(0, 0, "ellipsis"), numbers.splice(0, 0, 0)) : (numbers = _range(page - half + 2, page + half - 1), 
            numbers.push("ellipsis"), numbers.push(pages - 1), numbers.splice(0, 0, "ellipsis"), 
            numbers.splice(0, 0, 0)), numbers.DT_el = "span", numbers;
        }
        // Add the numeric 'deformatting' functions for sorting and search. This is done
        // in a function to provide an easy ability for the language options to add
        // additional methods if a non-period decimal place is used.
        function _addNumericSort(decimalPlace) {
            $.each({
                // Plain numbers
                num: function(d) {
                    return __numericReplace(d, decimalPlace);
                },
                // Formatted numbers
                "num-fmt": function(d) {
                    return __numericReplace(d, decimalPlace, _re_formatted_numeric);
                },
                // HTML numeric
                "html-num": function(d) {
                    return __numericReplace(d, decimalPlace, _re_html);
                },
                // HTML numeric, formatted
                "html-num-fmt": function(d) {
                    return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);
                }
            }, function(key, fn) {
                // Add the ordering method
                _ext.type.order[key + decimalPlace + "-pre"] = fn, // For HTML types add a search formatter that will strip the HTML
                key.match(/^html\-/) && (_ext.type.search[key + decimalPlace] = _ext.type.search.html);
            });
        }
        /*
	 * This is really a good bit rubbish this method of exposing the internal methods
	 * publicly... - To be fixed in 2.0 using methods on the prototype
	 */
        /**
	 * Create a wrapper function for exporting an internal functions to an external API.
	 *  @param {string} fn API function name
	 *  @returns {function} wrapped function
	 *  @memberof DataTable#internal
	 */
        function _fnExternApiFunc(fn) {
            return function() {
                var args = [ _fnSettingsFromNode(this[DataTable.ext.iApiIndex]) ].concat(Array.prototype.slice.call(arguments));
                return DataTable.ext.internal[fn].apply(this, args);
            };
        }
        /**
	 * DataTables is a plug-in for the jQuery Javascript library. It is a highly
	 * flexible tool, based upon the foundations of progressive enhancement,
	 * which will add advanced interaction controls to any HTML table. For a
	 * full list of features please refer to
	 * [DataTables.net](href="http://datatables.net).
	 *
	 * Note that the `DataTable` object is not a global variable but is aliased
	 * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
	 * be  accessed.
	 *
	 *  @class
	 *  @param {object} [init={}] Configuration object for DataTables. Options
	 *    are defined by {@link DataTable.defaults}
	 *  @requires jQuery 1.7+
	 *
	 *  @example
	 *    // Basic initialisation
	 *    $(document).ready( function {
	 *      $('#example').dataTable();
	 *    } );
	 *
	 *  @example
	 *    // Initialisation with configuration options - in this case, disable
	 *    // pagination and sorting.
	 *    $(document).ready( function {
	 *      $('#example').dataTable( {
	 *        "paginate": false,
	 *        "sort": false
	 *      } );
	 *    } );
	 */
        var DataTable, _ext, _Api, _api_register, _api_registerPlural, _re_dic = {}, _re_new_lines = /[\r\n]/g, _re_html = /<.*?>/g, _re_date_start = /^[\w\+\-]/, _re_date_end = /[\w\+\-]$/, _re_escape_regex = new RegExp("(\\" + [ "/", ".", "*", "+", "?", "|", "(", ")", "[", "]", "{", "}", "\\", "$", "^", "-" ].join("|\\") + ")", "g"), _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi, _empty = function(d) {
            return d && d !== !0 && "-" !== d ? !1 : !0;
        }, _intVal = function(s) {
            var integer = parseInt(s, 10);
            return !isNaN(integer) && isFinite(s) ? integer : null;
        }, _numToDecimal = function(num, decimalPoint) {
            // Cache created regular expressions for speed as this function is called often
            return _re_dic[decimalPoint] || (_re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), "g")), 
            "string" == typeof num && "." !== decimalPoint ? num.replace(/\./g, "").replace(_re_dic[decimalPoint], ".") : num;
        }, _isNumber = function(d, decimalPoint, formatted) {
            var strType = "string" == typeof d;
            // If empty return immediately so there must be a number if it is a
            // formatted string (this stops the string "k", or "kr", etc being detected
            // as a formatted number for currency
            // If empty return immediately so there must be a number if it is a
            // formatted string (this stops the string "k", or "kr", etc being detected
            // as a formatted number for currency
            return _empty(d) ? !0 : (decimalPoint && strType && (d = _numToDecimal(d, decimalPoint)), 
            formatted && strType && (d = d.replace(_re_formatted_numeric, "")), !isNaN(parseFloat(d)) && isFinite(d));
        }, _isHtml = function(d) {
            return _empty(d) || "string" == typeof d;
        }, _htmlNumeric = function(d, decimalPoint, formatted) {
            if (_empty(d)) return !0;
            var html = _isHtml(d);
            return html && _isNumber(_stripHtml(d), decimalPoint, formatted) ? !0 : null;
        }, _pluck = function(a, prop, prop2) {
            var out = [], i = 0, ien = a.length;
            // Could have the test in the loop for slightly smaller code, but speed
            // is essential here
            if (prop2 !== undefined) for (;ien > i; i++) a[i] && a[i][prop] && out.push(a[i][prop][prop2]); else for (;ien > i; i++) a[i] && out.push(a[i][prop]);
            return out;
        }, _pluck_order = function(a, order, prop, prop2) {
            var out = [], i = 0, ien = order.length;
            // Could have the test in the loop for slightly smaller code, but speed
            // is essential here
            if (prop2 !== undefined) for (;ien > i; i++) a[order[i]][prop] && out.push(a[order[i]][prop][prop2]); else for (;ien > i; i++) out.push(a[order[i]][prop]);
            return out;
        }, _range = function(len, start) {
            var end, out = [];
            start === undefined ? (start = 0, end = len) : (end = start, start = len);
            for (var i = start; end > i; i++) out.push(i);
            return out;
        }, _removeEmpty = function(a) {
            for (var out = [], i = 0, ien = a.length; ien > i; i++) a[i] && // careful - will remove all falsy values!
            out.push(a[i]);
            return out;
        }, _stripHtml = function(d) {
            return d.replace(_re_html, "");
        }, _unique = function(src) {
            // A faster unique method is to use object keys to identify used values,
            // but this doesn't work with arrays or objects, which we must also
            // consider. See jsperf.com/compare-array-unique-versions/4 for more
            // information.
            var val, i, j, out = [], ien = src.length, k = 0;
            again: for (i = 0; ien > i; i++) {
                for (val = src[i], j = 0; k > j; j++) if (out[j] === val) continue again;
                out.push(val), k++;
            }
            return out;
        }, _fnCompatMap = function(o, knew, old) {
            o[knew] !== undefined && (o[old] = o[knew]);
        }, __reArray = /\[.*?\]$/, __reFn = /\(\)$/, __filter_div = $("<div>")[0], __filter_div_textContent = __filter_div.textContent !== undefined, __re_html_remove = /<.*?>/g;
        DataTable = function(options) {
            /**
		 * Perform a jQuery selector action on the table's TR elements (from the tbody) and
		 * return the resulting jQuery object.
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
		 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
		 *    criterion ("applied") or all TR elements (i.e. no filter).
		 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
		 *    Can be either 'current', whereby the current sorting of the table is used, or
		 *    'original' whereby the original order the data was read into the table is used.
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
		 *    'current' and filter is 'applied', regardless of what they might be given as.
		 *  @returns {object} jQuery object, filtered by the given selector.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Highlight every second row
		 *      oTable.$('tr:odd').css('backgroundColor', 'blue');
		 *    } );
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Filter to rows with 'Webkit' in them, add a background colour and then
		 *      // remove the filter, thus highlighting the 'Webkit' rows only.
		 *      oTable.fnFilter('Webkit');
		 *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
		 *      oTable.fnFilter('');
		 *    } );
		 */
            this.$ = function(sSelector, oOpts) {
                return this.api(!0).$(sSelector, oOpts);
            }, /**
		 * Almost identical to $ in operation, but in this case returns the data for the matched
		 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
		 * rather than any descendants, so the data can be obtained for the row/cell. If matching
		 * rows are found, the data returned is the original data array/object that was used to
		 * create the row (or a generated array if from a DOM source).
		 *
		 * This method is often useful in-combination with $ where both functions are given the
		 * same parameters and the array indexes will match identically.
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
		 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
		 *    criterion ("applied") or all elements (i.e. no filter).
		 *  @param {string} [oOpts.order=current] Order of the data in the processed array.
		 *    Can be either 'current', whereby the current sorting of the table is used, or
		 *    'original' whereby the original order the data was read into the table is used.
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
		 *    'current' and filter is 'applied', regardless of what they might be given as.
		 *  @returns {array} Data for the matched elements. If any elements, as a result of the
		 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
		 *    entry in the array.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Get the data from the first row in the table
		 *      var data = oTable._('tr:first');
		 *
		 *      // Do something useful with the data
		 *      alert( "First cell is: "+data[0] );
		 *    } );
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Filter to 'Webkit' and get all data for
		 *      oTable.fnFilter('Webkit');
		 *      var data = oTable._('tr', {"search": "applied"});
		 *
		 *      // Do something with the data
		 *      alert( data.length+" rows matched the search" );
		 *    } );
		 */
            this._ = function(sSelector, oOpts) {
                return this.api(!0).rows(sSelector, oOpts).data();
            }, /**
		 * Create a DataTables Api instance, with the currently selected tables for
		 * the Api's context.
		 * @param {boolean} [traditional=false] Set the API instance's context to be
		 *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
		 *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
		 *   or if all tables captured in the jQuery object should be used.
		 * @return {DataTables.Api}
		 */
            this.api = function(traditional) {
                return new _Api(traditional ? _fnSettingsFromNode(this[_ext.iApiIndex]) : this);
            }, /**
		 * Add a single new row or multiple rows of data to the table. Please note
		 * that this is suitable for client-side processing only - if you are using
		 * server-side processing (i.e. "bServerSide": true), then to add data, you
		 * must add it to the data source, i.e. the server-side, through an Ajax call.
		 *  @param {array|object} data The data to be added to the table. This can be:
		 *    <ul>
		 *      <li>1D array of data - add a single row with the data provided</li>
		 *      <li>2D array of arrays - add multiple rows in a single call</li>
		 *      <li>object - data object when using <i>mData</i></li>
		 *      <li>array of objects - multiple data objects when using <i>mData</i></li>
		 *    </ul>
		 *  @param {bool} [redraw=true] redraw the table or not
		 *  @returns {array} An array of integers, representing the list of indexes in
		 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
		 *    the table.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    // Global var for counter
		 *    var giCount = 2;
		 *
		 *    $(document).ready(function() {
		 *      $('#example').dataTable();
		 *    } );
		 *
		 *    function fnClickAddRow() {
		 *      $('#example').dataTable().fnAddData( [
		 *        giCount+".1",
		 *        giCount+".2",
		 *        giCount+".3",
		 *        giCount+".4" ]
		 *      );
		 *
		 *      giCount++;
		 *    }
		 */
            this.fnAddData = function(data, redraw) {
                var api = this.api(!0), rows = $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0])) ? api.rows.add(data) : api.row.add(data);
                return (redraw === undefined || redraw) && api.draw(), rows.flatten().toArray();
            }, /**
		 * This function will make DataTables recalculate the column sizes, based on the data
		 * contained in the table and the sizes applied to the columns (in the DOM, CSS or
		 * through the sWidth parameter). This can be useful when the width of the table's
		 * parent element changes (for example a window resize).
		 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable( {
		 *        "sScrollY": "200px",
		 *        "bPaginate": false
		 *      } );
		 *
		 *      $(window).bind('resize', function () {
		 *        oTable.fnAdjustColumnSizing();
		 *      } );
		 *    } );
		 */
            this.fnAdjustColumnSizing = function(bRedraw) {
                var api = this.api(!0).columns.adjust(), settings = api.settings()[0], scroll = settings.oScroll;
                bRedraw === undefined || bRedraw ? api.draw(!1) : ("" !== scroll.sX || "" !== scroll.sY) && /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
                _fnScrollDraw(settings);
            }, /**
		 * Quickly and simply clear a table
		 *  @param {bool} [bRedraw=true] redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
		 *      oTable.fnClearTable();
		 *    } );
		 */
            this.fnClearTable = function(bRedraw) {
                var api = this.api(!0).clear();
                (bRedraw === undefined || bRedraw) && api.draw();
            }, /**
		 * The exact opposite of 'opening' a row, this function will close any rows which
		 * are currently 'open'.
		 *  @param {node} nTr the table row to 'close'
		 *  @returns {int} 0 on success, or 1 if failed (can't find the row)
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
            this.fnClose = function(nTr) {
                this.api(!0).row(nTr).child.hide();
            }, /**
		 * Remove a row for the table
		 *  @param {mixed} target The index of the row from aoData to be deleted, or
		 *    the TR element you want to delete
		 *  @param {function|null} [callBack] Callback function
		 *  @param {bool} [redraw=true] Redraw the table or not
		 *  @returns {array} The row that was deleted
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Immediately remove the first row
		 *      oTable.fnDeleteRow( 0 );
		 *    } );
		 */
            this.fnDeleteRow = function(target, callback, redraw) {
                var api = this.api(!0), rows = api.rows(target), settings = rows.settings()[0], data = settings.aoData[rows[0][0]];
                return rows.remove(), callback && callback.call(this, settings, data), (redraw === undefined || redraw) && api.draw(), 
                data;
            }, /**
		 * Restore the table to it's original state in the DOM by removing all of DataTables
		 * enhancements, alterations to the DOM structure of the table and event listeners.
		 *  @param {boolean} [remove=false] Completely remove the table from the DOM
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnDestroy();
		 *    } );
		 */
            this.fnDestroy = function(remove) {
                this.api(!0).destroy(remove);
            }, /**
		 * Redraw the table
		 *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
		 *      oTable.fnDraw();
		 *    } );
		 */
            this.fnDraw = function(complete) {
                // Note that this isn't an exact match to the old call to _fnDraw - it takes
                // into account the new data, but can hold position.
                this.api(!0).draw(complete);
            }, /**
		 * Filter the input based on data
		 *  @param {string} sInput String to filter the table on
		 *  @param {int|null} [iColumn] Column to limit filtering to
		 *  @param {bool} [bRegex=false] Treat as regular expression or not
		 *  @param {bool} [bSmart=true] Perform smart filtering or not
		 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
		 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sometime later - filter...
		 *      oTable.fnFilter( 'test string' );
		 *    } );
		 */
            this.fnFilter = function(sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {
                var api = this.api(!0);
                null === iColumn || iColumn === undefined ? api.search(sInput, bRegex, bSmart, bCaseInsensitive) : api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive), 
                api.draw();
            }, /**
		 * Get the data for the whole table, an individual row or an individual cell based on the
		 * provided parameters.
		 *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
		 *    a TR node then the data source for the whole row will be returned. If given as a
		 *    TD/TH cell node then iCol will be automatically calculated and the data for the
		 *    cell returned. If given as an integer, then this is treated as the aoData internal
		 *    data index for the row (see fnGetPosition) and the data for that row used.
		 *  @param {int} [col] Optional column index that you want the data of.
		 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
		 *    returned. If mRow is defined, just data for that row, and is iCol is
		 *    defined, only data for the designated cell is returned.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    // Row data
		 *    $(document).ready(function() {
		 *      oTable = $('#example').dataTable();
		 *
		 *      oTable.$('tr').click( function () {
		 *        var data = oTable.fnGetData( this );
		 *        // ... do something with the array / object of data for the row
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Individual cell data
		 *    $(document).ready(function() {
		 *      oTable = $('#example').dataTable();
		 *
		 *      oTable.$('td').click( function () {
		 *        var sData = oTable.fnGetData( this );
		 *        alert( 'The cell clicked on had the value of '+sData );
		 *      } );
		 *    } );
		 */
            this.fnGetData = function(src, col) {
                var api = this.api(!0);
                if (src !== undefined) {
                    var type = src.nodeName ? src.nodeName.toLowerCase() : "";
                    return col !== undefined || "td" == type || "th" == type ? api.cell(src, col).data() : api.row(src).data() || null;
                }
                return api.data().toArray();
            }, /**
		 * Get an array of the TR nodes that are used in the table's body. Note that you will
		 * typically want to use the '$' API method in preference to this as it is more
		 * flexible.
		 *  @param {int} [iRow] Optional row index for the TR element you want
		 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
		 *    in the table's body, or iRow is defined, just the TR element requested.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Get the nodes from the table
		 *      var nNodes = oTable.fnGetNodes( );
		 *    } );
		 */
            this.fnGetNodes = function(iRow) {
                var api = this.api(!0);
                return iRow !== undefined ? api.row(iRow).node() : api.rows().nodes().flatten().toArray();
            }, /**
		 * Get the array indexes of a particular cell from it's DOM element
		 * and column index including hidden columns
		 *  @param {node} node this can either be a TR, TD or TH in the table's body
		 *  @returns {int} If nNode is given as a TR, then a single index is returned, or
		 *    if given as a cell, an array of [row index, column index (visible),
		 *    column index (all)] is given.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      $('#example tbody td').click( function () {
		 *        // Get the position of the current data from the node
		 *        var aPos = oTable.fnGetPosition( this );
		 *
		 *        // Get the data array for this row
		 *        var aData = oTable.fnGetData( aPos[0] );
		 *
		 *        // Update the data array and return the value
		 *        aData[ aPos[1] ] = 'clicked';
		 *        this.innerHTML = 'clicked';
		 *      } );
		 *
		 *      // Init DataTables
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
            this.fnGetPosition = function(node) {
                var api = this.api(!0), nodeName = node.nodeName.toUpperCase();
                if ("TR" == nodeName) return api.row(node).index();
                if ("TD" == nodeName || "TH" == nodeName) {
                    var cell = api.cell(node).index();
                    return [ cell.row, cell.columnVisible, cell.column ];
                }
                return null;
            }, /**
		 * Check to see if a row is 'open' or not.
		 *  @param {node} nTr the table row to check
		 *  @returns {boolean} true if the row is currently open, false otherwise
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
            this.fnIsOpen = function(nTr) {
                return this.api(!0).row(nTr).child.isShown();
            }, /**
		 * This function will place a new row directly after a row which is currently
		 * on display on the page, with the HTML contents that is passed into the
		 * function. This can be used, for example, to ask for confirmation that a
		 * particular record should be deleted.
		 *  @param {node} nTr The table row to 'open'
		 *  @param {string|node|jQuery} mHtml The HTML to put into the row
		 *  @param {string} sClass Class to give the new TD cell
		 *  @returns {node} The row opened. Note that if the table row passed in as the
		 *    first parameter, is not found in the table, this method will silently
		 *    return.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
            this.fnOpen = function(nTr, mHtml, sClass) {
                return this.api(!0).row(nTr).child(mHtml, sClass).show().child()[0];
            }, /**
		 * Change the pagination - provides the internal logic for pagination in a simple API
		 * function. With this function you can have a DataTables table go to the next,
		 * previous, first or last pages.
		 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
		 *    or page number to jump to (integer), note that page 0 is the first page.
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnPageChange( 'next' );
		 *    } );
		 */
            this.fnPageChange = function(mAction, bRedraw) {
                var api = this.api(!0).page(mAction);
                (bRedraw === undefined || bRedraw) && api.draw(!1);
            }, /**
		 * Show a particular column
		 *  @param {int} iCol The column whose display should be changed
		 *  @param {bool} bShow Show (true) or hide (false) the column
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Hide the second column after initialisation
		 *      oTable.fnSetColumnVis( 1, false );
		 *    } );
		 */
            this.fnSetColumnVis = function(iCol, bShow, bRedraw) {
                var api = this.api(!0).column(iCol).visible(bShow);
                (bRedraw === undefined || bRedraw) && api.columns.adjust().draw();
            }, /**
		 * Get the settings for a particular table for external manipulation
		 *  @returns {object} DataTables settings object. See
		 *    {@link DataTable.models.oSettings}
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      var oSettings = oTable.fnSettings();
		 *
		 *      // Show an example parameter from the settings
		 *      alert( oSettings._iDisplayStart );
		 *    } );
		 */
            this.fnSettings = function() {
                return _fnSettingsFromNode(this[_ext.iApiIndex]);
            }, /**
		 * Sort the table by a particular column
		 *  @param {int} iCol the data index to sort on. Note that this will not match the
		 *    'display index' if you have hidden data entries
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sort immediately with columns 0 and 1
		 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
		 *    } );
		 */
            this.fnSort = function(aaSort) {
                this.api(!0).order(aaSort).draw();
            }, /**
		 * Attach a sort listener to an element for a given column
		 *  @param {node} nNode the element to attach the sort listener to
		 *  @param {int} iColumn the column that a click on this node will sort on
		 *  @param {function} [fnCallback] callback function when sort is run
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sort on column 1, when 'sorter' is clicked on
		 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
		 *    } );
		 */
            this.fnSortListener = function(nNode, iColumn, fnCallback) {
                this.api(!0).order.listener(nNode, iColumn, fnCallback);
            }, /**
		 * Update a table cell or row - this method will accept either a single value to
		 * update the cell with, an array of values with one element for each column or
		 * an object in the same format as the original data source. The function is
		 * self-referencing in order to make the multi column updates easier.
		 *  @param {object|array|string} mData Data to update the cell/row with
		 *  @param {node|int} mRow TR element you want to update or the aoData index
		 *  @param {int} [iColumn] The column to update, give as null or undefined to
		 *    update a whole row.
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @param {bool} [bAction=true] Perform pre-draw actions or not
		 *  @returns {int} 0 on success, 1 on error
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
		 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
		 *    } );
		 */
            this.fnUpdate = function(mData, mRow, iColumn, bRedraw, bAction) {
                var api = this.api(!0);
                return iColumn === undefined || null === iColumn ? api.row(mRow).data(mData) : api.cell(mRow, iColumn).data(mData), 
                (bAction === undefined || bAction) && api.columns.adjust(), (bRedraw === undefined || bRedraw) && api.draw(), 
                0;
            }, /**
		 * Provide a common method for plug-ins to check the version of DataTables being used, in order
		 * to ensure compatibility.
		 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
		 *    formats "X" and "X.Y" are also acceptable.
		 *  @returns {boolean} true if this version of DataTables is greater or equal to the required
		 *    version, or false if this version of DataTales is not suitable
		 *  @method
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      alert( oTable.fnVersionCheck( '1.9.0' ) );
		 *    } );
		 */
            this.fnVersionCheck = _ext.fnVersionCheck;
            var _that = this, emptyInit = options === undefined, len = this.length;
            emptyInit && (options = {}), this.oApi = this.internal = _ext.internal;
            // Extend with old style plug-in API methods
            for (var fn in DataTable.ext.internal) fn && (this[fn] = _fnExternApiFunc(fn));
            return this.each(function() {
                // For each initialisation we want to give it a clean initialisation
                // object that can be bashed around
                var iLen, o = {}, oInit = len > 1 ? // optimisation for single table case
                _fnExtend(o, options, !0) : options, i = 0, sId = this.getAttribute("id"), bInitHandedOff = !1, defaults = DataTable.defaults, $this = $(this);
                /* Sanity check */
                if ("table" != this.nodeName.toLowerCase()) return void _fnLog(null, 0, "Non-table node initialisation (" + this.nodeName + ")", 2);
                /* Backwards compatibility for the defaults */
                _fnCompatOpts(defaults), _fnCompatCols(defaults.column), /* Convert the camel-case defaults to Hungarian */
                _fnCamelToHungarian(defaults, defaults, !0), _fnCamelToHungarian(defaults.column, defaults.column, !0), 
                /* Setting up the initialisation object */
                _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()));
                /* Check to see if we are re-initialising a table */
                var allSettings = DataTable.settings;
                for (i = 0, iLen = allSettings.length; iLen > i; i++) {
                    var s = allSettings[i];
                    /* Base check on table node */
                    if (s.nTable == this || s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {
                        var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve, bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;
                        if (emptyInit || bRetrieve) return s.oInstance;
                        if (bDestroy) {
                            s.oInstance.fnDestroy();
                            break;
                        }
                        return void _fnLog(s, 0, "Cannot reinitialise DataTable", 3);
                    }
                    /* If the element we are initialising has the same ID as a table which was previously
				 * initialised, but the table nodes don't match (from before) then we destroy the old
				 * instance by simply deleting it. This is under the assumption that the table has been
				 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
				 */
                    if (s.sTableId == this.id) {
                        allSettings.splice(i, 1);
                        break;
                    }
                }
                /* Ensure the table has an ID - required for accessibility */
                (null === sId || "" === sId) && (sId = "DataTables_Table_" + DataTable.ext._unique++, 
                this.id = sId);
                /* Create the settings object for this table and set some of the default parameters */
                var oSettings = $.extend(!0, {}, DataTable.models.oSettings, {
                    sDestroyWidth: $this[0].style.width,
                    sInstance: sId,
                    sTableId: sId
                });
                oSettings.nTable = this, oSettings.oApi = _that.internal, oSettings.oInit = oInit, 
                allSettings.push(oSettings), // Need to add the instance after the instance after the settings object has been added
                // to the settings array, so we can self reference the table instance if more than one
                oSettings.oInstance = 1 === _that.length ? _that : $this.dataTable(), // Backwards compatibility, before we apply all the defaults
                _fnCompatOpts(oInit), oInit.oLanguage && _fnLanguageCompat(oInit.oLanguage), // If the length menu is given, but the init display length is not, use the length menu
                oInit.aLengthMenu && !oInit.iDisplayLength && (oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0]), 
                // Apply the defaults and init options to make a single init object will all
                // options defined from defaults and instance options.
                oInit = _fnExtend($.extend(!0, {}, defaults), oInit), // Map the initialisation options onto the settings object
                _fnMap(oSettings.oFeatures, oInit, [ "bPaginate", "bLengthChange", "bFilter", "bSort", "bSortMulti", "bInfo", "bProcessing", "bAutoWidth", "bSortClasses", "bServerSide", "bDeferRender" ]), 
                _fnMap(oSettings, oInit, [ "asStripeClasses", "ajax", "fnServerData", "fnFormatNumber", "sServerMethod", "aaSorting", "aaSortingFixed", "aLengthMenu", "sPaginationType", "sAjaxSource", "sAjaxDataProp", "iStateDuration", "sDom", "bSortCellsTop", "iTabIndex", "fnStateLoadCallback", "fnStateSaveCallback", "renderer", "searchDelay", "rowId", [ "iCookieDuration", "iStateDuration" ], // backwards compat
                [ "oSearch", "oPreviousSearch" ], [ "aoSearchCols", "aoPreSearchCols" ], [ "iDisplayLength", "_iDisplayLength" ], [ "bJQueryUI", "bJUI" ] ]), 
                _fnMap(oSettings.oScroll, oInit, [ [ "sScrollX", "sX" ], [ "sScrollXInner", "sXInner" ], [ "sScrollY", "sY" ], [ "bScrollCollapse", "bCollapse" ] ]), 
                _fnMap(oSettings.oLanguage, oInit, "fnInfoCallback"), /* Callback functions which are array driven */
                _fnCallbackReg(oSettings, "aoDrawCallback", oInit.fnDrawCallback, "user"), _fnCallbackReg(oSettings, "aoServerParams", oInit.fnServerParams, "user"), 
                _fnCallbackReg(oSettings, "aoStateSaveParams", oInit.fnStateSaveParams, "user"), 
                _fnCallbackReg(oSettings, "aoStateLoadParams", oInit.fnStateLoadParams, "user"), 
                _fnCallbackReg(oSettings, "aoStateLoaded", oInit.fnStateLoaded, "user"), _fnCallbackReg(oSettings, "aoRowCallback", oInit.fnRowCallback, "user"), 
                _fnCallbackReg(oSettings, "aoRowCreatedCallback", oInit.fnCreatedRow, "user"), _fnCallbackReg(oSettings, "aoHeaderCallback", oInit.fnHeaderCallback, "user"), 
                _fnCallbackReg(oSettings, "aoFooterCallback", oInit.fnFooterCallback, "user"), _fnCallbackReg(oSettings, "aoInitComplete", oInit.fnInitComplete, "user"), 
                _fnCallbackReg(oSettings, "aoPreDrawCallback", oInit.fnPreDrawCallback, "user"), 
                oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId), /* Browser support detection */
                _fnBrowserDetect(oSettings);
                var oClasses = oSettings.oClasses;
                if (// @todo Remove in 1.11
                oInit.bJQueryUI ? (/* Use the JUI classes object for display. You could clone the oStdClasses object if
				 * you want to have multiple tables with multiple independent classes
				 */
                $.extend(oClasses, DataTable.ext.oJUIClasses, oInit.oClasses), oInit.sDom === defaults.sDom && "lfrtip" === defaults.sDom && (/* Set the DOM to use a layout suitable for jQuery UI's theming */
                oSettings.sDom = '<"H"lfr>t<"F"ip>'), oSettings.renderer ? $.isPlainObject(oSettings.renderer) && !oSettings.renderer.header && (oSettings.renderer.header = "jqueryui") : oSettings.renderer = "jqueryui") : $.extend(oClasses, DataTable.ext.classes, oInit.oClasses), 
                $this.addClass(oClasses.sTable), oSettings.iInitDisplayStart === undefined && (/* Display start point, taking into account the save saving */
                oSettings.iInitDisplayStart = oInit.iDisplayStart, oSettings._iDisplayStart = oInit.iDisplayStart), 
                null !== oInit.iDeferLoading) {
                    oSettings.bDeferLoading = !0;
                    var tmp = $.isArray(oInit.iDeferLoading);
                    oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading, 
                    oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
                }
                /* Language definitions */
                var oLanguage = oSettings.oLanguage;
                $.extend(!0, oLanguage, oInit.oLanguage), "" !== oLanguage.sUrl && (/* Get the language definitions from a file - because this Ajax call makes the language
				 * get async to the remainder of this function we use bInitHandedOff to indicate that
				 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
				 */
                $.ajax({
                    dataType: "json",
                    url: oLanguage.sUrl,
                    success: function(json) {
                        _fnLanguageCompat(json), _fnCamelToHungarian(defaults.oLanguage, json), $.extend(!0, oLanguage, json), 
                        _fnInitialise(oSettings);
                    },
                    error: function() {
                        // Error occurred loading language file, continue on as best we can
                        _fnInitialise(oSettings);
                    }
                }), bInitHandedOff = !0), /*
			 * Stripes
			 */
                null === oInit.asStripeClasses && (oSettings.asStripeClasses = [ oClasses.sStripeOdd, oClasses.sStripeEven ]);
                /* Remove row stripe classes if they are already on the table row */
                var stripeClasses = oSettings.asStripeClasses, rowOne = $this.children("tbody").find("tr").eq(0);
                -1 !== $.inArray(!0, $.map(stripeClasses, function(el, i) {
                    return rowOne.hasClass(el);
                })) && ($("tbody tr", this).removeClass(stripeClasses.join(" ")), oSettings.asDestroyStripes = stripeClasses.slice());
                /*
			 * Columns
			 * See if we should load columns automatically or use defined ones
			 */
                var aoColumnsInit, anThs = [], nThead = this.getElementsByTagName("thead");
                /* If not given a column array, generate one with nulls */
                if (0 !== nThead.length && (_fnDetectHeader(oSettings.aoHeader, nThead[0]), anThs = _fnGetUniqueThs(oSettings)), 
                null === oInit.aoColumns) for (aoColumnsInit = [], i = 0, iLen = anThs.length; iLen > i; i++) aoColumnsInit.push(null); else aoColumnsInit = oInit.aoColumns;
                /* Add the columns */
                for (i = 0, iLen = aoColumnsInit.length; iLen > i; i++) _fnAddColumn(oSettings, anThs ? anThs[i] : null);
                /* HTML5 attribute detection - build an mData object automatically if the
			 * attributes are found
			 */
                if (/* Apply the column definitions */
                _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function(iCol, oDef) {
                    _fnColumnOptions(oSettings, iCol, oDef);
                }), rowOne.length) {
                    var a = function(cell, name) {
                        return null !== cell.getAttribute("data-" + name) ? name : null;
                    };
                    $(rowOne[0]).children("th, td").each(function(i, cell) {
                        var col = oSettings.aoColumns[i];
                        if (col.mData === i) {
                            var sort = a(cell, "sort") || a(cell, "order"), filter = a(cell, "filter") || a(cell, "search");
                            (null !== sort || null !== filter) && (col.mData = {
                                _: i + ".display",
                                sort: null !== sort ? i + ".@data-" + sort : undefined,
                                type: null !== sort ? i + ".@data-" + sort : undefined,
                                filter: null !== filter ? i + ".@data-" + filter : undefined
                            }, _fnColumnOptions(oSettings, i));
                        }
                    });
                }
                var features = oSettings.oFeatures;
                /*
			 * Sorting
			 * @todo For modularisation (1.11) this needs to do into a sort start up handler
			 */
                // If aaSorting is not defined, then we use the first indicator in asSorting
                // in case that has been altered, so the default sort reflects that option
                if (/* Must be done after everything which can be overridden by the state saving! */
                oInit.bStateSave && (features.bStateSave = !0, _fnLoadState(oSettings, oInit), _fnCallbackReg(oSettings, "aoDrawCallback", _fnSaveState, "state_save")), 
                oInit.aaSorting === undefined) {
                    var sorting = oSettings.aaSorting;
                    for (i = 0, iLen = sorting.length; iLen > i; i++) sorting[i][1] = oSettings.aoColumns[i].asSorting[0];
                }
                /* Do a first pass on the sorting classes (allows any size changes to be taken into
			 * account, and also will apply sorting disabled classes if disabled
			 */
                _fnSortingClasses(oSettings), features.bSort && _fnCallbackReg(oSettings, "aoDrawCallback", function() {
                    if (oSettings.bSorted) {
                        var aSort = _fnSortFlatten(oSettings), sortedColumns = {};
                        $.each(aSort, function(i, val) {
                            sortedColumns[val.src] = val.dir;
                        }), _fnCallbackFire(oSettings, null, "order", [ oSettings, aSort, sortedColumns ]), 
                        _fnSortAria(oSettings);
                    }
                }), _fnCallbackReg(oSettings, "aoDrawCallback", function() {
                    (oSettings.bSorted || "ssp" === _fnDataSource(oSettings) || features.bDeferRender) && _fnSortingClasses(oSettings);
                }, "sc");
                /*
			 * Final init
			 * Cache the header, body and footer as required, creating them if needed
			 */
                // Work around for Webkit bug 83867 - store the caption-side before removing from doc
                var captions = $this.children("caption").each(function() {
                    this._captionSide = $this.css("caption-side");
                }), thead = $this.children("thead");
                0 === thead.length && (thead = $("<thead/>").appendTo(this)), oSettings.nTHead = thead[0];
                var tbody = $this.children("tbody");
                0 === tbody.length && (tbody = $("<tbody/>").appendTo(this)), oSettings.nTBody = tbody[0];
                var tfoot = $this.children("tfoot");
                /* Check if there is data passing into the constructor */
                if (0 === tfoot.length && captions.length > 0 && ("" !== oSettings.oScroll.sX || "" !== oSettings.oScroll.sY) && (// If we are a scrolling table, and no footer has been given, then we need to create
                // a tfoot element for the caption element to be appended to
                tfoot = $("<tfoot/>").appendTo(this)), 0 === tfoot.length || 0 === tfoot.children().length ? $this.addClass(oClasses.sNoFooter) : tfoot.length > 0 && (oSettings.nTFoot = tfoot[0], 
                _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot)), oInit.aaData) for (i = 0; i < oInit.aaData.length; i++) _fnAddData(oSettings, oInit.aaData[i]); else (oSettings.bDeferLoading || "dom" == _fnDataSource(oSettings)) && /* Grab the data from the page - only do this when deferred loading or no Ajax
				 * source since there is no point in reading the DOM data if we are then going
				 * to replace it with Ajax data
				 */
                _fnAddTr(oSettings, $(oSettings.nTBody).children("tr"));
                /* Copy the data index array */
                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice(), /* Initialisation complete - table can be drawn */
                oSettings.bInitialised = !0, /* Check if we need to initialise the table (it might not have been handed off to the
			 * language processor)
			 */
                bInitHandedOff === !1 && _fnInitialise(oSettings);
            }), _that = null, this;
        };
        /**
	 * Computed structure of the DataTables API, defined by the options passed to
	 * `DataTable.Api.register()` when building the API.
	 *
	 * The structure is built in order to speed creation and extension of the Api
	 * objects since the extensions are effectively pre-parsed.
	 *
	 * The array is an array of objects with the following structure, where this
	 * base array represents the Api prototype base:
	 *
	 *     [
	 *       {
	 *         name:      'data'                -- string   - Property name
	 *         val:       function () {},       -- function - Api method (or undefined if just an object
	 *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	 *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	 *       },
	 *       {
	 *         name:     'row'
	 *         val:       {},
	 *         methodExt: [ ... ],
	 *         propExt:   [
	 *           {
	 *             name:      'data'
	 *             val:       function () {},
	 *             methodExt: [ ... ],
	 *             propExt:   [ ... ]
	 *           },
	 *           ...
	 *         ]
	 *       }
	 *     ]
	 *
	 * @type {Array}
	 * @ignore
	 */
        var __apiStruct = [], __arrayProto = Array.prototype, _toSettings = function(mixed) {
            var idx, jq, settings = DataTable.settings, tables = $.map(settings, function(el, i) {
                return el.nTable;
            });
            // Table node
            // jQuery selector
            // jQuery object (also DataTables instance)
            return mixed ? mixed.nTable && mixed.oApi ? [ mixed ] : mixed.nodeName && "table" === mixed.nodeName.toLowerCase() ? (idx = $.inArray(mixed, tables), 
            -1 !== idx ? [ settings[idx] ] : null) : mixed && "function" == typeof mixed.settings ? mixed.settings().toArray() : ("string" == typeof mixed ? jq = $(mixed) : mixed instanceof $ && (jq = mixed), 
            jq ? jq.map(function(i) {
                return idx = $.inArray(this, tables), -1 !== idx ? settings[idx] : null;
            }).toArray() : void 0) : [];
        };
        /**
	 * DataTables API class - used to control and interface with  one or more
	 * DataTables enhanced tables.
	 *
	 * The API class is heavily based on jQuery, presenting a chainable interface
	 * that you can use to interact with tables. Each instance of the API class has
	 * a "context" - i.e. the tables that it will operate on. This could be a single
	 * table, all tables on a page or a sub-set thereof.
	 *
	 * Additionally the API is designed to allow you to easily work with the data in
	 * the tables, retrieving and manipulating it as required. This is done by
	 * presenting the API class as an array like interface. The contents of the
	 * array depend upon the actions requested by each method (for example
	 * `rows().nodes()` will return an array of nodes, while `rows().data()` will
	 * return an array of objects or arrays depending upon your table's
	 * configuration). The API object has a number of array like methods (`push`,
	 * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
	 * `unique` etc) to assist your working with the data held in a table.
	 *
	 * Most methods (those which return an Api instance) are chainable, which means
	 * the return from a method call also has all of the methods available that the
	 * top level object had. For example, these two calls are equivalent:
	 *
	 *     // Not chained
	 *     api.row.add( {...} );
	 *     api.draw();
	 *
	 *     // Chained
	 *     api.row.add( {...} ).draw();
	 *
	 * @class DataTable.Api
	 * @param {array|object|string|jQuery} context DataTable identifier. This is
	 *   used to define which DataTables enhanced tables this API will operate on.
	 *   Can be one of:
	 *
	 *   * `string` - jQuery selector. Any DataTables' matching the given selector
	 *     with be found and used.
	 *   * `node` - `TABLE` node which has already been formed into a DataTable.
	 *   * `jQuery` - A jQuery object of `TABLE` nodes.
	 *   * `object` - DataTables settings object
	 * @param {array} [data] Data to initialise the Api instance with.
	 *
	 * @example
	 *   // Direct initialisation during DataTables construction
	 *   var api = $('#example').DataTable();
	 *
	 * @example
	 *   // Initialisation using a DataTables jQuery object
	 *   var api = $('#example').dataTable().api();
	 *
	 * @example
	 *   // Initialisation as a constructor
	 *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
	 */
        _Api = function(context, data) {
            if (!(this instanceof _Api)) return new _Api(context, data);
            var settings = [], ctxSettings = function(o) {
                var a = _toSettings(o);
                a && (settings = settings.concat(a));
            };
            if ($.isArray(context)) for (var i = 0, ien = context.length; ien > i; i++) ctxSettings(context[i]); else ctxSettings(context);
            // Remove duplicates
            this.context = _unique(settings), // Initial data
            data && $.merge(this, data), // selector
            this.selector = {
                rows: null,
                cols: null,
                opts: null
            }, _Api.extend(this, this, __apiStruct);
        }, DataTable.Api = _Api, // Don't destroy the existing prototype, just extend it. Required for jQuery 2's
        // isPlainObject.
        $.extend(_Api.prototype, {
            any: function() {
                return 0 !== this.count();
            },
            concat: __arrayProto.concat,
            context: [],
            // array of table settings objects
            count: function() {
                return this.flatten().length;
            },
            each: function(fn) {
                for (var i = 0, ien = this.length; ien > i; i++) fn.call(this, this[i], i, this);
                return this;
            },
            eq: function(idx) {
                var ctx = this.context;
                return ctx.length > idx ? new _Api(ctx[idx], this[idx]) : null;
            },
            filter: function(fn) {
                var a = [];
                if (__arrayProto.filter) a = __arrayProto.filter.call(this, fn, this); else // Compatibility for browsers without EMCA-252-5 (JS 1.6)
                for (var i = 0, ien = this.length; ien > i; i++) fn.call(this, this[i], i, this) && a.push(this[i]);
                return new _Api(this.context, a);
            },
            flatten: function() {
                var a = [];
                return new _Api(this.context, a.concat.apply(a, this.toArray()));
            },
            join: __arrayProto.join,
            indexOf: __arrayProto.indexOf || function(obj, start) {
                for (var i = start || 0, ien = this.length; ien > i; i++) if (this[i] === obj) return i;
                return -1;
            },
            iterator: function(flatten, type, fn, alwaysNew) {
                var ret, i, ien, j, jen, rows, items, item, a = [], context = this.context, selector = this.selector;
                for (// Argument shifting
                "string" == typeof flatten && (alwaysNew = fn, fn = type, type = flatten, flatten = !1), 
                i = 0, ien = context.length; ien > i; i++) {
                    var apiInst = new _Api(context[i]);
                    if ("table" === type) ret = fn.call(apiInst, context[i], i), ret !== undefined && a.push(ret); else if ("columns" === type || "rows" === type) // this has same length as context - one entry for each table
                    ret = fn.call(apiInst, context[i], this[i], i), ret !== undefined && a.push(ret); else if ("column" === type || "column-rows" === type || "row" === type || "cell" === type) for (// columns and rows share the same structure.
                    // 'this' is an array of column indexes for each context
                    items = this[i], "column-rows" === type && (rows = _selector_row_indexes(context[i], selector.opts)), 
                    j = 0, jen = items.length; jen > j; j++) item = items[j], ret = "cell" === type ? fn.call(apiInst, context[i], item.row, item.column, i, j) : fn.call(apiInst, context[i], item, i, j, rows), 
                    ret !== undefined && a.push(ret);
                }
                if (a.length || alwaysNew) {
                    var api = new _Api(context, flatten ? a.concat.apply([], a) : a), apiSelector = api.selector;
                    return apiSelector.rows = selector.rows, apiSelector.cols = selector.cols, apiSelector.opts = selector.opts, 
                    api;
                }
                return this;
            },
            lastIndexOf: __arrayProto.lastIndexOf || function(obj, start) {
                // Bit cheeky...
                return this.indexOf.apply(this.toArray.reverse(), arguments);
            },
            length: 0,
            map: function(fn) {
                var a = [];
                if (__arrayProto.map) a = __arrayProto.map.call(this, fn, this); else // Compatibility for browsers without EMCA-252-5 (JS 1.6)
                for (var i = 0, ien = this.length; ien > i; i++) a.push(fn.call(this, this[i], i));
                return new _Api(this.context, a);
            },
            pluck: function(prop) {
                return this.map(function(el) {
                    return el[prop];
                });
            },
            pop: __arrayProto.pop,
            push: __arrayProto.push,
            // Does not return an API instance
            reduce: __arrayProto.reduce || function(fn, init) {
                return _fnReduce(this, fn, init, 0, this.length, 1);
            },
            reduceRight: __arrayProto.reduceRight || function(fn, init) {
                return _fnReduce(this, fn, init, this.length - 1, -1, -1);
            },
            reverse: __arrayProto.reverse,
            // Object with rows, columns and opts
            selector: null,
            shift: __arrayProto.shift,
            sort: __arrayProto.sort,
            // ? name - order?
            splice: __arrayProto.splice,
            toArray: function() {
                return __arrayProto.slice.call(this);
            },
            to$: function() {
                return $(this);
            },
            toJQuery: function() {
                return $(this);
            },
            unique: function() {
                return new _Api(this.context, _unique(this));
            },
            unshift: __arrayProto.unshift
        }), _Api.extend = function(scope, obj, ext) {
            // Only extend API instances and static properties of the API
            if (ext.length && obj && (obj instanceof _Api || obj.__dt_wrapper)) {
                var i, ien, struct, methodScoping = function(scope, fn, struc) {
                    return function() {
                        var ret = fn.apply(scope, arguments);
                        // Method extension
                        return _Api.extend(ret, ret, struc.methodExt), ret;
                    };
                };
                for (i = 0, ien = ext.length; ien > i; i++) struct = ext[i], // Value
                obj[struct.name] = "function" == typeof struct.val ? methodScoping(scope, struct.val, struct) : $.isPlainObject(struct.val) ? {} : struct.val, 
                obj[struct.name].__dt_wrapper = !0, // Property extension
                _Api.extend(scope, obj[struct.name], struct.propExt);
            }
        }, // @todo - Is there need for an augment function?
        // _Api.augment = function ( inst, name )
        // {
        // 	// Find src object in the structure from the name
        // 	var parts = name.split('.');
        // 	_Api.extend( inst, obj );
        // };
        //     [
        //       {
        //         name:      'data'                -- string   - Property name
        //         val:       function () {},       -- function - Api method (or undefined if just an object
        //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
        //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
        //       },
        //       {
        //         name:     'row'
        //         val:       {},
        //         methodExt: [ ... ],
        //         propExt:   [
        //           {
        //             name:      'data'
        //             val:       function () {},
        //             methodExt: [ ... ],
        //             propExt:   [ ... ]
        //           },
        //           ...
        //         ]
        //       }
        //     ]
        _Api.register = _api_register = function(name, val) {
            if ($.isArray(name)) for (var j = 0, jen = name.length; jen > j; j++) _Api.register(name[j], val); else {
                var i, ien, key, method, heir = name.split("."), struct = __apiStruct, find = function(src, name) {
                    for (var i = 0, ien = src.length; ien > i; i++) if (src[i].name === name) return src[i];
                    return null;
                };
                for (i = 0, ien = heir.length; ien > i; i++) {
                    method = -1 !== heir[i].indexOf("()"), key = method ? heir[i].replace("()", "") : heir[i];
                    var src = find(struct, key);
                    src || (src = {
                        name: key,
                        val: {},
                        methodExt: [],
                        propExt: []
                    }, struct.push(src)), i === ien - 1 ? src.val = val : struct = method ? src.methodExt : src.propExt;
                }
            }
        }, _Api.registerPlural = _api_registerPlural = function(pluralName, singularName, val) {
            _Api.register(pluralName, val), _Api.register(singularName, function() {
                var ret = val.apply(this, arguments);
                // Array results are 'enhanced'
                return ret === this ? this : ret instanceof _Api ? ret.length ? $.isArray(ret[0]) ? new _Api(ret.context, ret[0]) : ret[0] : undefined : ret;
            });
        };
        /**
	 * Selector for HTML tables. Apply the given selector to the give array of
	 * DataTables settings objects.
	 *
	 * @param {string|integer} [selector] jQuery selector string or integer
	 * @param  {array} Array of DataTables settings objects to be filtered
	 * @return {array}
	 * @ignore
	 */
        var __table_selector = function(selector, a) {
            // Integer is used to pick out a table by index
            if ("number" == typeof selector) return [ a[selector] ];
            // Perform a jQuery selector on the table nodes
            var nodes = $.map(a, function(el, i) {
                return el.nTable;
            });
            return $(nodes).filter(selector).map(function(i) {
                // Need to translate back from the table node to the settings
                var idx = $.inArray(this, nodes);
                return a[idx];
            }).toArray();
        };
        /**
	 * Context selector for the API's context (i.e. the tables the API instance
	 * refers to.
	 *
	 * @name    DataTable.Api#tables
	 * @param {string|integer} [selector] Selector to pick which tables the iterator
	 *   should operate on. If not given, all tables in the current context are
	 *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
	 *   select multiple tables or as an integer to select a single table.
	 * @returns {DataTable.Api} Returns a new API instance if a selector is given.
	 */
        _api_register("tables()", function(selector) {
            // A new instance is created if there was a selector specified
            return selector ? new _Api(__table_selector(selector, this.context)) : this;
        }), _api_register("table()", function(selector) {
            var tables = this.tables(selector), ctx = tables.context;
            // Truncate to the first matched table
            return ctx.length ? new _Api(ctx[0]) : tables;
        }), _api_registerPlural("tables().nodes()", "table().node()", function() {
            return this.iterator("table", function(ctx) {
                return ctx.nTable;
            }, 1);
        }), _api_registerPlural("tables().body()", "table().body()", function() {
            return this.iterator("table", function(ctx) {
                return ctx.nTBody;
            }, 1);
        }), _api_registerPlural("tables().header()", "table().header()", function() {
            return this.iterator("table", function(ctx) {
                return ctx.nTHead;
            }, 1);
        }), _api_registerPlural("tables().footer()", "table().footer()", function() {
            return this.iterator("table", function(ctx) {
                return ctx.nTFoot;
            }, 1);
        }), _api_registerPlural("tables().containers()", "table().container()", function() {
            return this.iterator("table", function(ctx) {
                return ctx.nTableWrapper;
            }, 1);
        }), /**
	 * Redraw the tables in the current context.
	 */
        _api_register("draw()", function(paging) {
            return this.iterator("table", function(settings) {
                "page" === paging ? _fnDraw(settings) : ("string" == typeof paging && (paging = "full-hold" === paging ? !1 : !0), 
                _fnReDraw(settings, paging === !1));
            });
        }), /**
	 * Get the current page index.
	 *
	 * @return {integer} Current page index (zero based)
	 */
        /**
	 * Set the current page.
	 *
	 * Note that if you attempt to show a page which does not exist, DataTables will
	 * not throw an error, but rather reset the paging.
	 *
	 * @param {integer|string} action The paging action to take. This can be one of:
	 *  * `integer` - The page index to jump to
	 *  * `string` - An action to take:
	 *    * `first` - Jump to first page.
	 *    * `next` - Jump to the next page
	 *    * `previous` - Jump to previous page
	 *    * `last` - Jump to the last page.
	 * @returns {DataTables.Api} this
	 */
        _api_register("page()", function(action) {
            return action === undefined ? this.page.info().page : this.iterator("table", function(settings) {
                _fnPageChange(settings, action);
            });
        }), /**
	 * Paging information for the first table in the current context.
	 *
	 * If you require paging information for another table, use the `table()` method
	 * with a suitable selector.
	 *
	 * @return {object} Object with the following properties set:
	 *  * `page` - Current page index (zero based - i.e. the first page is `0`)
	 *  * `pages` - Total number of pages
	 *  * `start` - Display index for the first record shown on the current page
	 *  * `end` - Display index for the last record shown on the current page
	 *  * `length` - Display length (number of records). Note that generally `start
	 *    + length = end`, but this is not always true, for example if there are
	 *    only 2 records to show on the final page, with a length of 10.
	 *  * `recordsTotal` - Full data set length
	 *  * `recordsDisplay` - Data set length once the current filtering criterion
	 *    are applied.
	 */
        _api_register("page.info()", function(action) {
            if (0 === this.context.length) return undefined;
            var settings = this.context[0], start = settings._iDisplayStart, len = settings._iDisplayLength, visRecords = settings.fnRecordsDisplay(), all = -1 === len;
            return {
                page: all ? 0 : Math.floor(start / len),
                pages: all ? 1 : Math.ceil(visRecords / len),
                start: start,
                end: settings.fnDisplayEnd(),
                length: len,
                recordsTotal: settings.fnRecordsTotal(),
                recordsDisplay: visRecords,
                serverSide: "ssp" === _fnDataSource(settings)
            };
        }), /**
	 * Get the current page length.
	 *
	 * @return {integer} Current page length. Note `-1` indicates that all records
	 *   are to be shown.
	 */
        /**
	 * Set the current page length.
	 *
	 * @param {integer} Page length to set. Use `-1` to show all records.
	 * @returns {DataTables.Api} this
	 */
        _api_register("page.len()", function(len) {
            // Note that we can't call this function 'length()' because `length`
            // is a Javascript property of functions which defines how many arguments
            // the function expects.
            // Note that we can't call this function 'length()' because `length`
            // is a Javascript property of functions which defines how many arguments
            // the function expects.
            return len === undefined ? 0 !== this.context.length ? this.context[0]._iDisplayLength : undefined : this.iterator("table", function(settings) {
                _fnLengthChange(settings, len);
            });
        });
        var __reload = function(settings, holdPosition, callback) {
            // Use the draw event to trigger a callback
            if (callback) {
                var api = new _Api(settings);
                api.one("draw", function() {
                    callback(api.ajax.json());
                });
            }
            if ("ssp" == _fnDataSource(settings)) _fnReDraw(settings, holdPosition); else {
                _fnProcessingDisplay(settings, !0);
                // Cancel an existing request
                var xhr = settings.jqXHR;
                xhr && 4 !== xhr.readyState && xhr.abort(), // Trigger xhr
                _fnBuildAjax(settings, [], function(json) {
                    _fnClearTable(settings);
                    for (var data = _fnAjaxDataSrc(settings, json), i = 0, ien = data.length; ien > i; i++) _fnAddData(settings, data[i]);
                    _fnReDraw(settings, holdPosition), _fnProcessingDisplay(settings, !1);
                });
            }
        };
        /**
	 * Get the JSON response from the last Ajax request that DataTables made to the
	 * server. Note that this returns the JSON from the first table in the current
	 * context.
	 *
	 * @return {object} JSON received from the server.
	 */
        _api_register("ajax.json()", function() {
            var ctx = this.context;
            return ctx.length > 0 ? ctx[0].json : void 0;
        }), /**
	 * Get the data submitted in the last Ajax request
	 */
        _api_register("ajax.params()", function() {
            var ctx = this.context;
            return ctx.length > 0 ? ctx[0].oAjaxData : void 0;
        }), /**
	 * Reload tables from the Ajax data source. Note that this function will
	 * automatically re-draw the table when the remote data has been loaded.
	 *
	 * @param {boolean} [reset=true] Reset (default) or hold the current paging
	 *   position. A full re-sort and re-filter is performed when this method is
	 *   called, which is why the pagination reset is the default action.
	 * @returns {DataTables.Api} this
	 */
        _api_register("ajax.reload()", function(callback, resetPaging) {
            return this.iterator("table", function(settings) {
                __reload(settings, resetPaging === !1, callback);
            });
        }), /**
	 * Get the current Ajax URL. Note that this returns the URL from the first
	 * table in the current context.
	 *
	 * @return {string} Current Ajax source URL
	 */
        /**
	 * Set the Ajax URL. Note that this will set the URL for all tables in the
	 * current context.
	 *
	 * @param {string} url URL to set.
	 * @returns {DataTables.Api} this
	 */
        _api_register("ajax.url()", function(url) {
            var ctx = this.context;
            // get
            return url === undefined ? 0 === ctx.length ? undefined : (ctx = ctx[0], ctx.ajax ? $.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax : ctx.sAjaxSource) : this.iterator("table", function(settings) {
                $.isPlainObject(settings.ajax) ? settings.ajax.url = url : settings.ajax = url;
            });
        }), /**
	 * Load data from the newly set Ajax URL. Note that this method is only
	 * available when `ajax.url()` is used to set a URL. Additionally, this method
	 * has the same effect as calling `ajax.reload()` but is provided for
	 * convenience when setting a new URL. Like `ajax.reload()` it will
	 * automatically redraw the table once the remote data has been loaded.
	 *
	 * @returns {DataTables.Api} this
	 */
        _api_register("ajax.url().load()", function(callback, resetPaging) {
            // Same as a reload, but makes sense to present it for easy access after a
            // url change
            return this.iterator("table", function(ctx) {
                __reload(ctx, resetPaging === !1, callback);
            });
        });
        var _selector_run = function(type, selector, selectFn, settings, opts) {
            var res, a, i, ien, j, jen, out = [], selectorType = typeof selector;
            for (// Can't just check for isArray here, as an API or jQuery instance might be
            // given with their array like look
            selector && "string" !== selectorType && "function" !== selectorType && selector.length !== undefined || (selector = [ selector ]), 
            i = 0, ien = selector.length; ien > i; i++) for (a = selector[i] && selector[i].split ? selector[i].split(",") : [ selector[i] ], 
            j = 0, jen = a.length; jen > j; j++) res = selectFn("string" == typeof a[j] ? $.trim(a[j]) : a[j]), 
            res && res.length && (out = out.concat(res));
            // selector extensions
            var ext = _ext.selector[type];
            if (ext.length) for (i = 0, ien = ext.length; ien > i; i++) out = ext[i](settings, opts, out);
            return _unique(out);
        }, _selector_opts = function(opts) {
            // Backwards compatibility for 1.9- which used the terminology filter rather
            // than search
            return opts || (opts = {}), opts.filter && opts.search === undefined && (opts.search = opts.filter), 
            $.extend({
                search: "none",
                order: "current",
                page: "all"
            }, opts);
        }, _selector_first = function(inst) {
            // Reduce the API instance to the first item found
            for (var i = 0, ien = inst.length; ien > i; i++) if (inst[i].length > 0) // Assign the first element to the first item in the instance
            // and truncate the instance and context
            return inst[0] = inst[i], inst[0].length = 1, inst.length = 1, inst.context = [ inst.context[i] ], 
            inst;
            // Not found - return an empty instance
            return inst.length = 0, inst;
        }, _selector_row_indexes = function(settings, opts) {
            var i, ien, tmp, a = [], displayFiltered = settings.aiDisplay, displayMaster = settings.aiDisplayMaster, search = opts.search, // none, applied, removed
            order = opts.order, // applied, current, index (original - compatibility with 1.9)
            page = opts.page;
            // all, current
            if ("ssp" == _fnDataSource(settings)) // In server-side processing mode, most options are irrelevant since
            // rows not shown don't exist and the index order is the applied order
            // Removed is a special case - for consistency just return an empty
            // array
            return "removed" === search ? [] : _range(0, displayMaster.length);
            if ("current" == page) // Current page implies that order=current and fitler=applied, since it is
            // fairly senseless otherwise, regardless of what order and search actually
            // are
            for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); ien > i; i++) a.push(displayFiltered[i]); else if ("current" == order || "applied" == order) a = "none" == search ? displayMaster.slice() : // no search
            "applied" == search ? displayFiltered.slice() : // applied search
            $.map(displayMaster, function(el, i) {
                // removed search
                return -1 === $.inArray(el, displayFiltered) ? el : null;
            }); else if ("index" == order || "original" == order) for (i = 0, ien = settings.aoData.length; ien > i; i++) "none" == search ? a.push(i) : (// applied | removed
            tmp = $.inArray(i, displayFiltered), (-1 === tmp && "removed" == search || tmp >= 0 && "applied" == search) && a.push(i));
            return a;
        }, __row_selector = function(settings, selector, opts) {
            var run = function(sel) {
                var selInt = _intVal(sel);
                // Short cut - selector is a number and no options provided (default is
                // all records, so no need to check if the index is in there, since it
                // must be - dev error if the index doesn't exist).
                if (null !== selInt && !opts) return [ selInt ];
                var rows = _selector_row_indexes(settings, opts);
                if (null !== selInt && -1 !== $.inArray(selInt, rows)) // Selector - integer
                return [ selInt ];
                if (!sel) // Selector - none
                return rows;
                // Selector - function
                if ("function" == typeof sel) return $.map(rows, function(idx) {
                    var row = settings.aoData[idx];
                    return sel(idx, row._aData, row.nTr) ? idx : null;
                });
                // Get nodes in the order from the `rows` array with null values removed
                var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, "nTr"));
                // Selector - node
                if (sel.nodeName && -1 !== $.inArray(sel, nodes)) return [ sel._DT_RowIndex ];
                // ID selector. Want to always be able to select rows by id, regardless
                // of if the tr element has been created or not, so can't rely upon
                // jQuery here - hence a custom implementation. This does not match
                // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
                // but to select it using a CSS selector engine (like Sizzle or
                // querySelect) it would need to need to be escaped for some characters.
                // DataTables simplifies this for row selectors since you can select
                // only a row. A # indicates an id any anything that follows is the id -
                // unescaped.
                if ("string" == typeof sel && "#" === sel.charAt(0)) {
                    // get row index from id
                    var rowObj = settings.aIds[sel.replace(/^#/, "")];
                    if (rowObj !== undefined) return [ rowObj.idx ];
                }
                // Selector - jQuery selector string, array of nodes or jQuery object/
                // As jQuery's .filter() allows jQuery objects to be passed in filter,
                // it also allows arrays, so this will cope with all three options
                return $(nodes).filter(sel).map(function() {
                    return this._DT_RowIndex;
                }).toArray();
            };
            return _selector_run("row", selector, run, settings, opts);
        };
        _api_register("rows()", function(selector, opts) {
            // argument shifting
            selector === undefined ? selector = "" : $.isPlainObject(selector) && (opts = selector, 
            selector = ""), opts = _selector_opts(opts);
            var inst = this.iterator("table", function(settings) {
                return __row_selector(settings, selector, opts);
            }, 1);
            // Want argument shifting here and in __row_selector?
            return inst.selector.rows = selector, inst.selector.opts = opts, inst;
        }), _api_register("rows().nodes()", function() {
            return this.iterator("row", function(settings, row) {
                return settings.aoData[row].nTr || undefined;
            }, 1);
        }), _api_register("rows().data()", function() {
            return this.iterator(!0, "rows", function(settings, rows) {
                return _pluck_order(settings.aoData, rows, "_aData");
            }, 1);
        }), _api_registerPlural("rows().cache()", "row().cache()", function(type) {
            return this.iterator("row", function(settings, row) {
                var r = settings.aoData[row];
                return "search" === type ? r._aFilterData : r._aSortData;
            }, 1);
        }), _api_registerPlural("rows().invalidate()", "row().invalidate()", function(src) {
            return this.iterator("row", function(settings, row) {
                _fnInvalidate(settings, row, src);
            });
        }), _api_registerPlural("rows().indexes()", "row().index()", function() {
            return this.iterator("row", function(settings, row) {
                return row;
            }, 1);
        }), _api_registerPlural("rows().ids()", "row().id()", function(hash) {
            // `iterator` will drop undefined values, but in this case we want them
            for (var a = [], context = this.context, i = 0, ien = context.length; ien > i; i++) for (var j = 0, jen = this[i].length; jen > j; j++) {
                var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);
                a.push((hash === !0 ? "#" : "") + id);
            }
            return new _Api(context, a);
        }), _api_registerPlural("rows().remove()", "row().remove()", function() {
            var that = this;
            return this.iterator("row", function(settings, row, thatIdx) {
                var data = settings.aoData, rowData = data[row];
                data.splice(row, 1);
                // Update the _DT_RowIndex parameter on all rows in the table
                for (var i = 0, ien = data.length; ien > i; i++) null !== data[i].nTr && (data[i].nTr._DT_RowIndex = i);
                // Delete from the display arrays
                _fnDeleteIndex(settings.aiDisplayMaster, row), _fnDeleteIndex(settings.aiDisplay, row), 
                _fnDeleteIndex(that[thatIdx], row, !1), // maintain local indexes
                // Check for an 'overflow' they case for displaying the table
                _fnLengthOverflow(settings);
                // Remove the row's ID reference if there is one
                var id = settings.rowIdFn(rowData._aData);
                id !== undefined && delete settings.aIds[id];
            }), this.iterator("table", function(settings) {
                for (var i = 0, ien = settings.aoData.length; ien > i; i++) settings.aoData[i].idx = i;
            }), this;
        }), _api_register("rows.add()", function(rows) {
            var newRows = this.iterator("table", function(settings) {
                var row, i, ien, out = [];
                for (i = 0, ien = rows.length; ien > i; i++) row = rows[i], row.nodeName && "TR" === row.nodeName.toUpperCase() ? out.push(_fnAddTr(settings, row)[0]) : out.push(_fnAddData(settings, row));
                return out;
            }, 1), modRows = this.rows(-1);
            return modRows.pop(), $.merge(modRows, newRows), modRows;
        }), /**
	 *
	 */
        _api_register("row()", function(selector, opts) {
            return _selector_first(this.rows(selector, opts));
        }), _api_register("row().data()", function(data) {
            var ctx = this.context;
            // Set
            // Automatically invalidate
            return data === undefined ? ctx.length && this.length ? ctx[0].aoData[this[0]]._aData : undefined : (ctx[0].aoData[this[0]]._aData = data, 
            _fnInvalidate(ctx[0], this[0], "data"), this);
        }), _api_register("row().node()", function() {
            var ctx = this.context;
            return ctx.length && this.length ? ctx[0].aoData[this[0]].nTr || null : null;
        }), _api_register("row.add()", function(row) {
            // Allow a jQuery object to be passed in - only a single row is added from
            // it though - the first element in the set
            row instanceof $ && row.length && (row = row[0]);
            var rows = this.iterator("table", function(settings) {
                return row.nodeName && "TR" === row.nodeName.toUpperCase() ? _fnAddTr(settings, row)[0] : _fnAddData(settings, row);
            });
            // Return an Api.rows() extended instance, with the newly added row selected
            return this.row(rows[0]);
        });
        var __details_add = function(ctx, row, data, klass) {
            // Convert to array of TR elements
            var rows = [], addRow = function(r, k) {
                // Recursion to allow for arrays of jQuery objects
                if ($.isArray(r) || r instanceof $) for (var i = 0, ien = r.length; ien > i; i++) addRow(r[i], k); else // If we get a TR element, then just add it directly - up to the dev
                // to add the correct number of columns etc
                if (r.nodeName && "tr" === r.nodeName.toLowerCase()) rows.push(r); else {
                    // Otherwise create a row with a wrapper
                    var created = $("<tr><td/></tr>").addClass(k);
                    $("td", created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx), rows.push(created[0]);
                }
            };
            addRow(data, klass), row._details && row._details.remove(), row._details = $(rows), 
            // If the children were already shown, that state should be retained
            row._detailsShow && row._details.insertAfter(row.nTr);
        }, __details_remove = function(api, idx) {
            var ctx = api.context;
            if (ctx.length) {
                var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];
                row && row._details && (row._details.remove(), row._detailsShow = undefined, row._details = undefined);
            }
        }, __details_display = function(api, show) {
            var ctx = api.context;
            if (ctx.length && api.length) {
                var row = ctx[0].aoData[api[0]];
                row._details && (row._detailsShow = show, show ? row._details.insertAfter(row.nTr) : row._details.detach(), 
                __details_events(ctx[0]));
            }
        }, __details_events = function(settings) {
            var api = new _Api(settings), namespace = ".dt.DT_details", drawEvent = "draw" + namespace, colvisEvent = "column-visibility" + namespace, destroyEvent = "destroy" + namespace, data = settings.aoData;
            api.off(drawEvent + " " + colvisEvent + " " + destroyEvent), _pluck(data, "_details").length > 0 && (// On each draw, insert the required elements into the document
            api.on(drawEvent, function(e, ctx) {
                settings === ctx && api.rows({
                    page: "current"
                }).eq(0).each(function(idx) {
                    // Internal data grab
                    var row = data[idx];
                    row._detailsShow && row._details.insertAfter(row.nTr);
                });
            }), // Column visibility change - update the colspan
            api.on(colvisEvent, function(e, ctx, idx, vis) {
                if (settings === ctx) for (var row, visible = _fnVisbleColumns(ctx), i = 0, ien = data.length; ien > i; i++) row = data[i], 
                row._details && row._details.children("td[colspan]").attr("colspan", visible);
            }), // Table destroyed - nuke any child rows
            api.on(destroyEvent, function(e, ctx) {
                if (settings === ctx) for (var i = 0, ien = data.length; ien > i; i++) data[i]._details && __details_remove(api, i);
            }));
        }, _emp = "", _child_obj = _emp + "row().child", _child_mth = _child_obj + "()";
        // data can be:
        //  tr
        //  string
        //  jQuery or array of any of the above
        _api_register(_child_mth, function(data, klass) {
            var ctx = this.context;
            // show
            // remove
            // set
            return data === undefined ? ctx.length && this.length ? ctx[0].aoData[this[0]]._details : undefined : (data === !0 ? this.child.show() : data === !1 ? __details_remove(this) : ctx.length && this.length && __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass), 
            this);
        }), _api_register([ _child_obj + ".show()", _child_mth + ".show()" ], function(show) {
            // it returns an object and this method is not executed)
            return __details_display(this, !0), this;
        }), _api_register([ _child_obj + ".hide()", _child_mth + ".hide()" ], function() {
            // it returns an object and this method is not executed)
            return __details_display(this, !1), this;
        }), _api_register([ _child_obj + ".remove()", _child_mth + ".remove()" ], function() {
            // it returns an object and this method is not executed)
            return __details_remove(this), this;
        }), _api_register(_child_obj + ".isShown()", function() {
            var ctx = this.context;
            return ctx.length && this.length ? ctx[0].aoData[this[0]]._detailsShow || !1 : !1;
        });
        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Columns
	 *
	 * {integer}           - column index (>=0 count from left, <0 count from right)
	 * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
	 * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
	 * "{string}:name"     - column name
	 * "{string}"          - jQuery selector on column header nodes
	 *
	 */
        // can be an array of these items, comma separated list, or an array of comma
        // separated lists
        var __re_column_selector = /^(.+):(name|visIdx|visible)$/, __columnData = function(settings, column, r1, r2, rows) {
            for (var a = [], row = 0, ien = rows.length; ien > row; row++) a.push(_fnGetCellData(settings, rows[row], column));
            return a;
        }, __column_selector = function(settings, selector, opts) {
            var columns = settings.aoColumns, names = _pluck(columns, "sName"), nodes = _pluck(columns, "nTh"), run = function(s) {
                var selInt = _intVal(s);
                // Selector - all
                if ("" === s) return _range(columns.length);
                // Selector - index
                if (null !== selInt) return [ selInt >= 0 ? selInt : // Count from left
                columns.length + selInt ];
                // Selector = function
                if ("function" == typeof s) {
                    var rows = _selector_row_indexes(settings, opts);
                    return $.map(columns, function(col, idx) {
                        return s(idx, __columnData(settings, idx, 0, 0, rows), nodes[idx]) ? idx : null;
                    });
                }
                // jQuery or string selector
                var match = "string" == typeof s ? s.match(__re_column_selector) : "";
                if (!match) // jQuery selector on the TH elements for the columns
                return $(nodes).filter(s).map(function() {
                    return $.inArray(this, nodes);
                }).toArray();
                switch (match[2]) {
                  case "visIdx":
                  case "visible":
                    var idx = parseInt(match[1], 10);
                    // Visible index given, convert to column index
                    if (0 > idx) {
                        // Counting from the right
                        var visColumns = $.map(columns, function(col, i) {
                            return col.bVisible ? i : null;
                        });
                        return [ visColumns[visColumns.length + idx] ];
                    }
                    // Counting from the left
                    return [ _fnVisibleToColumnIndex(settings, idx) ];

                  case "name":
                    // match by name. `names` is column index complete and in order
                    return $.map(names, function(name, i) {
                        return name === match[1] ? i : null;
                    });
                }
            };
            return _selector_run("column", selector, run, settings, opts);
        }, __setColumnVis = function(settings, column, vis, recalc) {
            var cells, i, ien, tr, cols = settings.aoColumns, col = cols[column], data = settings.aoData;
            // Get
            if (vis === undefined) return col.bVisible;
            // Set
            // No change
            if (col.bVisible !== vis) {
                if (vis) {
                    // Insert column
                    // Need to decide if we should use appendChild or insertBefore
                    var insertBefore = $.inArray(!0, _pluck(cols, "bVisible"), column + 1);
                    for (i = 0, ien = data.length; ien > i; i++) tr = data[i].nTr, cells = data[i].anCells, 
                    tr && // insertBefore can act like appendChild if 2nd arg is null
                    tr.insertBefore(cells[column], cells[insertBefore] || null);
                } else // Remove column
                $(_pluck(settings.aoData, "anCells", column)).detach();
                // Common actions
                col.bVisible = vis, _fnDrawHead(settings, settings.aoHeader), _fnDrawHead(settings, settings.aoFooter), 
                (recalc === undefined || recalc) && (// Automatically adjust column sizing
                _fnAdjustColumnSizing(settings), // Realign columns for scrolling
                (settings.oScroll.sX || settings.oScroll.sY) && _fnScrollDraw(settings)), _fnCallbackFire(settings, null, "column-visibility", [ settings, column, vis ]), 
                _fnSaveState(settings);
            }
        };
        _api_register("columns()", function(selector, opts) {
            // argument shifting
            selector === undefined ? selector = "" : $.isPlainObject(selector) && (opts = selector, 
            selector = ""), opts = _selector_opts(opts);
            var inst = this.iterator("table", function(settings) {
                return __column_selector(settings, selector, opts);
            }, 1);
            // Want argument shifting here and in _row_selector?
            return inst.selector.cols = selector, inst.selector.opts = opts, inst;
        }), _api_registerPlural("columns().header()", "column().header()", function(selector, opts) {
            return this.iterator("column", function(settings, column) {
                return settings.aoColumns[column].nTh;
            }, 1);
        }), _api_registerPlural("columns().footer()", "column().footer()", function(selector, opts) {
            return this.iterator("column", function(settings, column) {
                return settings.aoColumns[column].nTf;
            }, 1);
        }), _api_registerPlural("columns().data()", "column().data()", function() {
            return this.iterator("column-rows", __columnData, 1);
        }), _api_registerPlural("columns().dataSrc()", "column().dataSrc()", function() {
            return this.iterator("column", function(settings, column) {
                return settings.aoColumns[column].mData;
            }, 1);
        }), _api_registerPlural("columns().cache()", "column().cache()", function(type) {
            return this.iterator("column-rows", function(settings, column, i, j, rows) {
                return _pluck_order(settings.aoData, rows, "search" === type ? "_aFilterData" : "_aSortData", column);
            }, 1);
        }), _api_registerPlural("columns().nodes()", "column().nodes()", function() {
            return this.iterator("column-rows", function(settings, column, i, j, rows) {
                return _pluck_order(settings.aoData, rows, "anCells", column);
            }, 1);
        }), _api_registerPlural("columns().visible()", "column().visible()", function(vis, calc) {
            return this.iterator("column", function(settings, column) {
                // else
                return vis === undefined ? settings.aoColumns[column].bVisible : void __setColumnVis(settings, column, vis, calc);
            });
        }), _api_registerPlural("columns().indexes()", "column().index()", function(type) {
            return this.iterator("column", function(settings, column) {
                return "visible" === type ? _fnColumnIndexToVisible(settings, column) : column;
            }, 1);
        }), _api_register("columns.adjust()", function() {
            return this.iterator("table", function(settings) {
                _fnAdjustColumnSizing(settings);
            }, 1);
        }), _api_register("column.index()", function(type, idx) {
            if (0 !== this.context.length) {
                var ctx = this.context[0];
                if ("fromVisible" === type || "toData" === type) return _fnVisibleToColumnIndex(ctx, idx);
                if ("fromData" === type || "toVisible" === type) return _fnColumnIndexToVisible(ctx, idx);
            }
        }), _api_register("column()", function(selector, opts) {
            return _selector_first(this.columns(selector, opts));
        });
        var __cell_selector = function(settings, selector, opts) {
            var row, a, i, ien, j, o, host, data = settings.aoData, rows = _selector_row_indexes(settings, opts), cells = _removeEmpty(_pluck_order(data, rows, "anCells")), allCells = $([].concat.apply([], cells)), columns = settings.aoColumns.length, run = function(s) {
                var fnSelector = "function" == typeof s;
                if (null === s || s === undefined || fnSelector) {
                    for (// All cells and function selectors
                    a = [], i = 0, ien = rows.length; ien > i; i++) for (row = rows[i], j = 0; columns > j; j++) o = {
                        row: row,
                        column: j
                    }, fnSelector ? (// Selector - function
                    host = data[row], s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null) && a.push(o)) : // Selector - all
                    a.push(o);
                    return a;
                }
                // Selector - index
                // Selector - index
                return $.isPlainObject(s) ? [ s ] : allCells.filter(s).map(function(i, el) {
                    if (el.parentNode) row = el.parentNode._DT_RowIndex; else // If no parent node, then the cell is hidden and we'll need
                    // to traverse the array to find it
                    for (i = 0, ien = data.length; ien > i; i++) if (-1 !== $.inArray(el, data[i].anCells)) {
                        row = i;
                        break;
                    }
                    return {
                        row: row,
                        column: $.inArray(el, data[row].anCells)
                    };
                }).toArray();
            };
            return _selector_run("cell", selector, run, settings, opts);
        };
        _api_register("cells()", function(rowSelector, columnSelector, opts) {
            // Cell selector
            if (// Argument shifting
            $.isPlainObject(rowSelector) && (// Indexes
            rowSelector.row === undefined ? (// Selector options in first parameter
            opts = rowSelector, rowSelector = null) : (// Cell index objects in first parameter
            opts = columnSelector, columnSelector = null)), $.isPlainObject(columnSelector) && (opts = columnSelector, 
            columnSelector = null), null === columnSelector || columnSelector === undefined) return this.iterator("table", function(settings) {
                return __cell_selector(settings, rowSelector, _selector_opts(opts));
            });
            // Row + column selector
            var a, i, ien, j, jen, columns = this.columns(columnSelector, opts), rows = this.rows(rowSelector, opts), cells = this.iterator("table", function(settings, idx) {
                for (a = [], i = 0, ien = rows[idx].length; ien > i; i++) for (j = 0, jen = columns[idx].length; jen > j; j++) a.push({
                    row: rows[idx][i],
                    column: columns[idx][j]
                });
                return a;
            }, 1);
            return $.extend(cells.selector, {
                cols: columnSelector,
                rows: rowSelector,
                opts: opts
            }), cells;
        }), _api_registerPlural("cells().nodes()", "cell().node()", function() {
            return this.iterator("cell", function(settings, row, column) {
                var cells = settings.aoData[row].anCells;
                return cells ? cells[column] : undefined;
            }, 1);
        }), _api_register("cells().data()", function() {
            return this.iterator("cell", function(settings, row, column) {
                return _fnGetCellData(settings, row, column);
            }, 1);
        }), _api_registerPlural("cells().cache()", "cell().cache()", function(type) {
            return type = "search" === type ? "_aFilterData" : "_aSortData", this.iterator("cell", function(settings, row, column) {
                return settings.aoData[row][type][column];
            }, 1);
        }), _api_registerPlural("cells().render()", "cell().render()", function(type) {
            return this.iterator("cell", function(settings, row, column) {
                return _fnGetCellData(settings, row, column, type);
            }, 1);
        }), _api_registerPlural("cells().indexes()", "cell().index()", function() {
            return this.iterator("cell", function(settings, row, column) {
                return {
                    row: row,
                    column: column,
                    columnVisible: _fnColumnIndexToVisible(settings, column)
                };
            }, 1);
        }), _api_registerPlural("cells().invalidate()", "cell().invalidate()", function(src) {
            return this.iterator("cell", function(settings, row, column) {
                _fnInvalidate(settings, row, src, column);
            });
        }), _api_register("cell()", function(rowSelector, columnSelector, opts) {
            return _selector_first(this.cells(rowSelector, columnSelector, opts));
        }), _api_register("cell().data()", function(data) {
            var ctx = this.context, cell = this[0];
            // Set
            return data === undefined ? ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined : (_fnSetCellData(ctx[0], cell[0].row, cell[0].column, data), 
            _fnInvalidate(ctx[0], cell[0].row, "data", cell[0].column), this);
        }), /**
	 * Get current ordering (sorting) that has been applied to the table.
	 *
	 * @returns {array} 2D array containing the sorting information for the first
	 *   table in the current context. Each element in the parent array represents
	 *   a column being sorted upon (i.e. multi-sorting with two columns would have
	 *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
	 *   the column index that the sorting condition applies to, the second is the
	 *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
	 *   index of the sorting order from the `column.sorting` initialisation array.
	 */
        /**
	 * Set the ordering for the table.
	 *
	 * @param {integer} order Column index to sort upon.
	 * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
	 * @returns {DataTables.Api} this
	 */
        /**
	 * Set the ordering for the table.
	 *
	 * @param {array} order 1D array of sorting information to be applied.
	 * @param {array} [...] Optional additional sorting conditions
	 * @returns {DataTables.Api} this
	 */
        /**
	 * Set the ordering for the table.
	 *
	 * @param {array} order 2D array of sorting information to be applied.
	 * @returns {DataTables.Api} this
	 */
        _api_register("order()", function(order, dir) {
            var ctx = this.context;
            // set
            // Simple column / direction passed in
            // Arguments passed in (list of 1D arrays)
            return order === undefined ? 0 !== ctx.length ? ctx[0].aaSorting : undefined : ("number" == typeof order ? order = [ [ order, dir ] ] : $.isArray(order[0]) || (order = Array.prototype.slice.call(arguments)), 
            this.iterator("table", function(settings) {
                settings.aaSorting = order.slice();
            }));
        }), /**
	 * Attach a sort listener to an element for a given column
	 *
	 * @param {node|jQuery|string} node Identifier for the element(s) to attach the
	 *   listener to. This can take the form of a single DOM node, a jQuery
	 *   collection of nodes or a jQuery selector which will identify the node(s).
	 * @param {integer} column the column that a click on this node will sort on
	 * @param {function} [callback] callback function when sort is run
	 * @returns {DataTables.Api} this
	 */
        _api_register("order.listener()", function(node, column, callback) {
            return this.iterator("table", function(settings) {
                _fnSortAttachListener(settings, node, column, callback);
            });
        }), // Order by the selected column(s)
        _api_register([ "columns().order()", "column().order()" ], function(dir) {
            var that = this;
            return this.iterator("table", function(settings, i) {
                var sort = [];
                $.each(that[i], function(j, col) {
                    sort.push([ col, dir ]);
                }), settings.aaSorting = sort;
            });
        }), _api_register("search()", function(input, regex, smart, caseInsen) {
            var ctx = this.context;
            return input === undefined ? 0 !== ctx.length ? ctx[0].oPreviousSearch.sSearch : undefined : this.iterator("table", function(settings) {
                settings.oFeatures.bFilter && _fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {
                    sSearch: input + "",
                    bRegex: null === regex ? !1 : regex,
                    bSmart: null === smart ? !0 : smart,
                    bCaseInsensitive: null === caseInsen ? !0 : caseInsen
                }), 1);
            });
        }), _api_registerPlural("columns().search()", "column().search()", function(input, regex, smart, caseInsen) {
            return this.iterator("column", function(settings, column) {
                var preSearch = settings.aoPreSearchCols;
                // set
                return input === undefined ? preSearch[column].sSearch : void (settings.oFeatures.bFilter && ($.extend(preSearch[column], {
                    sSearch: input + "",
                    bRegex: null === regex ? !1 : regex,
                    bSmart: null === smart ? !0 : smart,
                    bCaseInsensitive: null === caseInsen ? !0 : caseInsen
                }), _fnFilterComplete(settings, settings.oPreviousSearch, 1)));
            });
        }), /*
	 * State API methods
	 */
        _api_register("state()", function() {
            return this.context.length ? this.context[0].oSavedState : null;
        }), _api_register("state.clear()", function() {
            return this.iterator("table", function(settings) {
                // Save an empty object
                settings.fnStateSaveCallback.call(settings.oInstance, settings, {});
            });
        }), _api_register("state.loaded()", function() {
            return this.context.length ? this.context[0].oLoadedState : null;
        }), _api_register("state.save()", function() {
            return this.iterator("table", function(settings) {
                _fnSaveState(settings);
            });
        }), /**
	 * Provide a common method for plug-ins to check the version of DataTables being
	 * used, in order to ensure compatibility.
	 *
	 *  @param {string} version Version string to check for, in the format "X.Y.Z".
	 *    Note that the formats "X" and "X.Y" are also acceptable.
	 *  @returns {boolean} true if this version of DataTables is greater or equal to
	 *    the required version, or false if this version of DataTales is not
	 *    suitable
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
	 */
        DataTable.versionCheck = DataTable.fnVersionCheck = function(version) {
            for (var iThis, iThat, aThis = DataTable.version.split("."), aThat = version.split("."), i = 0, iLen = aThat.length; iLen > i; i++) // Parts are the same, keep comparing
            if (iThis = parseInt(aThis[i], 10) || 0, iThat = parseInt(aThat[i], 10) || 0, iThis !== iThat) // Parts are different, return immediately
            return iThis > iThat;
            return !0;
        }, /**
	 * Check if a `<table>` node is a DataTable table already or not.
	 *
	 *  @param {node|jquery|string} table Table node, jQuery object or jQuery
	 *      selector for the table to test. Note that if more than more than one
	 *      table is passed on, only the first will be checked
	 *  @returns {boolean} true the table given is a DataTable, or false otherwise
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
	 *      $('#example').dataTable();
	 *    }
	 */
        DataTable.isDataTable = DataTable.fnIsDataTable = function(table) {
            var t = $(table).get(0), is = !1;
            return $.each(DataTable.settings, function(i, o) {
                var head = o.nScrollHead ? $("table", o.nScrollHead)[0] : null, foot = o.nScrollFoot ? $("table", o.nScrollFoot)[0] : null;
                (o.nTable === t || head === t || foot === t) && (is = !0);
            }), is;
        }, /**
	 * Get all DataTable tables that have been initialised - optionally you can
	 * select to get only currently visible tables.
	 *
	 *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
	 *    or visible tables only.
	 *  @returns {array} Array of `table` nodes (not DataTable instances) which are
	 *    DataTables
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    $.each( $.fn.dataTable.tables(true), function () {
	 *      $(table).DataTable().columns.adjust();
	 *    } );
	 */
        DataTable.tables = DataTable.fnTables = function(visible) {
            var api = !1;
            $.isPlainObject(visible) && (api = visible.api, visible = visible.visible);
            var a = $.map(DataTable.settings, function(o) {
                return !visible || visible && $(o.nTable).is(":visible") ? o.nTable : void 0;
            });
            return api ? new _Api(a) : a;
        }, /**
	 * DataTables utility methods
	 * 
	 * This namespace provides helper methods that DataTables uses internally to
	 * create a DataTable, but which are not exclusively used only for DataTables.
	 * These methods can be used by extension authors to save the duplication of
	 * code.
	 *
	 *  @namespace
	 */
        DataTable.util = {
            /**
		 * Throttle the calls to a function. Arguments and context are maintained
		 * for the throttled function.
		 *
		 * @param {function} fn Function to be called
		 * @param {integer} freq Call frequency in mS
		 * @return {function} Wrapped function
		 */
            throttle: _fnThrottle,
            /**
		 * Escape a string such that it can be used in a regular expression
		 *
		 *  @param {string} sVal string to escape
		 *  @returns {string} escaped string
		 */
            escapeRegex: _fnEscapeRegex
        }, /**
	 * Convert from camel case parameters to Hungarian notation. This is made public
	 * for the extensions to provide the same ability as DataTables core to accept
	 * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
	 * parameters.
	 *
	 *  @param {object} src The model object which holds all parameters that can be
	 *    mapped.
	 *  @param {object} user The object to convert from camel case to Hungarian.
	 *  @param {boolean} force When set to `true`, properties which already have a
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	 *    won't be.
	 */
        DataTable.camelToHungarian = _fnCamelToHungarian, /**
	 *
	 */
        _api_register("$()", function(selector, opts) {
            var rows = this.rows(opts).nodes(), // Get all rows
            jqRows = $(rows);
            return $([].concat(jqRows.filter(selector).toArray(), jqRows.find(selector).toArray()));
        }), // jQuery functions to operate on the tables
        $.each([ "on", "one", "off" ], function(i, key) {
            _api_register(key + "()", function() {
                var args = Array.prototype.slice.call(arguments);
                // Add the `dt` namespace automatically if it isn't already present
                args[0].match(/\.dt\b/) || (args[0] += ".dt");
                var inst = $(this.tables().nodes());
                return inst[key].apply(inst, args), this;
            });
        }), _api_register("clear()", function() {
            return this.iterator("table", function(settings) {
                _fnClearTable(settings);
            });
        }), _api_register("settings()", function() {
            return new _Api(this.context, this.context);
        }), _api_register("init()", function() {
            var ctx = this.context;
            return ctx.length ? ctx[0].oInit : null;
        }), _api_register("data()", function() {
            return this.iterator("table", function(settings) {
                return _pluck(settings.aoData, "_aData");
            }).flatten();
        }), _api_register("destroy()", function(remove) {
            return remove = remove || !1, this.iterator("table", function(settings) {
                var ien, orig = settings.nTableWrapper.parentNode, classes = settings.oClasses, table = settings.nTable, tbody = settings.nTBody, thead = settings.nTHead, tfoot = settings.nTFoot, jqTable = $(table), jqTbody = $(tbody), jqWrapper = $(settings.nTableWrapper), rows = $.map(settings.aoData, function(r) {
                    return r.nTr;
                });
                // Flag to note that the table is currently being destroyed - no action
                // should be taken
                settings.bDestroying = !0, // Fire off the destroy callbacks for plug-ins etc
                _fnCallbackFire(settings, "aoDestroyCallback", "destroy", [ settings ]), // If not being removed from the document, make all columns visible
                remove || new _Api(settings).columns().visible(!0), // Blitz all `DT` namespaced events (these are internal events, the
                // lowercase, `dt` events are user subscribed and they are responsible
                // for removing them
                jqWrapper.unbind(".DT").find(":not(tbody *)").unbind(".DT"), $(window).unbind(".DT-" + settings.sInstance), 
                // When scrolling we had to break the table up - restore it
                table != thead.parentNode && (jqTable.children("thead").detach(), jqTable.append(thead)), 
                tfoot && table != tfoot.parentNode && (jqTable.children("tfoot").detach(), jqTable.append(tfoot)), 
                settings.aaSorting = [], settings.aaSortingFixed = [], _fnSortingClasses(settings), 
                $(rows).removeClass(settings.asStripeClasses.join(" ")), $("th, td", thead).removeClass(classes.sSortable + " " + classes.sSortableAsc + " " + classes.sSortableDesc + " " + classes.sSortableNone), 
                settings.bJUI && ($("th span." + classes.sSortIcon + ", td span." + classes.sSortIcon, thead).detach(), 
                $("th, td", thead).each(function() {
                    var wrapper = $("div." + classes.sSortJUIWrapper, this);
                    $(this).append(wrapper.contents()), wrapper.detach();
                })), // Add the TR elements back into the table in their original order
                jqTbody.children().detach(), jqTbody.append(rows);
                // Remove the DataTables generated nodes, events and classes
                var removedMethod = remove ? "remove" : "detach";
                jqTable[removedMethod](), jqWrapper[removedMethod](), // If we need to reattach the table to the document
                !remove && orig && (// insertBefore acts like appendChild if !arg[1]
                orig.insertBefore(table, settings.nTableReinsertBefore), // Restore the width of the original table - was read from the style property,
                // so we can restore directly to that
                jqTable.css("width", settings.sDestroyWidth).removeClass(classes.sTable), // If the were originally stripe classes - then we add them back here.
                // Note this is not fool proof (for example if not all rows had stripe
                // classes - but it's a good effort without getting carried away
                ien = settings.asDestroyStripes.length, ien && jqTbody.children().each(function(i) {
                    $(this).addClass(settings.asDestroyStripes[i % ien]);
                }));
                /* Remove the settings object from the settings array */
                var idx = $.inArray(settings, DataTable.settings);
                -1 !== idx && DataTable.settings.splice(idx, 1);
            });
        }), // Add the `every()` method for rows, columns and cells in a compact form
        $.each([ "column", "row", "cell" ], function(i, type) {
            _api_register(type + "s().every()", function(fn) {
                return this.iterator(type, function(settings, arg1, arg2, arg3, arg4) {
                    // Rows and columns:
                    //  arg1 - index
                    //  arg2 - table counter
                    //  arg3 - loop counter
                    //  arg4 - undefined
                    // Cells:
                    //  arg1 - row index
                    //  arg2 - column index
                    //  arg3 - table counter
                    //  arg4 - loop counter
                    fn.call(new _Api(settings)[type](arg1, "cell" === type ? arg2 : undefined), arg1, arg2, arg3, arg4);
                });
            });
        }), // i18n method for extensions to be able to use the language object from the
        // DataTable
        _api_register("i18n()", function(token, def, plural) {
            var ctx = this.context[0], resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);
            return resolved === undefined && (resolved = def), plural !== undefined && $.isPlainObject(resolved) && (resolved = resolved[plural] !== undefined ? resolved[plural] : resolved._), 
            resolved.replace("%d", plural);
        }), /**
	 * Version string for plug-ins to check compatibility. Allowed format is
	 * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
	 * only for non-release builds. See http://semver.org/ for more information.
	 *  @member
	 *  @type string
	 *  @default Version number
	 */
        DataTable.version = "1.10.9", /**
	 * Private data store, containing all of the settings objects that are
	 * created for the tables on a given page.
	 *
	 * Note that the `DataTable.settings` object is aliased to
	 * `jQuery.fn.dataTableExt` through which it may be accessed and
	 * manipulated, or `jQuery.fn.dataTable.settings`.
	 *  @member
	 *  @type array
	 *  @default []
	 *  @private
	 */
        DataTable.settings = [], /**
	 * Object models container, for the various models that DataTables has
	 * available to it. These models define the objects that are used to hold
	 * the active state and configuration of the table.
	 *  @namespace
	 */
        DataTable.models = {}, /**
	 * Template object for the way in which DataTables holds information about
	 * search information for the global filter and individual column filters.
	 *  @namespace
	 */
        DataTable.models.oSearch = {
            /**
		 * Flag to indicate if the filtering should be case insensitive or not
		 *  @type boolean
		 *  @default true
		 */
            bCaseInsensitive: !0,
            /**
		 * Applied search term
		 *  @type string
		 *  @default <i>Empty string</i>
		 */
            sSearch: "",
            /**
		 * Flag to indicate if the search term should be interpreted as a
		 * regular expression (true) or not (false) and therefore and special
		 * regex characters escaped.
		 *  @type boolean
		 *  @default false
		 */
            bRegex: !1,
            /**
		 * Flag to indicate if DataTables is to use its smart filtering or not.
		 *  @type boolean
		 *  @default true
		 */
            bSmart: !0
        }, /**
	 * Template object for the way in which DataTables holds information about
	 * each individual row. This is the object format used for the settings
	 * aoData array.
	 *  @namespace
	 */
        DataTable.models.oRow = {
            /**
		 * TR element for the row
		 *  @type node
		 *  @default null
		 */
            nTr: null,
            /**
		 * Array of TD elements for each row. This is null until the row has been
		 * created.
		 *  @type array nodes
		 *  @default []
		 */
            anCells: null,
            /**
		 * Data object from the original data source for the row. This is either
		 * an array if using the traditional form of DataTables, or an object if
		 * using mData options. The exact type will depend on the passed in
		 * data from the data source, or will be an array if using DOM a data
		 * source.
		 *  @type array|object
		 *  @default []
		 */
            _aData: [],
            /**
		 * Sorting data cache - this array is ostensibly the same length as the
		 * number of columns (although each index is generated only as it is
		 * needed), and holds the data that is used for sorting each column in the
		 * row. We do this cache generation at the start of the sort in order that
		 * the formatting of the sort data need be done only once for each cell
		 * per sort. This array should not be read from or written to by anything
		 * other than the master sorting methods.
		 *  @type array
		 *  @default null
		 *  @private
		 */
            _aSortData: null,
            /**
		 * Per cell filtering data cache. As per the sort data cache, used to
		 * increase the performance of the filtering in DataTables
		 *  @type array
		 *  @default null
		 *  @private
		 */
            _aFilterData: null,
            /**
		 * Filtering data cache. This is the same as the cell filtering cache, but
		 * in this case a string rather than an array. This is easily computed with
		 * a join on `_aFilterData`, but is provided as a cache so the join isn't
		 * needed on every search (memory traded for performance)
		 *  @type array
		 *  @default null
		 *  @private
		 */
            _sFilterRow: null,
            /**
		 * Cache of the class name that DataTables has applied to the row, so we
		 * can quickly look at this variable rather than needing to do a DOM check
		 * on className for the nTr property.
		 *  @type string
		 *  @default <i>Empty string</i>
		 *  @private
		 */
            _sRowStripe: "",
            /**
		 * Denote if the original data source was from the DOM, or the data source
		 * object. This is used for invalidating data, so DataTables can
		 * automatically read data from the original source, unless uninstructed
		 * otherwise.
		 *  @type string
		 *  @default null
		 *  @private
		 */
            src: null,
            /**
		 * Index in the aoData array. This saves an indexOf lookup when we have the
		 * object, but want to know the index
		 *  @type integer
		 *  @default -1
		 *  @private
		 */
            idx: -1
        }, /**
	 * Template object for the column information object in DataTables. This object
	 * is held in the settings aoColumns array and contains all the information that
	 * DataTables needs about each individual column.
	 *
	 * Note that this object is related to {@link DataTable.defaults.column}
	 * but this one is the internal data store for DataTables's cache of columns.
	 * It should NOT be manipulated outside of DataTables. Any configuration should
	 * be done through the initialisation options.
	 *  @namespace
	 */
        DataTable.models.oColumn = {
            /**
		 * Column index. This could be worked out on-the-fly with $.inArray, but it
		 * is faster to just hold it as a variable
		 *  @type integer
		 *  @default null
		 */
            idx: null,
            /**
		 * A list of the columns that sorting should occur on when this column
		 * is sorted. That this property is an array allows multi-column sorting
		 * to be defined for a column (for example first name / last name columns
		 * would benefit from this). The values are integers pointing to the
		 * columns to be sorted on (typically it will be a single integer pointing
		 * at itself, but that doesn't need to be the case).
		 *  @type array
		 */
            aDataSort: null,
            /**
		 * Define the sorting directions that are applied to the column, in sequence
		 * as the column is repeatedly sorted upon - i.e. the first value is used
		 * as the sorting direction when the column if first sorted (clicked on).
		 * Sort it again (click again) and it will move on to the next index.
		 * Repeat until loop.
		 *  @type array
		 */
            asSorting: null,
            /**
		 * Flag to indicate if the column is searchable, and thus should be included
		 * in the filtering or not.
		 *  @type boolean
		 */
            bSearchable: null,
            /**
		 * Flag to indicate if the column is sortable or not.
		 *  @type boolean
		 */
            bSortable: null,
            /**
		 * Flag to indicate if the column is currently visible in the table or not
		 *  @type boolean
		 */
            bVisible: null,
            /**
		 * Store for manual type assignment using the `column.type` option. This
		 * is held in store so we can manipulate the column's `sType` property.
		 *  @type string
		 *  @default null
		 *  @private
		 */
            _sManualType: null,
            /**
		 * Flag to indicate if HTML5 data attributes should be used as the data
		 * source for filtering or sorting. True is either are.
		 *  @type boolean
		 *  @default false
		 *  @private
		 */
            _bAttrSrc: !1,
            /**
		 * Developer definable function that is called whenever a cell is created (Ajax source,
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
		 * allowing you to modify the DOM element (add background colour for example) when the
		 * element is available.
		 *  @type function
		 *  @param {element} nTd The TD node that has been created
		 *  @param {*} sData The Data for the cell
		 *  @param {array|object} oData The data for the whole row
		 *  @param {int} iRow The row index for the aoData data store
		 *  @default null
		 */
            fnCreatedCell: null,
            /**
		 * Function to get data from a cell in a column. You should <b>never</b>
		 * access data directly through _aData internally in DataTables - always use
		 * the method attached to this property. It allows mData to function as
		 * required. This function is automatically assigned by the column
		 * initialisation method
		 *  @type function
		 *  @param {array|object} oData The data array/object for the array
		 *    (i.e. aoData[]._aData)
		 *  @param {string} sSpecific The specific data type you want to get -
		 *    'display', 'type' 'filter' 'sort'
		 *  @returns {*} The data for the cell from the given row's data
		 *  @default null
		 */
            fnGetData: null,
            /**
		 * Function to set data for a cell in the column. You should <b>never</b>
		 * set the data directly to _aData internally in DataTables - always use
		 * this method. It allows mData to function as required. This function
		 * is automatically assigned by the column initialisation method
		 *  @type function
		 *  @param {array|object} oData The data array/object for the array
		 *    (i.e. aoData[]._aData)
		 *  @param {*} sValue Value to set
		 *  @default null
		 */
            fnSetData: null,
            /**
		 * Property to read the value for the cells in the column from the data
		 * source array / object. If null, then the default content is used, if a
		 * function is given then the return from the function is used.
		 *  @type function|int|string|null
		 *  @default null
		 */
            mData: null,
            /**
		 * Partner property to mData which is used (only when defined) to get
		 * the data - i.e. it is basically the same as mData, but without the
		 * 'set' option, and also the data fed to it is the result from mData.
		 * This is the rendering method to match the data method of mData.
		 *  @type function|int|string|null
		 *  @default null
		 */
            mRender: null,
            /**
		 * Unique header TH/TD element for this column - this is what the sorting
		 * listener is attached to (if sorting is enabled.)
		 *  @type node
		 *  @default null
		 */
            nTh: null,
            /**
		 * Unique footer TH/TD element for this column (if there is one). Not used
		 * in DataTables as such, but can be used for plug-ins to reference the
		 * footer for each column.
		 *  @type node
		 *  @default null
		 */
            nTf: null,
            /**
		 * The class to apply to all TD elements in the table's TBODY for the column
		 *  @type string
		 *  @default null
		 */
            sClass: null,
            /**
		 * When DataTables calculates the column widths to assign to each column,
		 * it finds the longest string in each column and then constructs a
		 * temporary table and reads the widths from that. The problem with this
		 * is that "mmm" is much wider then "iiii", but the latter is a longer
		 * string - thus the calculation can go wrong (doing it properly and putting
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as
		 * a "work around" we provide this option. It will append its value to the
		 * text that is found to be the longest string for the column - i.e. padding.
		 *  @type string
		 */
            sContentPadding: null,
            /**
		 * Allows a default value to be given for a column's data, and will be used
		 * whenever a null data source is encountered (this can be because mData
		 * is set to null, or because the data source itself is null).
		 *  @type string
		 *  @default null
		 */
            sDefaultContent: null,
            /**
		 * Name for the column, allowing reference to the column by name as well as
		 * by index (needs a lookup to work by name).
		 *  @type string
		 */
            sName: null,
            /**
		 * Custom sorting data type - defines which of the available plug-ins in
		 * afnSortData the custom sorting will use - if any is defined.
		 *  @type string
		 *  @default std
		 */
            sSortDataType: "std",
            /**
		 * Class to be applied to the header element when sorting on this column
		 *  @type string
		 *  @default null
		 */
            sSortingClass: null,
            /**
		 * Class to be applied to the header element when sorting on this column -
		 * when jQuery UI theming is used.
		 *  @type string
		 *  @default null
		 */
            sSortingClassJUI: null,
            /**
		 * Title of the column - what is seen in the TH element (nTh).
		 *  @type string
		 */
            sTitle: null,
            /**
		 * Column sorting and filtering type
		 *  @type string
		 *  @default null
		 */
            sType: null,
            /**
		 * Width of the column
		 *  @type string
		 *  @default null
		 */
            sWidth: null,
            /**
		 * Width of the column when it was first "encountered"
		 *  @type string
		 *  @default null
		 */
            sWidthOrig: null
        }, /*
	 * Developer note: The properties of the object below are given in Hungarian
	 * notation, that was used as the interface for DataTables prior to v1.10, however
	 * from v1.10 onwards the primary interface is camel case. In order to avoid
	 * breaking backwards compatibility utterly with this change, the Hungarian
	 * version is still, internally the primary interface, but is is not documented
	 * - hence the @name tags in each doc comment. This allows a Javascript function
	 * to create a map from Hungarian notation to camel case (going the other direction
	 * would require each property to be listed, which would at around 3K to the size
	 * of DataTables, while this method is about a 0.5K hit.
	 *
	 * Ultimately this does pave the way for Hungarian notation to be dropped
	 * completely, but that is a massive amount of work and will break current
	 * installs (therefore is on-hold until v2).
	 */
        /**
	 * Initialisation options that can be given to DataTables at initialisation
	 * time.
	 *  @namespace
	 */
        DataTable.defaults = {
            /**
		 * An array of data to use for the table, passed in at initialisation which
		 * will be used in preference to any data which is already in the DOM. This is
		 * particularly useful for constructing tables purely in Javascript, for
		 * example with a custom Ajax call.
		 *  @type array
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.data
		 *
		 *  @example
		 *    // Using a 2D array data source
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "data": [
		 *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
		 *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
		 *        ],
		 *        "columns": [
		 *          { "title": "Engine" },
		 *          { "title": "Browser" },
		 *          { "title": "Platform" },
		 *          { "title": "Version" },
		 *          { "title": "Grade" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using an array of objects as a data source (`data`)
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "data": [
		 *          {
		 *            "engine":   "Trident",
		 *            "browser":  "Internet Explorer 4.0",
		 *            "platform": "Win 95+",
		 *            "version":  4,
		 *            "grade":    "X"
		 *          },
		 *          {
		 *            "engine":   "Trident",
		 *            "browser":  "Internet Explorer 5.0",
		 *            "platform": "Win 95+",
		 *            "version":  5,
		 *            "grade":    "C"
		 *          }
		 *        ],
		 *        "columns": [
		 *          { "title": "Engine",   "data": "engine" },
		 *          { "title": "Browser",  "data": "browser" },
		 *          { "title": "Platform", "data": "platform" },
		 *          { "title": "Version",  "data": "version" },
		 *          { "title": "Grade",    "data": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 */
            aaData: null,
            /**
		 * If ordering is enabled, then DataTables will perform a first pass sort on
		 * initialisation. You can define which column(s) the sort is performed
		 * upon, and the sorting direction, with this variable. The `sorting` array
		 * should contain an array for each column to be sorted initially containing
		 * the column's index and a direction string ('asc' or 'desc').
		 *  @type array
		 *  @default [[0,'asc']]
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.order
		 *
		 *  @example
		 *    // Sort by 3rd column first, and then 4th column
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "order": [[2,'asc'], [3,'desc']]
		 *      } );
		 *    } );
		 *
		 *    // No initial sorting
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "order": []
		 *      } );
		 *    } );
		 */
            aaSorting: [ [ 0, "asc" ] ],
            /**
		 * This parameter is basically identical to the `sorting` parameter, but
		 * cannot be overridden by user interaction with the table. What this means
		 * is that you could have a column (visible or hidden) which the sorting
		 * will always be forced on first - any sorting after that (from the user)
		 * will then be performed as required. This can be useful for grouping rows
		 * together.
		 *  @type array
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.orderFixed
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "orderFixed": [[0,'asc']]
		 *      } );
		 *    } )
		 */
            aaSortingFixed: [],
            /**
		 * DataTables can be instructed to load data to display in the table from a
		 * Ajax source. This option defines how that Ajax call is made and where to.
		 *
		 * The `ajax` property has three different modes of operation, depending on
		 * how it is defined. These are:
		 *
		 * * `string` - Set the URL from where the data should be loaded from.
		 * * `object` - Define properties for `jQuery.ajax`.
		 * * `function` - Custom data get function
		 *
		 * `string`
		 * --------
		 *
		 * As a string, the `ajax` property simply defines the URL from which
		 * DataTables will load data.
		 *
		 * `object`
		 * --------
		 *
		 * As an object, the parameters in the object are passed to
		 * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
		 * of the Ajax request. DataTables has a number of default parameters which
		 * you can override using this option. Please refer to the jQuery
		 * documentation for a full description of the options available, although
		 * the following parameters provide additional options in DataTables or
		 * require special consideration:
		 *
		 * * `data` - As with jQuery, `data` can be provided as an object, but it
		 *   can also be used as a function to manipulate the data DataTables sends
		 *   to the server. The function takes a single parameter, an object of
		 *   parameters with the values that DataTables has readied for sending. An
		 *   object may be returned which will be merged into the DataTables
		 *   defaults, or you can add the items to the object that was passed in and
		 *   not return anything from the function. This supersedes `fnServerParams`
		 *   from DataTables 1.9-.
		 *
		 * * `dataSrc` - By default DataTables will look for the property `data` (or
		 *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
		 *   from an Ajax source or for server-side processing - this parameter
		 *   allows that property to be changed. You can use Javascript dotted
		 *   object notation to get a data source for multiple levels of nesting, or
		 *   it my be used as a function. As a function it takes a single parameter,
		 *   the JSON returned from the server, which can be manipulated as
		 *   required, with the returned value being that used by DataTables as the
		 *   data source for the table. This supersedes `sAjaxDataProp` from
		 *   DataTables 1.9-.
		 *
		 * * `success` - Should not be overridden it is used internally in
		 *   DataTables. To manipulate / transform the data returned by the server
		 *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
		 *
		 * `function`
		 * ----------
		 *
		 * As a function, making the Ajax call is left up to yourself allowing
		 * complete control of the Ajax request. Indeed, if desired, a method other
		 * than Ajax could be used to obtain the required data, such as Web storage
		 * or an AIR database.
		 *
		 * The function is given four parameters and no return is required. The
		 * parameters are:
		 *
		 * 1. _object_ - Data to send to the server
		 * 2. _function_ - Callback function that must be executed when the required
		 *    data has been obtained. That data should be passed into the callback
		 *    as the only parameter
		 * 3. _object_ - DataTables settings object for the table
		 *
		 * Note that this supersedes `fnServerData` from DataTables 1.9-.
		 *
		 *  @type string|object|function
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.ajax
		 *  @since 1.10.0
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax.
		 *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
		 *   $('#example').dataTable( {
		 *     "ajax": "data.json"
		 *   } );
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax, using `dataSrc` to change
		 *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": "tableData"
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
		 *   // from a plain array rather than an array in an object
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": ""
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Manipulate the data returned from the server - add a link to data
		 *   // (note this can, should, be done using `render` for the column - this
		 *   // is just a simple example of how the data can be manipulated).
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": function ( json ) {
		 *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
		 *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
		 *         }
		 *         return json;
		 *       }
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Add data to the request
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "data": function ( d ) {
		 *         return {
		 *           "extra_search": $('#extra').val()
		 *         };
		 *       }
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Send request as POST
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "type": "POST"
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Get the data from localStorage (could interface with a form for
		 *   // adding, editing and removing rows).
		 *   $('#example').dataTable( {
		 *     "ajax": function (data, callback, settings) {
		 *       callback(
		 *         JSON.parse( localStorage.getItem('dataTablesData') )
		 *       );
		 *     }
		 *   } );
		 */
            ajax: null,
            /**
		 * This parameter allows you to readily specify the entries in the length drop
		 * down menu that DataTables shows when pagination is enabled. It can be
		 * either a 1D array of options which will be used for both the displayed
		 * option and the value, or a 2D array which will use the array in the first
		 * position as the value, and the array in the second position as the
		 * displayed options (useful for language strings such as 'All').
		 *
		 * Note that the `pageLength` property will be automatically set to the
		 * first value given in this array, unless `pageLength` is also provided.
		 *  @type array
		 *  @default [ 10, 25, 50, 100 ]
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.lengthMenu
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
		 *      } );
		 *    } );
		 */
            aLengthMenu: [ 10, 25, 50, 100 ],
            /**
		 * The `columns` option in the initialisation parameter allows you to define
		 * details about the way individual columns behave. For a full list of
		 * column options that can be set, please see
		 * {@link DataTable.defaults.column}. Note that if you use `columns` to
		 * define your columns, you must have an entry in the array for every single
		 * column that you have in your table (these can be null if you don't which
		 * to specify any options).
		 *  @member
		 *
		 *  @name DataTable.defaults.column
		 */
            aoColumns: null,
            /**
		 * Very similar to `columns`, `columnDefs` allows you to target a specific
		 * column, multiple columns, or all columns, using the `targets` property of
		 * each object in the array. This allows great flexibility when creating
		 * tables, as the `columnDefs` arrays can be of any length, targeting the
		 * columns you specifically want. `columnDefs` may use any of the column
		 * options available: {@link DataTable.defaults.column}, but it _must_
		 * have `targets` defined in each object in the array. Values in the `targets`
		 * array may be:
		 *   <ul>
		 *     <li>a string - class name will be matched on the TH for the column</li>
		 *     <li>0 or a positive integer - column index counting from the left</li>
		 *     <li>a negative integer - column index counting from the right</li>
		 *     <li>the string "_all" - all columns (i.e. assign a default)</li>
		 *   </ul>
		 *  @member
		 *
		 *  @name DataTable.defaults.columnDefs
		 */
            aoColumnDefs: null,
            /**
		 * Basically the same as `search`, this parameter defines the individual column
		 * filtering state at initialisation time. The array must be of the same size
		 * as the number of columns, and each element be an object with the parameters
		 * `search` and `escapeRegex` (the latter is optional). 'null' is also
		 * accepted and the default will be used.
		 *  @type array
		 *  @default []
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.searchCols
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "searchCols": [
		 *          null,
		 *          { "search": "My filter" },
		 *          null,
		 *          { "search": "^[0-9]", "escapeRegex": false }
		 *        ]
		 *      } );
		 *    } )
		 */
            aoSearchCols: [],
            /**
		 * An array of CSS classes that should be applied to displayed rows. This
		 * array may be of any length, and DataTables will apply each class
		 * sequentially, looping when required.
		 *  @type array
		 *  @default null <i>Will take the values determined by the `oClasses.stripe*`
		 *    options</i>
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.stripeClasses
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
		 *      } );
		 *    } )
		 */
            asStripeClasses: null,
            /**
		 * Enable or disable automatic column width calculation. This can be disabled
		 * as an optimisation (it takes some time to calculate the widths) if the
		 * tables widths are passed in using `columns`.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.autoWidth
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "autoWidth": false
		 *      } );
		 *    } );
		 */
            bAutoWidth: !0,
            /**
		 * Deferred rendering can provide DataTables with a huge speed boost when you
		 * are using an Ajax or JS data source for the table. This option, when set to
		 * true, will cause DataTables to defer the creation of the table elements for
		 * each row until they are needed for a draw - saving a significant amount of
		 * time.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.deferRender
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajax": "sources/arrays.txt",
		 *        "deferRender": true
		 *      } );
		 *    } );
		 */
            bDeferRender: !1,
            /**
		 * Replace a DataTable which matches the given selector and replace it with
		 * one which has the properties of the new initialisation object passed. If no
		 * table matches the selector, then the new DataTable will be constructed as
		 * per normal.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.destroy
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "srollY": "200px",
		 *        "paginate": false
		 *      } );
		 *
		 *      // Some time later....
		 *      $('#example').dataTable( {
		 *        "filter": false,
		 *        "destroy": true
		 *      } );
		 *    } );
		 */
            bDestroy: !1,
            /**
		 * Enable or disable filtering of data. Filtering in DataTables is "smart" in
		 * that it allows the end user to input multiple words (space separated) and
		 * will match a row containing those words, even if not in the order that was
		 * specified (this allow matching across multiple columns). Note that if you
		 * wish to use filtering in DataTables this must remain 'true' - to remove the
		 * default filtering input box and retain filtering abilities, please use
		 * {@link DataTable.defaults.dom}.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.searching
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "searching": false
		 *      } );
		 *    } );
		 */
            bFilter: !0,
            /**
		 * Enable or disable the table information display. This shows information
		 * about the data that is currently visible on the page, including information
		 * about filtered data if that action is being performed.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.info
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "info": false
		 *      } );
		 *    } );
		 */
            bInfo: !0,
            /**
		 * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some
		 * slightly different and additional mark-up from what DataTables has
		 * traditionally used).
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.jQueryUI
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "jQueryUI": true
		 *      } );
		 *    } );
		 */
            bJQueryUI: !1,
            /**
		 * Allows the end user to select the size of a formatted page from a select
		 * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.lengthChange
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "lengthChange": false
		 *      } );
		 *    } );
		 */
            bLengthChange: !0,
            /**
		 * Enable or disable pagination.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.paging
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "paging": false
		 *      } );
		 *    } );
		 */
            bPaginate: !0,
            /**
		 * Enable or disable the display of a 'processing' indicator when the table is
		 * being processed (e.g. a sort). This is particularly useful for tables with
		 * large amounts of data where it can take a noticeable amount of time to sort
		 * the entries.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.processing
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "processing": true
		 *      } );
		 *    } );
		 */
            bProcessing: !1,
            /**
		 * Retrieve the DataTables object for the given selector. Note that if the
		 * table has already been initialised, this parameter will cause DataTables
		 * to simply return the object that has already been set up - it will not take
		 * account of any changes you might have made to the initialisation object
		 * passed to DataTables (setting this parameter to true is an acknowledgement
		 * that you understand this). `destroy` can be used to reinitialise a table if
		 * you need.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.retrieve
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      initTable();
		 *      tableActions();
		 *    } );
		 *
		 *    function initTable ()
		 *    {
		 *      return $('#example').dataTable( {
		 *        "scrollY": "200px",
		 *        "paginate": false,
		 *        "retrieve": true
		 *      } );
		 *    }
		 *
		 *    function tableActions ()
		 *    {
		 *      var table = initTable();
		 *      // perform API operations with oTable
		 *    }
		 */
            bRetrieve: !1,
            /**
		 * When vertical (y) scrolling is enabled, DataTables will force the height of
		 * the table's viewport to the given height at all times (useful for layout).
		 * However, this can look odd when filtering data down to a small data set,
		 * and the footer is left "floating" further down. This parameter (when
		 * enabled) will cause DataTables to collapse the table's viewport down when
		 * the result set will fit within the given Y height.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.scrollCollapse
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollY": "200",
		 *        "scrollCollapse": true
		 *      } );
		 *    } );
		 */
            bScrollCollapse: !1,
            /**
		 * Configure DataTables to use server-side processing. Note that the
		 * `ajax` parameter must also be given in order to give DataTables a
		 * source to obtain the required data for each draw.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverSide
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "xhr.php"
		 *      } );
		 *    } );
		 */
            bServerSide: !1,
            /**
		 * Enable or disable sorting of columns. Sorting of individual columns can be
		 * disabled by the `sortable` option for each column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.ordering
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "ordering": false
		 *      } );
		 *    } );
		 */
            bSort: !0,
            /**
		 * Enable or display DataTables' ability to sort multiple columns at the
		 * same time (activated by shift-click by the user).
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.orderMulti
		 *
		 *  @example
		 *    // Disable multiple column sorting ability
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "orderMulti": false
		 *      } );
		 *    } );
		 */
            bSortMulti: !0,
            /**
		 * Allows control over whether DataTables should use the top (true) unique
		 * cell that is found for a single column, or the bottom (false - default).
		 * This is useful when using complex headers.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.orderCellsTop
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "orderCellsTop": true
		 *      } );
		 *    } );
		 */
            bSortCellsTop: !1,
            /**
		 * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
		 * `sorting\_3` to the columns which are currently being sorted on. This is
		 * presented as a feature switch as it can increase processing time (while
		 * classes are removed and added) so for large data sets you might want to
		 * turn this off.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.orderClasses
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "orderClasses": false
		 *      } );
		 *    } );
		 */
            bSortClasses: !0,
            /**
		 * Enable or disable state saving. When enabled HTML5 `localStorage` will be
		 * used to save table display information such as pagination information,
		 * display length, filtering and sorting. As such when the end user reloads
		 * the page the display display will match what thy had previously set up.
		 *
		 * Due to the use of `localStorage` the default state saving is not supported
		 * in IE6 or 7. If state saving is required in those browsers, use
		 * `stateSaveCallback` to provide a storage solution such as cookies.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.stateSave
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "stateSave": true
		 *      } );
		 *    } );
		 */
            bStateSave: !1,
            /**
		 * This function is called when a TR element is created (and all TD child
		 * elements have been inserted), or registered if using a DOM source, allowing
		 * manipulation of the TR element (adding classes etc).
		 *  @type function
		 *  @param {node} row "TR" element for the current row
		 *  @param {array} data Raw data array for this row
		 *  @param {int} dataIndex The index of this row in the internal aoData array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.createdRow
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "createdRow": function( row, data, dataIndex ) {
		 *          // Bold the grade for all 'A' grade browsers
		 *          if ( data[4] == "A" )
		 *          {
		 *            $('td:eq(4)', row).html( '<b>A</b>' );
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
            fnCreatedRow: null,
            /**
		 * This function is called on every 'draw' event, and allows you to
		 * dynamically modify any aspect you want about the created DOM.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.drawCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "drawCallback": function( settings ) {
		 *          alert( 'DataTables has redrawn the table' );
		 *        }
		 *      } );
		 *    } );
		 */
            fnDrawCallback: null,
            /**
		 * Identical to fnHeaderCallback() but for the table footer this function
		 * allows you to modify the table footer on every 'draw' event.
		 *  @type function
		 *  @param {node} foot "TR" element for the footer
		 *  @param {array} data Full table data (as derived from the original HTML)
		 *  @param {int} start Index for the current display starting point in the
		 *    display array
		 *  @param {int} end Index for the current display ending point in the
		 *    display array
		 *  @param {array int} display Index array to translate the visual position
		 *    to the full data array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.footerCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "footerCallback": function( tfoot, data, start, end, display ) {
		 *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
		 *        }
		 *      } );
		 *    } )
		 */
            fnFooterCallback: null,
            /**
		 * When rendering large numbers in the information element for the table
		 * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
		 * to have a comma separator for the 'thousands' units (e.g. 1 million is
		 * rendered as "1,000,000") to help readability for the end user. This
		 * function will override the default method DataTables uses.
		 *  @type function
		 *  @member
		 *  @param {int} toFormat number to be formatted
		 *  @returns {string} formatted string for DataTables to show the number
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.formatNumber
		 *
		 *  @example
		 *    // Format a number using a single quote for the separator (note that
		 *    // this can also be done with the language.thousands option)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "formatNumber": function ( toFormat ) {
		 *          return toFormat.toString().replace(
		 *            /\B(?=(\d{3})+(?!\d))/g, "'"
		 *          );
		 *        };
		 *      } );
		 *    } );
		 */
            fnFormatNumber: function(toFormat) {
                return toFormat.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands);
            },
            /**
		 * This function is called on every 'draw' event, and allows you to
		 * dynamically modify the header row. This can be used to calculate and
		 * display useful information about the table.
		 *  @type function
		 *  @param {node} head "TR" element for the header
		 *  @param {array} data Full table data (as derived from the original HTML)
		 *  @param {int} start Index for the current display starting point in the
		 *    display array
		 *  @param {int} end Index for the current display ending point in the
		 *    display array
		 *  @param {array int} display Index array to translate the visual position
		 *    to the full data array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.headerCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "fheaderCallback": function( head, data, start, end, display ) {
		 *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
		 *        }
		 *      } );
		 *    } )
		 */
            fnHeaderCallback: null,
            /**
		 * The information element can be used to convey information about the current
		 * state of the table. Although the internationalisation options presented by
		 * DataTables are quite capable of dealing with most customisations, there may
		 * be times where you wish to customise the string further. This callback
		 * allows you to do exactly that.
		 *  @type function
		 *  @param {object} oSettings DataTables settings object
		 *  @param {int} start Starting position in data for the draw
		 *  @param {int} end End position in data for the draw
		 *  @param {int} max Total number of rows in the table (regardless of
		 *    filtering)
		 *  @param {int} total Total number of rows in the data set, after filtering
		 *  @param {string} pre The string that DataTables has formatted using it's
		 *    own rules
		 *  @returns {string} The string to be displayed in the information element.
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.infoCallback
		 *
		 *  @example
		 *    $('#example').dataTable( {
		 *      "infoCallback": function( settings, start, end, max, total, pre ) {
		 *        return start +" to "+ end;
		 *      }
		 *    } );
		 */
            fnInfoCallback: null,
            /**
		 * Called when the table has been initialised. Normally DataTables will
		 * initialise sequentially and there will be no need for this function,
		 * however, this does not hold true when using external language information
		 * since that is obtained using an async XHR call.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} json The JSON object request from the server - only
		 *    present if client-side Ajax sourced data is used
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.initComplete
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "initComplete": function(settings, json) {
		 *          alert( 'DataTables has finished its initialisation.' );
		 *        }
		 *      } );
		 *    } )
		 */
            fnInitComplete: null,
            /**
		 * Called at the very start of each table draw and can be used to cancel the
		 * draw by returning false, any other return (including undefined) results in
		 * the full draw occurring).
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @returns {boolean} False will cancel the draw, anything else (including no
		 *    return) will allow it to complete.
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.preDrawCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "preDrawCallback": function( settings ) {
		 *          if ( $('#test').val() == 1 ) {
		 *            return false;
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
            fnPreDrawCallback: null,
            /**
		 * This function allows you to 'post process' each row after it have been
		 * generated for each table draw, but before it is rendered on screen. This
		 * function might be used for setting the row class name etc.
		 *  @type function
		 *  @param {node} row "TR" element for the current row
		 *  @param {array} data Raw data array for this row
		 *  @param {int} displayIndex The display index for the current table draw
		 *  @param {int} displayIndexFull The index of the data in the full list of
		 *    rows (after filtering)
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.rowCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
		 *          // Bold the grade for all 'A' grade browsers
		 *          if ( data[4] == "A" ) {
		 *            $('td:eq(4)', row).html( '<b>A</b>' );
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
            fnRowCallback: null,
            /**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * This parameter allows you to override the default function which obtains
		 * the data from the server so something more suitable for your application.
		 * For example you could use POST data, or pull information from a Gears or
		 * AIR database.
		 *  @type function
		 *  @member
		 *  @param {string} source HTTP source to obtain the data from (`ajax`)
		 *  @param {array} data A key/value pair object containing the data to send
		 *    to the server
		 *  @param {function} callback to be called on completion of the data get
		 *    process that will draw the data on the page.
		 *  @param {object} settings DataTables settings object
		 *
		 *  @dtopt Callbacks
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverData
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
            fnServerData: null,
            /**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 *  It is often useful to send extra data to the server when making an Ajax
		 * request - for example custom filtering information, and this callback
		 * function makes it trivial to send extra information to the server. The
		 * passed in parameter is the data set that has been constructed by
		 * DataTables, and you can add to this or modify it as you require.
		 *  @type function
		 *  @param {array} data Data array (array of objects which are name/value
		 *    pairs) that has been constructed by DataTables and will be sent to the
		 *    server. In the case of Ajax sourced data with server-side processing
		 *    this will be an empty array, for server-side processing there will be a
		 *    significant number of parameters!
		 *  @returns {undefined} Ensure that you modify the data array passed in,
		 *    as this is passed by reference.
		 *
		 *  @dtopt Callbacks
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverParams
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
            fnServerParams: null,
            /**
		 * Load the table state. With this function you can define from where, and how, the
		 * state of a table is loaded. By default DataTables will load from `localStorage`
		 * but you might wish to use a server-side database or cookies.
		 *  @type function
		 *  @member
		 *  @param {object} settings DataTables settings object
		 *  @return {object} The DataTables state object to be loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoadCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadCallback": function (settings) {
		 *          var o;
		 *
		 *          // Send an Ajax request to the server to get the data. Note that
		 *          // this is a synchronous request.
		 *          $.ajax( {
		 *            "url": "/state_load",
		 *            "async": false,
		 *            "dataType": "json",
		 *            "success": function (json) {
		 *              o = json;
		 *            }
		 *          } );
		 *
		 *          return o;
		 *        }
		 *      } );
		 *    } );
		 */
            fnStateLoadCallback: function(settings) {
                try {
                    return JSON.parse((-1 === settings.iStateDuration ? sessionStorage : localStorage).getItem("DataTables_" + settings.sInstance + "_" + location.pathname));
                } catch (e) {}
            },
            /**
		 * Callback which allows modification of the saved state prior to loading that state.
		 * This callback is called when the table is loading state from the stored data, but
		 * prior to the settings object being modified by the saved state. Note that for
		 * plug-in authors, you should use the `stateLoadParams` event to load parameters for
		 * a plug-in.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object that is to be loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoadParams
		 *
		 *  @example
		 *    // Remove a saved filter, so filtering is never loaded
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadParams": function (settings, data) {
		 *          data.oSearch.sSearch = "";
		 *        }
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Disallow state loading by returning false
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadParams": function (settings, data) {
		 *          return false;
		 *        }
		 *      } );
		 *    } );
		 */
            fnStateLoadParams: null,
            /**
		 * Callback that is called when the state has been loaded from the state saving method
		 * and the DataTables settings object has been modified as a result of the loaded state.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object that was loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoaded
		 *
		 *  @example
		 *    // Show an alert with the filtering value that was saved
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoaded": function (settings, data) {
		 *          alert( 'Saved filter was: '+data.oSearch.sSearch );
		 *        }
		 *      } );
		 *    } );
		 */
            fnStateLoaded: null,
            /**
		 * Save the table state. This function allows you to define where and how the state
		 * information for the table is stored By default DataTables will use `localStorage`
		 * but you might wish to use a server-side database or cookies.
		 *  @type function
		 *  @member
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object to be saved
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateSaveCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateSaveCallback": function (settings, data) {
		 *          // Send an Ajax request to the server with the state object
		 *          $.ajax( {
		 *            "url": "/state_save",
		 *            "data": data,
		 *            "dataType": "json",
		 *            "method": "POST"
		 *            "success": function () {}
		 *          } );
		 *        }
		 *      } );
		 *    } );
		 */
            fnStateSaveCallback: function(settings, data) {
                try {
                    (-1 === settings.iStateDuration ? sessionStorage : localStorage).setItem("DataTables_" + settings.sInstance + "_" + location.pathname, JSON.stringify(data));
                } catch (e) {}
            },
            /**
		 * Callback which allows modification of the state to be saved. Called when the table
		 * has changed state a new state save is required. This method allows modification of
		 * the state saving object prior to actually doing the save, including addition or
		 * other state properties or modification. Note that for plug-in authors, you should
		 * use the `stateSaveParams` event to save parameters for a plug-in.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object to be saved
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateSaveParams
		 *
		 *  @example
		 *    // Remove a saved filter, so filtering is never saved
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateSaveParams": function (settings, data) {
		 *          data.oSearch.sSearch = "";
		 *        }
		 *      } );
		 *    } );
		 */
            fnStateSaveParams: null,
            /**
		 * Duration for which the saved state information is considered valid. After this period
		 * has elapsed the state will be returned to the default.
		 * Value is given in seconds.
		 *  @type int
		 *  @default 7200 <i>(2 hours)</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.stateDuration
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateDuration": 60*60*24; // 1 day
		 *      } );
		 *    } )
		 */
            iStateDuration: 7200,
            /**
		 * When enabled DataTables will not make a request to the server for the first
		 * page draw - rather it will use the data already on the page (no sorting etc
		 * will be applied to it), thus saving on an XHR at load time. `deferLoading`
		 * is used to indicate that deferred loading is required, but it is also used
		 * to tell DataTables how many records there are in the full table (allowing
		 * the information element and pagination to be displayed correctly). In the case
		 * where a filtering is applied to the table on initial load, this can be
		 * indicated by giving the parameter as an array, where the first element is
		 * the number of records available after filtering and the second element is the
		 * number of records without filtering (allowing the table information element
		 * to be shown correctly).
		 *  @type int | array
		 *  @default null
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.deferLoading
		 *
		 *  @example
		 *    // 57 records available in the table, no filtering applied
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "scripts/server_processing.php",
		 *        "deferLoading": 57
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // 57 records after filtering, 100 without filtering (an initial filter applied)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "scripts/server_processing.php",
		 *        "deferLoading": [ 57, 100 ],
		 *        "search": {
		 *          "search": "my_filter"
		 *        }
		 *      } );
		 *    } );
		 */
            iDeferLoading: null,
            /**
		 * Number of rows to display on a single page when using pagination. If
		 * feature enabled (`lengthChange`) then the end user will be able to override
		 * this to a custom setting using a pop-up menu.
		 *  @type int
		 *  @default 10
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.pageLength
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "pageLength": 50
		 *      } );
		 *    } )
		 */
            iDisplayLength: 10,
            /**
		 * Define the starting point for data display when using DataTables with
		 * pagination. Note that this parameter is the number of records, rather than
		 * the page number, so if you have 10 records per page and want to start on
		 * the third page, it should be "20".
		 *  @type int
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.displayStart
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "displayStart": 20
		 *      } );
		 *    } )
		 */
            iDisplayStart: 0,
            /**
		 * By default DataTables allows keyboard navigation of the table (sorting, paging,
		 * and filtering) by adding a `tabindex` attribute to the required elements. This
		 * allows you to tab through the controls and press the enter key to activate them.
		 * The tabindex is default 0, meaning that the tab follows the flow of the document.
		 * You can overrule this using this parameter if you wish. Use a value of -1 to
		 * disable built-in keyboard navigation.
		 *  @type int
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.tabIndex
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "tabIndex": 1
		 *      } );
		 *    } );
		 */
            iTabIndex: 0,
            /**
		 * Classes that DataTables assigns to the various components and features
		 * that it adds to the HTML table. This allows classes to be configured
		 * during initialisation in addition to through the static
		 * {@link DataTable.ext.oStdClasses} object).
		 *  @namespace
		 *  @name DataTable.defaults.classes
		 */
            oClasses: {},
            /**
		 * All strings that DataTables uses in the user interface that it creates
		 * are defined in this object, allowing you to modified them individually or
		 * completely replace them all as required.
		 *  @namespace
		 *  @name DataTable.defaults.language
		 */
            oLanguage: {
                /**
			 * Strings that are used for WAI-ARIA labels and controls only (these are not
			 * actually visible on the page, but will be read by screenreaders, and thus
			 * must be internationalised as well).
			 *  @namespace
			 *  @name DataTable.defaults.language.aria
			 */
                oAria: {
                    /**
				 * ARIA label that is added to the table headers when the column may be
				 * sorted ascending by activing the column (click or return when focused).
				 * Note that the column header is prefixed to this string.
				 *  @type string
				 *  @default : activate to sort column ascending
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.aria.sortAscending
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "aria": {
				 *            "sortAscending": " - click/return to sort ascending"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
                    sSortAscending: ": activate to sort column ascending",
                    /**
				 * ARIA label that is added to the table headers when the column may be
				 * sorted descending by activing the column (click or return when focused).
				 * Note that the column header is prefixed to this string.
				 *  @type string
				 *  @default : activate to sort column ascending
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.aria.sortDescending
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "aria": {
				 *            "sortDescending": " - click/return to sort descending"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
                    sSortDescending: ": activate to sort column descending"
                },
                /**
			 * Pagination string used by DataTables for the built-in pagination
			 * control types.
			 *  @namespace
			 *  @name DataTable.defaults.language.paginate
			 */
                oPaginate: {
                    /**
				 * Text to use when using the 'full_numbers' type of pagination for the
				 * button to take the user to the first page.
				 *  @type string
				 *  @default First
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.first
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "first": "First page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
                    sFirst: "First",
                    /**
				 * Text to use when using the 'full_numbers' type of pagination for the
				 * button to take the user to the last page.
				 *  @type string
				 *  @default Last
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.last
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "last": "Last page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
                    sLast: "Last",
                    /**
				 * Text to use for the 'next' pagination button (to take the user to the
				 * next page).
				 *  @type string
				 *  @default Next
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.next
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "next": "Next page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
                    sNext: "Next",
                    /**
				 * Text to use for the 'previous' pagination button (to take the user to
				 * the previous page).
				 *  @type string
				 *  @default Previous
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.previous
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "previous": "Previous page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
                    sPrevious: "Previous"
                },
                /**
			 * This string is shown in preference to `zeroRecords` when the table is
			 * empty of data (regardless of filtering). Note that this is an optional
			 * parameter - if it is not given, the value of `zeroRecords` will be used
			 * instead (either the default or given value).
			 *  @type string
			 *  @default No data available in table
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.emptyTable
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "emptyTable": "No data available in table"
			 *        }
			 *      } );
			 *    } );
			 */
                sEmptyTable: "No data available in table",
                /**
			 * This string gives information to the end user about the information
			 * that is current on display on the page. The following tokens can be
			 * used in the string and will be dynamically replaced as the table
			 * display updates. This tokens can be placed anywhere in the string, or
			 * removed as needed by the language requires:
			 *
			 * * `\_START\_` - Display index of the first record on the current page
			 * * `\_END\_` - Display index of the last record on the current page
			 * * `\_TOTAL\_` - Number of records in the table after filtering
			 * * `\_MAX\_` - Number of records in the table without filtering
			 * * `\_PAGE\_` - Current page number
			 * * `\_PAGES\_` - Total number of pages of data in the table
			 *
			 *  @type string
			 *  @default Showing _START_ to _END_ of _TOTAL_ entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.info
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "info": "Showing page _PAGE_ of _PAGES_"
			 *        }
			 *      } );
			 *    } );
			 */
                sInfo: "<strong>_START_</strong> - <strong>_END_</strong> of <strong>_TOTAL_</strong>",
                /**
			 * Display information string for when the table is empty. Typically the
			 * format of this string should match `info`.
			 *  @type string
			 *  @default Showing 0 to 0 of 0 entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoEmpty
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoEmpty": "No entries to show"
			 *        }
			 *      } );
			 *    } );
			 */
                sInfoEmpty: "0 - 0 of 0",
                /**
			 * When a user filters the information in a table, this string is appended
			 * to the information (`info`) to give an idea of how strong the filtering
			 * is. The variable _MAX_ is dynamically updated.
			 *  @type string
			 *  @default (filtered from _MAX_ total entries)
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoFiltered
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoFiltered": " - filtering from _MAX_ records"
			 *        }
			 *      } );
			 *    } );
			 */
                sInfoFiltered: "(filtered from _MAX_ total entries)",
                /**
			 * If can be useful to append extra information to the info string at times,
			 * and this variable does exactly that. This information will be appended to
			 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
			 * being used) at all times.
			 *  @type string
			 *  @default <i>Empty string</i>
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoPostFix
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoPostFix": "All records shown are derived from real information."
			 *        }
			 *      } );
			 *    } );
			 */
                sInfoPostFix: "",
                /**
			 * This decimal place operator is a little different from the other
			 * language options since DataTables doesn't output floating point
			 * numbers, so it won't ever use this for display of a number. Rather,
			 * what this parameter does is modify the sort methods of the table so
			 * that numbers which are in a format which has a character other than
			 * a period (`.`) as a decimal place will be sorted numerically.
			 *
			 * Note that numbers with different decimal places cannot be shown in
			 * the same table and still be sortable, the table must be consistent.
			 * However, multiple different tables on the page can use different
			 * decimal place characters.
			 *  @type string
			 *  @default 
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.decimal
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "decimal": ","
			 *          "thousands": "."
			 *        }
			 *      } );
			 *    } );
			 */
                sDecimal: "",
                /**
			 * DataTables has a build in number formatter (`formatNumber`) which is
			 * used to format large numbers that are used in the table information.
			 * By default a comma is used, but this can be trivially changed to any
			 * character you wish with this parameter.
			 *  @type string
			 *  @default ,
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.thousands
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "thousands": "'"
			 *        }
			 *      } );
			 *    } );
			 */
                sThousands: ",",
                /**
			 * Detail the action that will be taken when the drop down menu for the
			 * pagination length option is changed. The '_MENU_' variable is replaced
			 * with a default select list of 10, 25, 50 and 100, and can be replaced
			 * with a custom select box if required.
			 *  @type string
			 *  @default Show _MENU_ entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.lengthMenu
			 *
			 *  @example
			 *    // Language change only
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "lengthMenu": "Display _MENU_ records"
			 *        }
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Language and options change
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "lengthMenu": 'Display <select>'+
			 *            '<option value="10">10</option>'+
			 *            '<option value="20">20</option>'+
			 *            '<option value="30">30</option>'+
			 *            '<option value="40">40</option>'+
			 *            '<option value="50">50</option>'+
			 *            '<option value="-1">All</option>'+
			 *            '</select> records'
			 *        }
			 *      } );
			 *    } );
			 */
                sLengthMenu: "_MENU_",
                /**
			 * When using Ajax sourced data and during the first draw when DataTables is
			 * gathering the data, this message is shown in an empty row in the table to
			 * indicate to the end user the the data is being loaded. Note that this
			 * parameter is not used when loading data by server-side processing, just
			 * Ajax sourced data with client-side processing.
			 *  @type string
			 *  @default Loading...
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.loadingRecords
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "loadingRecords": "Please wait - loading..."
			 *        }
			 *      } );
			 *    } );
			 */
                sLoadingRecords: "Loading...",
                /**
			 * Text which is displayed when the table is processing a user action
			 * (usually a sort command or similar).
			 *  @type string
			 *  @default Processing...
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.processing
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "processing": "DataTables is currently busy"
			 *        }
			 *      } );
			 *    } );
			 */
                sProcessing: "Processing...",
                /**
			 * Details the actions that will be taken when the user types into the
			 * filtering input text box. The variable "_INPUT_", if used in the string,
			 * is replaced with the HTML text box for the filtering input allowing
			 * control over where it appears in the string. If "_INPUT_" is not given
			 * then the input box is appended to the string automatically.
			 *  @type string
			 *  @default Search:
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.search
			 *
			 *  @example
			 *    // Input text box will be appended at the end automatically
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "search": "Filter records:"
			 *        }
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Specify where the filter should appear
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "search": "Apply filter _INPUT_ to table"
			 *        }
			 *      } );
			 *    } );
			 */
                sSearch: "",
                /**
			 * Assign a `placeholder` attribute to the search `input` element
			 *  @type string
			 *  @default 
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.searchPlaceholder
			 */
                sSearchPlaceholder: "Search",
                /**
			 * All of the language information can be stored in a file on the
			 * server-side, which DataTables will look up if this parameter is passed.
			 * It must store the URL of the language file, which is in a JSON format,
			 * and the object has the same properties as the oLanguage object in the
			 * initialiser object (i.e. the above parameters). Please refer to one of
			 * the example language files to see how this works in action.
			 *  @type string
			 *  @default <i>Empty string - i.e. disabled</i>
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.url
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
			 *        }
			 *      } );
			 *    } );
			 */
                sUrl: "",
                /**
			 * Text shown inside the table records when the is no information to be
			 * displayed after filtering. `emptyTable` is shown when there is simply no
			 * information in the table at all (regardless of filtering).
			 *  @type string
			 *  @default No matching records found
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.zeroRecords
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "zeroRecords": "No records to display"
			 *        }
			 *      } );
			 *    } );
			 */
                sZeroRecords: "No shipments found"
            },
            /**
		 * This parameter allows you to have define the global filtering state at
		 * initialisation time. As an object the `search` parameter must be
		 * defined, but all other parameters are optional. When `regex` is true,
		 * the search string will be treated as a regular expression, when false
		 * (default) it will be treated as a straight string. When `smart`
		 * DataTables will use it's smart filtering methods (to word match at
		 * any point in the data), when false this will not be done.
		 *  @namespace
		 *  @extends DataTable.models.oSearch
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.search
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "search": {"search": "Initial search"}
		 *      } );
		 *    } )
		 */
            oSearch: $.extend({}, DataTable.models.oSearch),
            /**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * By default DataTables will look for the property `data` (or `aaData` for
		 * compatibility with DataTables 1.9-) when obtaining data from an Ajax
		 * source or for server-side processing - this parameter allows that
		 * property to be changed. You can use Javascript dotted object notation to
		 * get a data source for multiple levels of nesting.
		 *  @type string
		 *  @default data
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.ajaxDataProp
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
            sAjaxDataProp: "data",
            /**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * You can instruct DataTables to load data from an external
		 * source using this parameter (use aData if you want to pass data in you
		 * already have). Simply provide a url a JSON object can be obtained from.
		 *  @type string
		 *  @default null
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.ajaxSource
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
            sAjaxSource: null,
            /**
		 * This initialisation variable allows you to specify exactly where in the
		 * DOM you want DataTables to inject the various controls it adds to the page
		 * (for example you might want the pagination controls at the top of the
		 * table). DIV elements (with or without a custom class) can also be added to
		 * aid styling. The follow syntax is used:
		 *   <ul>
		 *     <li>The following options are allowed:
		 *       <ul>
		 *         <li>'l' - Length changing</li>
		 *         <li>'f' - Filtering input</li>
		 *         <li>'t' - The table!</li>
		 *         <li>'i' - Information</li>
		 *         <li>'p' - Pagination</li>
		 *         <li>'r' - pRocessing</li>
		 *       </ul>
		 *     </li>
		 *     <li>The following constants are allowed:
		 *       <ul>
		 *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
		 *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
		 *       </ul>
		 *     </li>
		 *     <li>The following syntax is expected:
		 *       <ul>
		 *         <li>'&lt;' and '&gt;' - div elements</li>
		 *         <li>'&lt;"class" and '&gt;' - div with a class</li>
		 *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
		 *       </ul>
		 *     </li>
		 *     <li>Examples:
		 *       <ul>
		 *         <li>'&lt;"wrapper"flipt&gt;'</li>
		 *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
		 *       </ul>
		 *     </li>
		 *   </ul>
		 *  @type string
		 *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
		 *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.dom
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
		 *      } );
		 *    } );
		 */
            sDom: "lfrtip",
            /**
		 * Search delay option. This will throttle full table searches that use the
		 * DataTables provided search input element (it does not effect calls to
		 * `dt-api search()`, providing a delay before the search is made.
		 *  @type integer
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.searchDelay
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "searchDelay": 200
		 *      } );
		 *    } )
		 */
            searchDelay: null,
            /**
		 * DataTables features four different built-in options for the buttons to
		 * display for pagination control:
		 *
		 * * `simple` - 'Previous' and 'Next' buttons only
		 * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
		 * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
		 * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus
		 *   page numbers
		 *  
		 * Further methods can be added using {@link DataTable.ext.oPagination}.
		 *  @type string
		 *  @default simple_numbers
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.pagingType
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "pagingType": "full_numbers"
		 *      } );
		 *    } )
		 */
            sPaginationType: "simple_numbers",
            /**
		 * Enable horizontal scrolling. When a table is too wide to fit into a
		 * certain layout, or you have a large number of columns in the table, you
		 * can enable x-scrolling to show the table in a viewport, which can be
		 * scrolled. This property can be `true` which will allow the table to
		 * scroll horizontally when needed, or any CSS unit, or a number (in which
		 * case it will be treated as a pixel measurement). Setting as simply `true`
		 * is recommended.
		 *  @type boolean|string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.scrollX
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollX": true,
		 *        "scrollCollapse": true
		 *      } );
		 *    } );
		 */
            sScrollX: "",
            /**
		 * This property can be used to force a DataTable to use more width than it
		 * might otherwise do when x-scrolling is enabled. For example if you have a
		 * table which requires to be well spaced, this parameter is useful for
		 * "over-sizing" the table, and thus forcing scrolling. This property can by
		 * any CSS unit, or a number (in which case it will be treated as a pixel
		 * measurement).
		 *  @type string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.scrollXInner
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollX": "100%",
		 *        "scrollXInner": "110%"
		 *      } );
		 *    } );
		 */
            sScrollXInner: "",
            /**
		 * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
		 * to the given height, and enable scrolling for any data which overflows the
		 * current viewport. This can be used as an alternative to paging to display
		 * a lot of data in a small area (although paging and scrolling can both be
		 * enabled at the same time). This property can be any CSS unit, or a number
		 * (in which case it will be treated as a pixel measurement).
		 *  @type string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.scrollY
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollY": "200px",
		 *        "paginate": false
		 *      } );
		 *    } );
		 */
            sScrollY: "",
            /**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * Set the HTTP method that is used to make the Ajax call for server-side
		 * processing or Ajax sourced data.
		 *  @type string
		 *  @default GET
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverMethod
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
            sServerMethod: "GET",
            /**
		 * DataTables makes use of renderers when displaying HTML elements for
		 * a table. These renderers can be added or modified by plug-ins to
		 * generate suitable mark-up for a site. For example the Bootstrap
		 * integration plug-in for DataTables uses a paging button renderer to
		 * display pagination buttons in the mark-up required by Bootstrap.
		 *
		 * For further information about the renderers available see
		 * DataTable.ext.renderer
		 *  @type string|object
		 *  @default null
		 *
		 *  @name DataTable.defaults.renderer
		 *
		 */
            renderer: null,
            /**
		 * Set the data property name that DataTables should use to get a row's id
		 * to set as the `id` property in the node.
		 *  @type string
		 *  @default DT_RowId
		 *
		 *  @name DataTable.defaults.rowId
		 */
            rowId: "DT_RowId"
        }, _fnHungarianMap(DataTable.defaults), /*
	 * Developer note - See note in model.defaults.js about the use of Hungarian
	 * notation and camel case.
	 */
        /**
	 * Column options that can be given to DataTables at initialisation time.
	 *  @namespace
	 */
        DataTable.defaults.column = {
            /**
		 * Define which column(s) an order will occur on for this column. This
		 * allows a column's ordering to take multiple columns into account when
		 * doing a sort or use the data from a different column. For example first
		 * name / last name columns make sense to do a multi-column sort over the
		 * two columns.
		 *  @type array|int
		 *  @default null <i>Takes the value of the column index automatically</i>
		 *
		 *  @name DataTable.defaults.column.orderData
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
		 *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
		 *          { "orderData": 2, "targets": [ 2 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "orderData": [ 0, 1 ] },
		 *          { "orderData": [ 1, 0 ] },
		 *          { "orderData": 2 },
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
            aDataSort: null,
            iDataSort: -1,
            /**
		 * You can control the default ordering direction, and even alter the
		 * behaviour of the sort handler (i.e. only allow ascending ordering etc)
		 * using this parameter.
		 *  @type array
		 *  @default [ 'asc', 'desc' ]
		 *
		 *  @name DataTable.defaults.column.orderSequence
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
		 *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
		 *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          { "orderSequence": [ "asc" ] },
		 *          { "orderSequence": [ "desc", "asc", "asc" ] },
		 *          { "orderSequence": [ "desc" ] },
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
            asSorting: [ "asc", "desc" ],
            /**
		 * Enable or disable filtering on the data in this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.searchable
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "searchable": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "searchable": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
            bSearchable: !0,
            /**
		 * Enable or disable ordering on this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.orderable
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderable": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "orderable": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
            bSortable: !0,
            /**
		 * Enable or disable the display of this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.visible
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "visible": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "visible": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
            bVisible: !0,
            /**
		 * Developer definable function that is called whenever a cell is created (Ajax source,
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
		 * allowing you to modify the DOM element (add background colour for example) when the
		 * element is available.
		 *  @type function
		 *  @param {element} td The TD node that has been created
		 *  @param {*} cellData The Data for the cell
		 *  @param {array|object} rowData The data for the whole row
		 *  @param {int} row The row index for the aoData data store
		 *  @param {int} col The column index for aoColumns
		 *
		 *  @name DataTable.defaults.column.createdCell
		 *  @dtopt Columns
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [3],
		 *          "createdCell": function (td, cellData, rowData, row, col) {
		 *            if ( cellData == "1.7" ) {
		 *              $(td).css('color', 'blue')
		 *            }
		 *          }
		 *        } ]
		 *      });
		 *    } );
		 */
            fnCreatedCell: null,
            /**
		 * This parameter has been replaced by `data` in DataTables to ensure naming
		 * consistency. `dataProp` can still be used, as there is backwards
		 * compatibility in DataTables for this option, but it is strongly
		 * recommended that you use `data` in preference to `dataProp`.
		 *  @name DataTable.defaults.column.dataProp
		 */
            /**
		 * This property can be used to read data from any data source property,
		 * including deeply nested objects / properties. `data` can be given in a
		 * number of different ways which effect its behaviour:
		 *
		 * * `integer` - treated as an array index for the data source. This is the
		 *   default that DataTables uses (incrementally increased for each column).
		 * * `string` - read an object property from the data source. There are
		 *   three 'special' options that can be used in the string to alter how
		 *   DataTables reads the data from the source object:
		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
		 *      Javascript to read from nested objects, so to can the options
		 *      specified in `data`. For example: `browser.version` or
		 *      `browser.name`. If your object parameter name contains a period, use
		 *      `\\` to escape it - i.e. `first\\.name`.
		 *    * `[]` - Array notation. DataTables can automatically combine data
		 *      from and array source, joining the data with the characters provided
		 *      between the two brackets. For example: `name[, ]` would provide a
		 *      comma-space separated list from the source array. If no characters
		 *      are provided between the brackets, the original array source is
		 *      returned.
		 *    * `()` - Function notation. Adding `()` to the end of a parameter will
		 *      execute a function of the name given. For example: `browser()` for a
		 *      simple function on the data source, `browser.version()` for a
		 *      function in a nested property or even `browser().version` to get an
		 *      object property if the function called returns an object. Note that
		 *      function notation is recommended for use in `render` rather than
		 *      `data` as it is much simpler to use as a renderer.
		 * * `null` - use the original data source for the row rather than plucking
		 *   data directly from it. This action has effects on two other
		 *   initialisation options:
		 *    * `defaultContent` - When null is given as the `data` option and
		 *      `defaultContent` is specified for the column, the value defined by
		 *      `defaultContent` will be used for the cell.
		 *    * `render` - When null is used for the `data` option and the `render`
		 *      option is specified for the column, the whole data source for the
		 *      row is used for the renderer.
		 * * `function` - the function given will be executed whenever DataTables
		 *   needs to set or get the data for a cell in the column. The function
		 *   takes three parameters:
		 *    * Parameters:
		 *      * `{array|object}` The data source for the row
		 *      * `{string}` The type call data requested - this will be 'set' when
		 *        setting data or 'filter', 'display', 'type', 'sort' or undefined
		 *        when gathering data. Note that when `undefined` is given for the
		 *        type DataTables expects to get the raw data for the object back<
		 *      * `{*}` Data to set when the second parameter is 'set'.
		 *    * Return:
		 *      * The return value from the function is not required when 'set' is
		 *        the type of call, but otherwise the return is what will be used
		 *        for the data requested.
		 *
		 * Note that `data` is a getter and setter option. If you just require
		 * formatting of data for output, you will likely want to use `render` which
		 * is simply a getter and thus simpler to use.
		 *
		 * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
		 * name change reflects the flexibility of this property and is consistent
		 * with the naming of mRender. If 'mDataProp' is given, then it will still
		 * be used by DataTables, as it automatically maps the old name to the new
		 * if required.
		 *
		 *  @type string|int|function|null
		 *  @default null <i>Use automatically calculated column index</i>
		 *
		 *  @name DataTable.defaults.column.data
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Read table data from objects
		 *    // JSON structure for each row:
		 *    //   {
		 *    //      "engine": {value},
		 *    //      "browser": {value},
		 *    //      "platform": {value},
		 *    //      "version": {value},
		 *    //      "grade": {value}
		 *    //   }
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/objects.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          { "data": "platform" },
		 *          { "data": "version" },
		 *          { "data": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Read information from deeply nested objects
		 *    // JSON structure for each row:
		 *    //   {
		 *    //      "engine": {value},
		 *    //      "browser": {value},
		 *    //      "platform": {
		 *    //         "inner": {value}
		 *    //      },
		 *    //      "details": [
		 *    //         {value}, {value}
		 *    //      ]
		 *    //   }
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/deep.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          { "data": "platform.inner" },
		 *          { "data": "platform.details.0" },
		 *          { "data": "platform.details.1" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `data` as a function to provide different information for
		 *    // sorting, filtering and display. In this case, currency (price)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": function ( source, type, val ) {
		 *            if (type === 'set') {
		 *              source.price = val;
		 *              // Store the computed dislay and filter values for efficiency
		 *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
		 *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
		 *              return;
		 *            }
		 *            else if (type === 'display') {
		 *              return source.price_display;
		 *            }
		 *            else if (type === 'filter') {
		 *              return source.price_filter;
		 *            }
		 *            // 'sort', 'type' and undefined all just use the integer
		 *            return source.price;
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using default content
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null,
		 *          "defaultContent": "Click to edit"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using array notation - outputting a list from an array
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": "name[, ]"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 */
            mData: null,
            /**
		 * This property is the rendering partner to `data` and it is suggested that
		 * when you want to manipulate data for display (including filtering,
		 * sorting etc) without altering the underlying data for the table, use this
		 * property. `render` can be considered to be the the read only companion to
		 * `data` which is read / write (then as such more complex). Like `data`
		 * this option can be given in a number of different ways to effect its
		 * behaviour:
		 *
		 * * `integer` - treated as an array index for the data source. This is the
		 *   default that DataTables uses (incrementally increased for each column).
		 * * `string` - read an object property from the data source. There are
		 *   three 'special' options that can be used in the string to alter how
		 *   DataTables reads the data from the source object:
		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
		 *      Javascript to read from nested objects, so to can the options
		 *      specified in `data`. For example: `browser.version` or
		 *      `browser.name`. If your object parameter name contains a period, use
		 *      `\\` to escape it - i.e. `first\\.name`.
		 *    * `[]` - Array notation. DataTables can automatically combine data
		 *      from and array source, joining the data with the characters provided
		 *      between the two brackets. For example: `name[, ]` would provide a
		 *      comma-space separated list from the source array. If no characters
		 *      are provided between the brackets, the original array source is
		 *      returned.
		 *    * `()` - Function notation. Adding `()` to the end of a parameter will
		 *      execute a function of the name given. For example: `browser()` for a
		 *      simple function on the data source, `browser.version()` for a
		 *      function in a nested property or even `browser().version` to get an
		 *      object property if the function called returns an object.
		 * * `object` - use different data for the different data types requested by
		 *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
		 *   of the object is the data type the property refers to and the value can
		 *   defined using an integer, string or function using the same rules as
		 *   `render` normally does. Note that an `_` option _must_ be specified.
		 *   This is the default value to use if you haven't specified a value for
		 *   the data type requested by DataTables.
		 * * `function` - the function given will be executed whenever DataTables
		 *   needs to set or get the data for a cell in the column. The function
		 *   takes three parameters:
		 *    * Parameters:
		 *      * {array|object} The data source for the row (based on `data`)
		 *      * {string} The type call data requested - this will be 'filter',
		 *        'display', 'type' or 'sort'.
		 *      * {array|object} The full data source for the row (not based on
		 *        `data`)
		 *    * Return:
		 *      * The return value from the function is what will be used for the
		 *        data requested.
		 *
		 *  @type string|int|function|object|null
		 *  @default null Use the data source value.
		 *
		 *  @name DataTable.defaults.column.render
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Create a comma separated list from an array of objects
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/deep.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          {
		 *            "data": "platform",
		 *            "render": "[, ].name"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Execute a function to obtain data
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null, // Use the full data source object for the renderer's source
		 *          "render": "browserName()"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // As an object, extracting different data for the different types
		 *    // This would be used with a data source such as:
		 *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
		 *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
		 *    // (which has both forms) is used for filtering for if a user inputs either format, while
		 *    // the formatted phone number is the one that is shown in the table.
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null, // Use the full data source object for the renderer's source
		 *          "render": {
		 *            "_": "phone",
		 *            "filter": "phone_filter",
		 *            "display": "phone_display"
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Use as a function to create a link from the data source
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": "download_link",
		 *          "render": function ( data, type, full ) {
		 *            return '<a href="'+data+'">Download</a>';
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 */
            mRender: null,
            /**
		 * Change the cell type created for the column - either TD cells or TH cells. This
		 * can be useful as TH cells have semantic meaning in the table body, allowing them
		 * to act as a header for a row (you may wish to add scope='row' to the TH elements).
		 *  @type string
		 *  @default td
		 *
		 *  @name DataTable.defaults.column.cellType
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Make the first column use TH cells
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "cellType": "th"
		 *        } ]
		 *      } );
		 *    } );
		 */
            sCellType: "td",
            /**
		 * Class to give to each cell in this column.
		 *  @type string
		 *  @default <i>Empty string</i>
		 *
		 *  @name DataTable.defaults.column.class
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "class": "my_class", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "class": "my_class" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
            sClass: "",
            /**
		 * When DataTables calculates the column widths to assign to each column,
		 * it finds the longest string in each column and then constructs a
		 * temporary table and reads the widths from that. The problem with this
		 * is that "mmm" is much wider then "iiii", but the latter is a longer
		 * string - thus the calculation can go wrong (doing it properly and putting
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as
		 * a "work around" we provide this option. It will append its value to the
		 * text that is found to be the longest string for the column - i.e. padding.
		 * Generally you shouldn't need this!
		 *  @type string
		 *  @default <i>Empty string<i>
		 *
		 *  @name DataTable.defaults.column.contentPadding
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          null,
		 *          {
		 *            "contentPadding": "mmm"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 */
            sContentPadding: "",
            /**
		 * Allows a default value to be given for a column's data, and will be used
		 * whenever a null data source is encountered (this can be because `data`
		 * is set to null, or because the data source itself is null).
		 *  @type string
		 *  @default null
		 *
		 *  @name DataTable.defaults.column.defaultContent
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          {
		 *            "data": null,
		 *            "defaultContent": "Edit",
		 *            "targets": [ -1 ]
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          null,
		 *          {
		 *            "data": null,
		 *            "defaultContent": "Edit"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 */
            sDefaultContent: null,
            /**
		 * This parameter is only used in DataTables' server-side processing. It can
		 * be exceptionally useful to know what columns are being displayed on the
		 * client side, and to map these to database fields. When defined, the names
		 * also allow DataTables to reorder information from the server if it comes
		 * back in an unexpected order (i.e. if you switch your columns around on the
		 * client-side, your server-side code does not also need updating).
		 *  @type string
		 *  @default <i>Empty string</i>
		 *
		 *  @name DataTable.defaults.column.name
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "name": "engine", "targets": [ 0 ] },
		 *          { "name": "browser", "targets": [ 1 ] },
		 *          { "name": "platform", "targets": [ 2 ] },
		 *          { "name": "version", "targets": [ 3 ] },
		 *          { "name": "grade", "targets": [ 4 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "name": "engine" },
		 *          { "name": "browser" },
		 *          { "name": "platform" },
		 *          { "name": "version" },
		 *          { "name": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 */
            sName: "",
            /**
		 * Defines a data source type for the ordering which can be used to read
		 * real-time information from the table (updating the internally cached
		 * version) prior to ordering. This allows ordering to occur on user
		 * editable elements such as form inputs.
		 *  @type string
		 *  @default std
		 *
		 *  @name DataTable.defaults.column.orderDataType
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
		 *          { "type": "numeric", "targets": [ 3 ] },
		 *          { "orderDataType": "dom-select", "targets": [ 4 ] },
		 *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          { "orderDataType": "dom-text" },
		 *          { "orderDataType": "dom-text", "type": "numeric" },
		 *          { "orderDataType": "dom-select" },
		 *          { "orderDataType": "dom-checkbox" }
		 *        ]
		 *      } );
		 *    } );
		 */
            sSortDataType: "std",
            /**
		 * The title of this column.
		 *  @type string
		 *  @default null <i>Derived from the 'TH' value for this column in the
		 *    original HTML table.</i>
		 *
		 *  @name DataTable.defaults.column.title
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "title": "My column title", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "title": "My column title" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
            sTitle: null,
            /**
		 * The type allows you to specify how the data for this column will be
		 * ordered. Four types (string, numeric, date and html (which will strip
		 * HTML tags before ordering)) are currently available. Note that only date
		 * formats understood by Javascript's Date() object will be accepted as type
		 * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
		 * 'numeric', 'date' or 'html' (by default). Further types can be adding
		 * through plug-ins.
		 *  @type string
		 *  @default null <i>Auto-detected from raw data</i>
		 *
		 *  @name DataTable.defaults.column.type
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "type": "html", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "type": "html" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
            sType: null,
            /**
		 * Defining the width of the column, this parameter may take any CSS value
		 * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
		 * been given a specific width through this interface ensuring that the table
		 * remains readable.
		 *  @type string
		 *  @default null <i>Automatic</i>
		 *
		 *  @name DataTable.defaults.column.width
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "width": "20%", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "width": "20%" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
            sWidth: null
        }, _fnHungarianMap(DataTable.defaults.column), /**
	 * DataTables settings object - this holds all the information needed for a
	 * given table, including configuration, data and current application of the
	 * table options. DataTables does not have a single instance for each DataTable
	 * with the settings attached to that instance, but rather instances of the
	 * DataTable "class" are created on-the-fly as needed (typically by a
	 * $().dataTable() call) and the settings object is then applied to that
	 * instance.
	 *
	 * Note that this object is related to {@link DataTable.defaults} but this
	 * one is the internal data store for DataTables's cache of columns. It should
	 * NOT be manipulated outside of DataTables. Any configuration should be done
	 * through the initialisation options.
	 *  @namespace
	 *  @todo Really should attach the settings object to individual instances so we
	 *    don't need to create new instances on each $().dataTable() call (if the
	 *    table already exists). It would also save passing oSettings around and
	 *    into every single function. However, this is a very significant
	 *    architecture change for DataTables and will almost certainly break
	 *    backwards compatibility with older installations. This is something that
	 *    will be done in 2.0.
	 */
        DataTable.models.oSettings = {
            /**
		 * Primary features of DataTables and their enablement state.
		 *  @namespace
		 */
            oFeatures: {
                /**
			 * Flag to say if DataTables should automatically try to calculate the
			 * optimum table and columns widths (true) or not (false).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
                bAutoWidth: null,
                /**
			 * Delay the creation of TR and TD elements until they are actually
			 * needed by a driven page draw. This can give a significant speed
			 * increase for Ajax source and Javascript source data, but makes no
			 * difference at all fro DOM and server-side processing tables.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
                bDeferRender: null,
                /**
			 * Enable filtering on the table or not. Note that if this is disabled
			 * then there is no filtering at all on the table, including fnFilter.
			 * To just remove the filtering input use sDom and remove the 'f' option.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
                bFilter: null,
                /**
			 * Table information element (the 'Showing x of y records' div) enable
			 * flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
                bInfo: null,
                /**
			 * Present a user control allowing the end user to change the page size
			 * when pagination is enabled.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
                bLengthChange: null,
                /**
			 * Pagination enabled or not. Note that if this is disabled then length
			 * changing must also be disabled.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
                bPaginate: null,
                /**
			 * Processing indicator enable flag whenever DataTables is enacting a
			 * user request - typically an Ajax request for server-side processing.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
                bProcessing: null,
                /**
			 * Server-side processing enabled flag - when enabled DataTables will
			 * get all data from the server for every draw - there is no filtering,
			 * sorting or paging done on the client-side.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
                bServerSide: null,
                /**
			 * Sorting enablement flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
                bSort: null,
                /**
			 * Multi-column sorting
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
                bSortMulti: null,
                /**
			 * Apply a class to the columns which are being sorted to provide a
			 * visual highlight or not. This can slow things down when enabled since
			 * there is a lot of DOM interaction.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
                bSortClasses: null,
                /**
			 * State saving enablement flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
                bStateSave: null
            },
            /**
		 * Scrolling settings for a table.
		 *  @namespace
		 */
            oScroll: {
                /**
			 * When the table is shorter in height than sScrollY, collapse the
			 * table container down to the height of the table (when true).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
                bCollapse: null,
                /**
			 * Width of the scrollbar for the web-browser's platform. Calculated
			 * during table initialisation.
			 *  @type int
			 *  @default 0
			 */
                iBarWidth: 0,
                /**
			 * Viewport width for horizontal scrolling. Horizontal scrolling is
			 * disabled if an empty string.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
                sX: null,
                /**
			 * Width to expand the table to when using x-scrolling. Typically you
			 * should not need to use this.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 *  @deprecated
			 */
                sXInner: null,
                /**
			 * Viewport height for vertical scrolling. Vertical scrolling is disabled
			 * if an empty string.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
                sY: null
            },
            /**
		 * Language information for the table.
		 *  @namespace
		 *  @extends DataTable.defaults.oLanguage
		 */
            oLanguage: {
                /**
			 * Information callback function. See
			 * {@link DataTable.defaults.fnInfoCallback}
			 *  @type function
			 *  @default null
			 */
                fnInfoCallback: null
            },
            /**
		 * Browser support parameters
		 *  @namespace
		 */
            oBrowser: {
                /**
			 * Indicate if the browser incorrectly calculates width:100% inside a
			 * scrolling element (IE6/7)
			 *  @type boolean
			 *  @default false
			 */
                bScrollOversize: !1,
                /**
			 * Determine if the vertical scrollbar is on the right or left of the
			 * scrolling container - needed for rtl language layout, although not
			 * all browsers move the scrollbar (Safari).
			 *  @type boolean
			 *  @default false
			 */
                bScrollbarLeft: !1,
                /**
			 * Flag for if `getBoundingClientRect` is fully supported or not
			 *  @type boolean
			 *  @default false
			 */
                bBounding: !1,
                /**
			 * Browser scrollbar width
			 *  @type integer
			 *  @default 0
			 */
                barWidth: 0
            },
            ajax: null,
            /**
		 * Array referencing the nodes which are used for the features. The
		 * parameters of this object match what is allowed by sDom - i.e.
		 *   <ul>
		 *     <li>'l' - Length changing</li>
		 *     <li>'f' - Filtering input</li>
		 *     <li>'t' - The table!</li>
		 *     <li>'i' - Information</li>
		 *     <li>'p' - Pagination</li>
		 *     <li>'r' - pRocessing</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
            aanFeatures: [],
            /**
		 * Store data information - see {@link DataTable.models.oRow} for detailed
		 * information.
		 *  @type array
		 *  @default []
		 */
            aoData: [],
            /**
		 * Array of indexes which are in the current display (after filtering etc)
		 *  @type array
		 *  @default []
		 */
            aiDisplay: [],
            /**
		 * Array of indexes for display - no filtering
		 *  @type array
		 *  @default []
		 */
            aiDisplayMaster: [],
            /**
		 * Map of row ids to data indexes
		 *  @type object
		 *  @default {}
		 */
            aIds: {},
            /**
		 * Store information about each column that is in use
		 *  @type array
		 *  @default []
		 */
            aoColumns: [],
            /**
		 * Store information about the table's header
		 *  @type array
		 *  @default []
		 */
            aoHeader: [],
            /**
		 * Store information about the table's footer
		 *  @type array
		 *  @default []
		 */
            aoFooter: [],
            /**
		 * Store the applied global search information in case we want to force a
		 * research or compare the old search to a new one.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @namespace
		 *  @extends DataTable.models.oSearch
		 */
            oPreviousSearch: {},
            /**
		 * Store the applied search for each column - see
		 * {@link DataTable.models.oSearch} for the format that is used for the
		 * filtering information for each column.
		 *  @type array
		 *  @default []
		 */
            aoPreSearchCols: [],
            /**
		 * Sorting that is applied to the table. Note that the inner arrays are
		 * used in the following manner:
		 * <ul>
		 *   <li>Index 0 - column number</li>
		 *   <li>Index 1 - current sorting direction</li>
		 * </ul>
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @todo These inner arrays should really be objects
		 */
            aaSorting: null,
            /**
		 * Sorting that is always applied to the table (i.e. prefixed in front of
		 * aaSorting).
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
            aaSortingFixed: [],
            /**
		 * Classes to use for the striping of a table.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
            asStripeClasses: null,
            /**
		 * If restoring a table - we should restore its striping classes as well
		 *  @type array
		 *  @default []
		 */
            asDestroyStripes: [],
            /**
		 * If restoring a table - we should restore its width
		 *  @type int
		 *  @default 0
		 */
            sDestroyWidth: 0,
            /**
		 * Callback functions array for every time a row is inserted (i.e. on a draw).
		 *  @type array
		 *  @default []
		 */
            aoRowCallback: [],
            /**
		 * Callback functions for the header on each draw.
		 *  @type array
		 *  @default []
		 */
            aoHeaderCallback: [],
            /**
		 * Callback function for the footer on each draw.
		 *  @type array
		 *  @default []
		 */
            aoFooterCallback: [],
            /**
		 * Array of callback functions for draw callback functions
		 *  @type array
		 *  @default []
		 */
            aoDrawCallback: [],
            /**
		 * Array of callback functions for row created function
		 *  @type array
		 *  @default []
		 */
            aoRowCreatedCallback: [],
            /**
		 * Callback functions for just before the table is redrawn. A return of
		 * false will be used to cancel the draw.
		 *  @type array
		 *  @default []
		 */
            aoPreDrawCallback: [],
            /**
		 * Callback functions for when the table has been initialised.
		 *  @type array
		 *  @default []
		 */
            aoInitComplete: [],
            /**
		 * Callbacks for modifying the settings to be stored for state saving, prior to
		 * saving state.
		 *  @type array
		 *  @default []
		 */
            aoStateSaveParams: [],
            /**
		 * Callbacks for modifying the settings that have been stored for state saving
		 * prior to using the stored values to restore the state.
		 *  @type array
		 *  @default []
		 */
            aoStateLoadParams: [],
            /**
		 * Callbacks for operating on the settings object once the saved state has been
		 * loaded
		 *  @type array
		 *  @default []
		 */
            aoStateLoaded: [],
            /**
		 * Cache the table ID for quick access
		 *  @type string
		 *  @default <i>Empty string</i>
		 */
            sTableId: "",
            /**
		 * The TABLE node for the main table
		 *  @type node
		 *  @default null
		 */
            nTable: null,
            /**
		 * Permanent ref to the thead element
		 *  @type node
		 *  @default null
		 */
            nTHead: null,
            /**
		 * Permanent ref to the tfoot element - if it exists
		 *  @type node
		 *  @default null
		 */
            nTFoot: null,
            /**
		 * Permanent ref to the tbody element
		 *  @type node
		 *  @default null
		 */
            nTBody: null,
            /**
		 * Cache the wrapper node (contains all DataTables controlled elements)
		 *  @type node
		 *  @default null
		 */
            nTableWrapper: null,
            /**
		 * Indicate if when using server-side processing the loading of data
		 * should be deferred until the second draw.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 *  @default false
		 */
            bDeferLoading: !1,
            /**
		 * Indicate if all required information has been read in
		 *  @type boolean
		 *  @default false
		 */
            bInitialised: !1,
            /**
		 * Information about open rows. Each object in the array has the parameters
		 * 'nTr' and 'nParent'
		 *  @type array
		 *  @default []
		 */
            aoOpenRows: [],
            /**
		 * Dictate the positioning of DataTables' control elements - see
		 * {@link DataTable.model.oInit.sDom}.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default null
		 */
            sDom: null,
            /**
		 * Search delay (in mS)
		 *  @type integer
		 *  @default null
		 */
            searchDelay: null,
            /**
		 * Which type of pagination should be used.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default two_button
		 */
            sPaginationType: "two_button",
            /**
		 * The state duration (for `stateSave`) in seconds.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type int
		 *  @default 0
		 */
            iStateDuration: 0,
            /**
		 * Array of callback functions for state saving. Each array element is an
		 * object with the following parameters:
		 *   <ul>
		 *     <li>function:fn - function to call. Takes two parameters, oSettings
		 *       and the JSON string to save that has been thus far created. Returns
		 *       a JSON string to be inserted into a json object
		 *       (i.e. '"param": [ 0, 1, 2]')</li>
		 *     <li>string:sName - name of callback</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
            aoStateSave: [],
            /**
		 * Array of callback functions for state loading. Each array element is an
		 * object with the following parameters:
		 *   <ul>
		 *     <li>function:fn - function to call. Takes two parameters, oSettings
		 *       and the object stored. May return false to cancel state loading</li>
		 *     <li>string:sName - name of callback</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
            aoStateLoad: [],
            /**
		 * State that was saved. Useful for back reference
		 *  @type object
		 *  @default null
		 */
            oSavedState: null,
            /**
		 * State that was loaded. Useful for back reference
		 *  @type object
		 *  @default null
		 */
            oLoadedState: null,
            /**
		 * Source url for AJAX data for the table.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default null
		 */
            sAjaxSource: null,
            /**
		 * Property from a given object from which to read the table data from. This
		 * can be an empty string (when not server-side processing), in which case
		 * it is  assumed an an array is given directly.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 */
            sAjaxDataProp: null,
            /**
		 * Note if draw should be blocked while getting data
		 *  @type boolean
		 *  @default true
		 */
            bAjaxDataGet: !0,
            /**
		 * The last jQuery XHR object that was used for server-side data gathering.
		 * This can be used for working with the XHR information in one of the
		 * callbacks
		 *  @type object
		 *  @default null
		 */
            jqXHR: null,
            /**
		 * JSON returned from the server in the last Ajax request
		 *  @type object
		 *  @default undefined
		 */
            json: undefined,
            /**
		 * Data submitted as part of the last Ajax request
		 *  @type object
		 *  @default undefined
		 */
            oAjaxData: undefined,
            /**
		 * Function to get the server-side data.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type function
		 */
            fnServerData: null,
            /**
		 * Functions which are called prior to sending an Ajax request so extra
		 * parameters can easily be sent to the server
		 *  @type array
		 *  @default []
		 */
            aoServerParams: [],
            /**
		 * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
		 * required).
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 */
            sServerMethod: null,
            /**
		 * Format numbers for display.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type function
		 */
            fnFormatNumber: null,
            /**
		 * List of options that can be used for the user selectable length menu.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
            aLengthMenu: null,
            /**
		 * Counter for the draws that the table does. Also used as a tracker for
		 * server-side processing
		 *  @type int
		 *  @default 0
		 */
            iDraw: 0,
            /**
		 * Indicate if a redraw is being done - useful for Ajax
		 *  @type boolean
		 *  @default false
		 */
            bDrawing: !1,
            /**
		 * Draw index (iDraw) of the last error when parsing the returned data
		 *  @type int
		 *  @default -1
		 */
            iDrawError: -1,
            /**
		 * Paging display length
		 *  @type int
		 *  @default 10
		 */
            _iDisplayLength: 10,
            /**
		 * Paging start point - aiDisplay index
		 *  @type int
		 *  @default 0
		 */
            _iDisplayStart: 0,
            /**
		 * Server-side processing - number of records in the result set
		 * (i.e. before filtering), Use fnRecordsTotal rather than
		 * this property to get the value of the number of records, regardless of
		 * the server-side processing setting.
		 *  @type int
		 *  @default 0
		 *  @private
		 */
            _iRecordsTotal: 0,
            /**
		 * Server-side processing - number of records in the current display set
		 * (i.e. after filtering). Use fnRecordsDisplay rather than
		 * this property to get the value of the number of records, regardless of
		 * the server-side processing setting.
		 *  @type boolean
		 *  @default 0
		 *  @private
		 */
            _iRecordsDisplay: 0,
            /**
		 * Flag to indicate if jQuery UI marking and classes should be used.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
            bJUI: null,
            /**
		 * The classes to use for the table
		 *  @type object
		 *  @default {}
		 */
            oClasses: {},
            /**
		 * Flag attached to the settings object so you can check in the draw
		 * callback if filtering has been done in the draw. Deprecated in favour of
		 * events.
		 *  @type boolean
		 *  @default false
		 *  @deprecated
		 */
            bFiltered: !1,
            /**
		 * Flag attached to the settings object so you can check in the draw
		 * callback if sorting has been done in the draw. Deprecated in favour of
		 * events.
		 *  @type boolean
		 *  @default false
		 *  @deprecated
		 */
            bSorted: !1,
            /**
		 * Indicate that if multiple rows are in the header and there is more than
		 * one unique cell per column, if the top one (true) or bottom one (false)
		 * should be used for sorting / title by DataTables.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
            bSortCellsTop: null,
            /**
		 * Initialisation object that is used for the table
		 *  @type object
		 *  @default null
		 */
            oInit: null,
            /**
		 * Destroy callback functions - for plug-ins to attach themselves to the
		 * destroy so they can clean up markup and events.
		 *  @type array
		 *  @default []
		 */
            aoDestroyCallback: [],
            /**
		 * Get the number of records in the current record set, before filtering
		 *  @type function
		 */
            fnRecordsTotal: function() {
                return "ssp" == _fnDataSource(this) ? 1 * this._iRecordsTotal : this.aiDisplayMaster.length;
            },
            /**
		 * Get the number of records in the current record set, after filtering
		 *  @type function
		 */
            fnRecordsDisplay: function() {
                return "ssp" == _fnDataSource(this) ? 1 * this._iRecordsDisplay : this.aiDisplay.length;
            },
            /**
		 * Get the display end point - aiDisplay index
		 *  @type function
		 */
            fnDisplayEnd: function() {
                var len = this._iDisplayLength, start = this._iDisplayStart, calc = start + len, records = this.aiDisplay.length, features = this.oFeatures, paginate = features.bPaginate;
                return features.bServerSide ? paginate === !1 || -1 === len ? start + records : Math.min(start + len, this._iRecordsDisplay) : !paginate || calc > records || -1 === len ? records : calc;
            },
            /**
		 * The DataTables object for this table
		 *  @type object
		 *  @default null
		 */
            oInstance: null,
            /**
		 * Unique identifier for each instance of the DataTables object. If there
		 * is an ID on the table node, then it takes that value, otherwise an
		 * incrementing internal counter is used.
		 *  @type string
		 *  @default null
		 */
            sInstance: null,
            /**
		 * tabindex attribute value that is added to DataTables control elements, allowing
		 * keyboard navigation of the table and its controls.
		 */
            iTabIndex: 0,
            /**
		 * DIV container for the footer scrolling table if scrolling
		 */
            nScrollHead: null,
            /**
		 * DIV container for the footer scrolling table if scrolling
		 */
            nScrollFoot: null,
            /**
		 * Last applied sort
		 *  @type array
		 *  @default []
		 */
            aLastSort: [],
            /**
		 * Stored plug-in instances
		 *  @type object
		 *  @default {}
		 */
            oPlugins: {},
            /**
		 * Function used to get a row's id from the row's data
		 *  @type function
		 *  @default null
		 */
            rowIdFn: null,
            /**
		 * Data location where to store a row's id
		 *  @type string
		 *  @default null
		 */
            rowId: null
        }, /**
	 * Extension object for DataTables that is used to provide all extension
	 * options.
	 *
	 * Note that the `DataTable.ext` object is available through
	 * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
	 * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
	 *  @namespace
	 *  @extends DataTable.models.ext
	 */
        /**
	 * DataTables extensions
	 * 
	 * This namespace acts as a collection area for plug-ins that can be used to
	 * extend DataTables capabilities. Indeed many of the build in methods
	 * use this method to provide their own capabilities (sorting methods for
	 * example).
	 *
	 * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
	 * reasons
	 *
	 *  @namespace
	 */
        DataTable.ext = _ext = {
            /**
		 * Buttons. For use with the Buttons extension for DataTables. This is
		 * defined here so other extensions can define buttons regardless of load
		 * order. It is _not_ used by DataTables core.
		 *
		 *  @type object
		 *  @default {}
		 */
            buttons: {},
            /**
		 * Element class names
		 *
		 *  @type object
		 *  @default {}
		 */
            classes: {},
            /**
		 * Error reporting.
		 * 
		 * How should DataTables report an error. Can take the value 'alert',
		 * 'throw', 'none' or a function.
		 *
		 *  @type string|function
		 *  @default alert
		 */
            errMode: "alert",
            /**
		 * Feature plug-ins.
		 * 
		 * This is an array of objects which describe the feature plug-ins that are
		 * available to DataTables. These feature plug-ins are then available for
		 * use through the `dom` initialisation option.
		 * 
		 * Each feature plug-in is described by an object which must have the
		 * following properties:
		 * 
		 * * `fnInit` - function that is used to initialise the plug-in,
		 * * `cFeature` - a character so the feature can be enabled by the `dom`
		 *   instillation option. This is case sensitive.
		 *
		 * The `fnInit` function has the following input parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 *
		 * And the following return is expected:
		 * 
		 * * {node|null} The element which contains your feature. Note that the
		 *   return may also be void if your plug-in does not require to inject any
		 *   DOM elements into DataTables control (`dom`) - for example this might
		 *   be useful when developing a plug-in which allows table control via
		 *   keyboard entry
		 *
		 *  @type array
		 *
		 *  @example
		 *    $.fn.dataTable.ext.features.push( {
		 *      "fnInit": function( oSettings ) {
		 *        return new TableTools( { "oDTSettings": oSettings } );
		 *      },
		 *      "cFeature": "T"
		 *    } );
		 */
            feature: [],
            /**
		 * Row searching.
		 * 
		 * This method of searching is complimentary to the default type based
		 * searching, and a lot more comprehensive as it allows you complete control
		 * over the searching logic. Each element in this array is a function
		 * (parameters described below) that is called for every row in the table,
		 * and your logic decides if it should be included in the searching data set
		 * or not.
		 *
		 * Searching functions have the following input parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 * 2. `{array|object}` Data for the row to be processed (same as the
		 *    original format that was passed in as the data source, or an array
		 *    from a DOM data source
		 * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
		 *    can be useful to retrieve the `TR` element if you need DOM interaction.
		 *
		 * And the following return is expected:
		 *
		 * * {boolean} Include the row in the searched result set (true) or not
		 *   (false)
		 *
		 * Note that as with the main search ability in DataTables, technically this
		 * is "filtering", since it is subtractive. However, for consistency in
		 * naming we call it searching here.
		 *
		 *  @type array
		 *  @default []
		 *
		 *  @example
		 *    // The following example shows custom search being applied to the
		 *    // fourth column (i.e. the data[3] index) based on two input values
		 *    // from the end-user, matching the data in a certain range.
		 *    $.fn.dataTable.ext.search.push(
		 *      function( settings, data, dataIndex ) {
		 *        var min = document.getElementById('min').value * 1;
		 *        var max = document.getElementById('max').value * 1;
		 *        var version = data[3] == "-" ? 0 : data[3]*1;
		 *
		 *        if ( min == "" && max == "" ) {
		 *          return true;
		 *        }
		 *        else if ( min == "" && version < max ) {
		 *          return true;
		 *        }
		 *        else if ( min < version && "" == max ) {
		 *          return true;
		 *        }
		 *        else if ( min < version && version < max ) {
		 *          return true;
		 *        }
		 *        return false;
		 *      }
		 *    );
		 */
            search: [],
            /**
		 * Selector extensions
		 *
		 * The `selector` option can be used to extend the options available for the
		 * selector modifier options (`selector-modifier` object data type) that
		 * each of the three built in selector types offer (row, column and cell +
		 * their plural counterparts). For example the Select extension uses this
		 * mechanism to provide an option to select only rows, columns and cells
		 * that have been marked as selected by the end user (`{selected: true}`),
		 * which can be used in conjunction with the existing built in selector
		 * options.
		 *
		 * Each property is an array to which functions can be pushed. The functions
		 * take three attributes:
		 *
		 * * Settings object for the host table
		 * * Options object (`selector-modifier` object type)
		 * * Array of selected item indexes
		 *
		 * The return is an array of the resulting item indexes after the custom
		 * selector has been applied.
		 *
		 *  @type object
		 */
            selector: {
                cell: [],
                column: [],
                row: []
            },
            /**
		 * Internal functions, exposed for used in plug-ins.
		 * 
		 * Please note that you should not need to use the internal methods for
		 * anything other than a plug-in (and even then, try to avoid if possible).
		 * The internal function may change between releases.
		 *
		 *  @type object
		 *  @default {}
		 */
            internal: {},
            /**
		 * Legacy configuration options. Enable and disable legacy options that
		 * are available in DataTables.
		 *
		 *  @type object
		 */
            legacy: {
                /**
			 * Enable / disable DataTables 1.9 compatible server-side processing
			 * requests
			 *
			 *  @type boolean
			 *  @default null
			 */
                ajax: null
            },
            /**
		 * Pagination plug-in methods.
		 * 
		 * Each entry in this object is a function and defines which buttons should
		 * be shown by the pagination rendering method that is used for the table:
		 * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
		 * buttons are displayed in the document, while the functions here tell it
		 * what buttons to display. This is done by returning an array of button
		 * descriptions (what each button will do).
		 *
		 * Pagination types (the four built in options and any additional plug-in
		 * options defined here) can be used through the `paginationType`
		 * initialisation parameter.
		 *
		 * The functions defined take two parameters:
		 *
		 * 1. `{int} page` The current page index
		 * 2. `{int} pages` The number of pages in the table
		 *
		 * Each function is expected to return an array where each element of the
		 * array can be one of:
		 *
		 * * `first` - Jump to first page when activated
		 * * `last` - Jump to last page when activated
		 * * `previous` - Show previous page when activated
		 * * `next` - Show next page when activated
		 * * `{int}` - Show page of the index given
		 * * `{array}` - A nested array containing the above elements to add a
		 *   containing 'DIV' element (might be useful for styling).
		 *
		 * Note that DataTables v1.9- used this object slightly differently whereby
		 * an object with two functions would be defined for each plug-in. That
		 * ability is still supported by DataTables 1.10+ to provide backwards
		 * compatibility, but this option of use is now decremented and no longer
		 * documented in DataTables 1.10+.
		 *
		 *  @type object
		 *  @default {}
		 *
		 *  @example
		 *    // Show previous, next and current page buttons only
		 *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
		 *      return [ 'previous', page, 'next' ];
		 *    };
		 */
            pager: {},
            renderer: {
                pageButton: {},
                header: {}
            },
            /**
		 * Ordering plug-ins - custom data source
		 * 
		 * The extension options for ordering of data available here is complimentary
		 * to the default type based ordering that DataTables typically uses. It
		 * allows much greater control over the the data that is being used to
		 * order a column, but is necessarily therefore more complex.
		 * 
		 * This type of ordering is useful if you want to do ordering based on data
		 * live from the DOM (for example the contents of an 'input' element) rather
		 * than just the static string that DataTables knows of.
		 * 
		 * The way these plug-ins work is that you create an array of the values you
		 * wish to be ordering for the column in question and then return that
		 * array. The data in the array much be in the index order of the rows in
		 * the table (not the currently ordering order!). Which order data gathering
		 * function is run here depends on the `dt-init columns.orderDataType`
		 * parameter that is used for the column (if any).
		 *
		 * The functions defined take two parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 * 2. `{int}` Target column index
		 *
		 * Each function is expected to return an array:
		 *
		 * * `{array}` Data for the column to be ordering upon
		 *
		 *  @type array
		 *
		 *  @example
		 *    // Ordering using `input` node values
		 *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
		 *    {
		 *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
		 *        return $('input', td).val();
		 *      } );
		 *    }
		 */
            order: {},
            /**
		 * Type based plug-ins.
		 *
		 * Each column in DataTables has a type assigned to it, either by automatic
		 * detection or by direct assignment using the `type` option for the column.
		 * The type of a column will effect how it is ordering and search (plug-ins
		 * can also make use of the column type if required).
		 *
		 * @namespace
		 */
            type: {
                /**
			 * Type detection functions.
			 *
			 * The functions defined in this object are used to automatically detect
			 * a column's type, making initialisation of DataTables super easy, even
			 * when complex data is in the table.
			 *
			 * The functions defined take two parameters:
			 *
		     *  1. `{*}` Data from the column cell to be analysed
		     *  2. `{settings}` DataTables settings object. This can be used to
		     *     perform context specific type detection - for example detection
		     *     based on language settings such as using a comma for a decimal
		     *     place. Generally speaking the options from the settings will not
		     *     be required
			 *
			 * Each function is expected to return:
			 *
			 * * `{string|null}` Data type detected, or null if unknown (and thus
			 *   pass it on to the other type detection functions.
			 *
			 *  @type array
			 *
			 *  @example
			 *    // Currency type detection plug-in:
			 *    $.fn.dataTable.ext.type.detect.push(
			 *      function ( data, settings ) {
			 *        // Check the numeric part
			 *        if ( ! $.isNumeric( data.substring(1) ) ) {
			 *          return null;
			 *        }
			 *
			 *        // Check prefixed by currency
			 *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
			 *          return 'currency';
			 *        }
			 *        return null;
			 *      }
			 *    );
			 */
                detect: [],
                /**
			 * Type based search formatting.
			 *
			 * The type based searching functions can be used to pre-format the
			 * data to be search on. For example, it can be used to strip HTML
			 * tags or to de-format telephone numbers for numeric only searching.
			 *
			 * Note that is a search is not defined for a column of a given type,
			 * no search formatting will be performed.
			 * 
			 * Pre-processing of searching data plug-ins - When you assign the sType
			 * for a column (or have it automatically detected for you by DataTables
			 * or a type detection plug-in), you will typically be using this for
			 * custom sorting, but it can also be used to provide custom searching
			 * by allowing you to pre-processing the data and returning the data in
			 * the format that should be searched upon. This is done by adding
			 * functions this object with a parameter name which matches the sType
			 * for that target column. This is the corollary of <i>afnSortData</i>
			 * for searching data.
			 *
			 * The functions defined take a single parameter:
			 *
		     *  1. `{*}` Data from the column cell to be prepared for searching
			 *
			 * Each function is expected to return:
			 *
			 * * `{string|null}` Formatted string that will be used for the searching.
			 *
			 *  @type object
			 *  @default {}
			 *
			 *  @example
			 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
			 *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
			 *    }
			 */
                search: {},
                /**
			 * Type based ordering.
			 *
			 * The column type tells DataTables what ordering to apply to the table
			 * when a column is sorted upon. The order for each type that is defined,
			 * is defined by the functions available in this object.
			 *
			 * Each ordering option can be described by three properties added to
			 * this object:
			 *
			 * * `{type}-pre` - Pre-formatting function
			 * * `{type}-asc` - Ascending order function
			 * * `{type}-desc` - Descending order function
			 *
			 * All three can be used together, only `{type}-pre` or only
			 * `{type}-asc` and `{type}-desc` together. It is generally recommended
			 * that only `{type}-pre` is used, as this provides the optimal
			 * implementation in terms of speed, although the others are provided
			 * for compatibility with existing Javascript sort functions.
			 *
			 * `{type}-pre`: Functions defined take a single parameter:
			 *
		     *  1. `{*}` Data from the column cell to be prepared for ordering
			 *
			 * And return:
			 *
			 * * `{*}` Data to be sorted upon
			 *
			 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
			 * functions, taking two parameters:
			 *
		     *  1. `{*}` Data to compare to the second parameter
		     *  2. `{*}` Data to compare to the first parameter
			 *
			 * And returning:
			 *
			 * * `{*}` Ordering match: <0 if first parameter should be sorted lower
			 *   than the second parameter, ===0 if the two parameters are equal and
			 *   >0 if the first parameter should be sorted height than the second
			 *   parameter.
			 * 
			 *  @type object
			 *  @default {}
			 *
			 *  @example
			 *    // Numeric ordering of formatted numbers with a pre-formatter
			 *    $.extend( $.fn.dataTable.ext.type.order, {
			 *      "string-pre": function(x) {
			 *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
			 *        return parseFloat( a );
			 *      }
			 *    } );
			 *
			 *  @example
			 *    // Case-sensitive string ordering, with no pre-formatting method
			 *    $.extend( $.fn.dataTable.ext.order, {
			 *      "string-case-asc": function(x,y) {
			 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
			 *      },
			 *      "string-case-desc": function(x,y) {
			 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
			 *      }
			 *    } );
			 */
                order: {}
            },
            /**
		 * Unique DataTables instance counter
		 *
		 * @type int
		 * @private
		 */
            _unique: 0,
            //
            // Depreciated
            // The following properties are retained for backwards compatiblity only.
            // The should not be used in new projects and will be removed in a future
            // version
            //
            /**
		 * Version check function.
		 *  @type function
		 *  @depreciated Since 1.10
		 */
            fnVersionCheck: DataTable.fnVersionCheck,
            /**
		 * Index for what 'this' index API functions should use
		 *  @type int
		 *  @deprecated Since v1.10
		 */
            iApiIndex: 0,
            /**
		 * jQuery UI class container
		 *  @type object
		 *  @deprecated Since v1.10
		 */
            oJUIClasses: {},
            /**
		 * Software version
		 *  @type string
		 *  @deprecated Since v1.10
		 */
            sVersion: DataTable.version
        }, //
        // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
        //
        $.extend(_ext, {
            afnFiltering: _ext.search,
            aTypes: _ext.type.detect,
            ofnSearch: _ext.type.search,
            oSort: _ext.type.order,
            afnSortData: _ext.order,
            aoFeatures: _ext.feature,
            oApi: _ext.internal,
            oStdClasses: _ext.classes,
            oPagination: _ext.pager
        }), $.extend(DataTable.ext.classes, {
            sTable: "dataTable",
            sNoFooter: "no-footer",
            /* Paging buttons */
            sPageButton: "paginate_button",
            sPageButtonActive: "current",
            sPageButtonDisabled: "disabled",
            /* Striping classes */
            sStripeOdd: "odd",
            sStripeEven: "even",
            /* Empty row */
            sRowEmpty: "dataTables_empty",
            /* Features */
            sWrapper: "dataTables_wrapper",
            sFilter: "dataTables_filter",
            sInfo: "dataTables_info",
            sPaging: "dataTables_paginate paging_",
            /* Note that the type is postfixed */
            sLength: "dataTables_length",
            sProcessing: "dataTables_processing",
            /* Sorting */
            sSortAsc: "sorting_asc",
            sSortDesc: "sorting_desc",
            sSortable: "sorting",
            /* Sortable in both directions */
            sSortableAsc: "sorting_asc_disabled",
            sSortableDesc: "sorting_desc_disabled",
            sSortableNone: "sorting_disabled",
            sSortColumn: "sorting_",
            /* Note that an int is postfixed for the sorting order */
            /* Filtering */
            sFilterInput: "",
            /* Page length */
            sLengthSelect: "",
            /* Scrolling */
            sScrollWrapper: "dataTables_scroll",
            sScrollHead: "dataTables_scrollHead",
            sScrollHeadInner: "dataTables_scrollHeadInner",
            sScrollBody: "dataTables_scrollBody",
            sScrollFoot: "dataTables_scrollFoot",
            sScrollFootInner: "dataTables_scrollFootInner",
            /* Misc */
            sHeaderTH: "",
            sFooterTH: "",
            // Deprecated
            sSortJUIAsc: "",
            sSortJUIDesc: "",
            sSortJUI: "",
            sSortJUIAscAllowed: "",
            sSortJUIDescAllowed: "",
            sSortJUIWrapper: "",
            sSortIcon: "",
            sJUIHeader: "",
            sJUIFooter: ""
        }), function() {
            // Reused strings for better compression. Closure compiler appears to have a
            // weird edge case where it is trying to expand strings rather than use the
            // variable version. This results in about 200 bytes being added, for very
            // little preference benefit since it this run on script load only.
            var _empty = "";
            _empty = "";
            var _stateDefault = _empty + "ui-state-default", _sortIcon = _empty + "css_right ui-icon ui-icon-", _headerFooter = _empty + "fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix";
            $.extend(DataTable.ext.oJUIClasses, DataTable.ext.classes, {
                /* Full numbers paging buttons */
                sPageButton: "fg-button ui-button " + _stateDefault,
                sPageButtonActive: "ui-state-disabled",
                sPageButtonDisabled: "ui-state-disabled",
                /* Features */
                sPaging: "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_",
                /* Note that the type is postfixed */
                /* Sorting */
                sSortAsc: _stateDefault + " sorting_asc",
                sSortDesc: _stateDefault + " sorting_desc",
                sSortable: _stateDefault + " sorting",
                sSortableAsc: _stateDefault + " sorting_asc_disabled",
                sSortableDesc: _stateDefault + " sorting_desc_disabled",
                sSortableNone: _stateDefault + " sorting_disabled",
                sSortJUIAsc: _sortIcon + "triangle-1-n",
                sSortJUIDesc: _sortIcon + "triangle-1-s",
                sSortJUI: _sortIcon + "carat-2-n-s",
                sSortJUIAscAllowed: _sortIcon + "carat-1-n",
                sSortJUIDescAllowed: _sortIcon + "carat-1-s",
                sSortJUIWrapper: "DataTables_sort_wrapper",
                sSortIcon: "DataTables_sort_icon",
                /* Scrolling */
                sScrollHead: "dataTables_scrollHead " + _stateDefault,
                sScrollFoot: "dataTables_scrollFoot " + _stateDefault,
                /* Misc */
                sHeaderTH: _stateDefault,
                sFooterTH: _stateDefault,
                sJUIHeader: _headerFooter + " ui-corner-tl ui-corner-tr",
                sJUIFooter: _headerFooter + " ui-corner-bl ui-corner-br"
            });
        }();
        var extPagination = DataTable.ext.pager;
        $.extend(extPagination, {
            simple: function(page, pages) {
                return [ "previous", "next" ];
            },
            full: function(page, pages) {
                return [ "first", "previous", "next", "last" ];
            },
            numbers: function(page, pages) {
                return [ _numbers(page, pages) ];
            },
            simple_numbers: function(page, pages) {
                return [ "previous", _numbers(page, pages), "next" ];
            },
            full_numbers: function(page, pages) {
                return [ "first", "previous", _numbers(page, pages), "next", "last" ];
            },
            // For testing and plug-ins to use
            _numbers: _numbers,
            // Number of number buttons (including ellipsis) to show. _Must be odd!_
            numbers_length: 7
        }), $.extend(!0, DataTable.ext.renderer, {
            pageButton: {
                _: function(settings, host, idx, buttons, page, pages) {
                    var btnDisplay, btnClass, activeEl, classes = settings.oClasses, lang = settings.oLanguage.oPaginate, counter = 0, attach = function(container, buttons) {
                        var i, ien, node, button, clickHandler = function(e) {
                            _fnPageChange(settings, e.data.action, !0);
                        };
                        for (i = 0, ien = buttons.length; ien > i; i++) if (button = buttons[i], $.isArray(button)) {
                            var inner = $("<" + (button.DT_el || "div") + "/>").appendTo(container);
                            attach(inner, button);
                        } else {
                            switch (btnDisplay = null, btnClass = "", button) {
                              case "ellipsis":
                                container.append('<span class="ellipsis">&#x2026;</span>');
                                break;

                              case "first":
                                btnDisplay = lang.sFirst, btnClass = button + (page > 0 ? "" : " " + classes.sPageButtonDisabled);
                                break;

                              case "previous":
                                btnDisplay = lang.sPrevious, btnClass = button + (page > 0 ? "" : " " + classes.sPageButtonDisabled);
                                break;

                              case "next":
                                btnDisplay = lang.sNext, btnClass = button + (pages - 1 > page ? "" : " " + classes.sPageButtonDisabled);
                                break;

                              case "last":
                                btnDisplay = lang.sLast, btnClass = button + (pages - 1 > page ? "" : " " + classes.sPageButtonDisabled);
                                break;

                              default:
                                btnDisplay = button + 1, btnClass = page === button ? classes.sPageButtonActive : "";
                            }
                            null !== btnDisplay && (node = $("<a>", {
                                "class": classes.sPageButton + " " + btnClass,
                                "aria-controls": settings.sTableId,
                                "data-dt-idx": counter,
                                tabindex: settings.iTabIndex,
                                id: 0 === idx && "string" == typeof button ? settings.sTableId + "_" + button : null
                            }).html(btnDisplay).appendTo(container), _fnBindAction(node, {
                                action: button
                            }, clickHandler), counter++);
                        }
                    };
                    try {
                        // Because this approach is destroying and recreating the paging
                        // elements, focus is lost on the select button which is bad for
                        // accessibility. So we want to restore focus once the draw has
                        // completed
                        activeEl = $(host).find(document.activeElement).data("dt-idx");
                    } catch (e) {}
                    attach($(host).empty(), buttons), activeEl && $(host).find("[data-dt-idx=" + activeEl + "]").focus();
                }
            }
        }), // Built in type detection. See model.ext.aTypes for information about
        // what is required from this methods.
        $.extend(DataTable.ext.type.detect, [ // Plain numbers - first since V8 detects some plain numbers as dates
        // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
        function(d, settings) {
            var decimal = settings.oLanguage.sDecimal;
            return _isNumber(d, decimal) ? "num" + decimal : null;
        }, // Dates (only those recognised by the browser's Date.parse)
        function(d, settings) {
            // V8 will remove any unknown characters at the start and end of the
            // expression, leading to false matches such as `$245.12` or `10%` being
            // a valid date. See forum thread 18941 for detail.
            if (d && !(d instanceof Date) && (!_re_date_start.test(d) || !_re_date_end.test(d))) return null;
            var parsed = Date.parse(d);
            return null !== parsed && !isNaN(parsed) || _empty(d) ? "date" : null;
        }, // Formatted numbers
        function(d, settings) {
            var decimal = settings.oLanguage.sDecimal;
            return _isNumber(d, decimal, !0) ? "num-fmt" + decimal : null;
        }, // HTML numeric
        function(d, settings) {
            var decimal = settings.oLanguage.sDecimal;
            return _htmlNumeric(d, decimal) ? "html-num" + decimal : null;
        }, // HTML numeric, formatted
        function(d, settings) {
            var decimal = settings.oLanguage.sDecimal;
            return _htmlNumeric(d, decimal, !0) ? "html-num-fmt" + decimal : null;
        }, // HTML (this is strict checking - there must be html)
        function(d, settings) {
            return _empty(d) || "string" == typeof d && -1 !== d.indexOf("<") ? "html" : null;
        } ]), // Filter formatting functions. See model.ext.ofnSearch for information about
        // what is required from these methods.
        // 
        // Note that additional search methods are added for the html numbers and
        // html formatted numbers by `_addNumericSort()` when we know what the decimal
        // place is
        $.extend(DataTable.ext.type.search, {
            html: function(data) {
                return _empty(data) ? data : "string" == typeof data ? data.replace(_re_new_lines, " ").replace(_re_html, "") : "";
            },
            string: function(data) {
                return _empty(data) ? data : "string" == typeof data ? data.replace(_re_new_lines, " ") : data;
            }
        });
        var __numericReplace = function(d, decimalPlace, re1, re2) {
            // If a decimal place other than `.` is used, it needs to be given to the
            // function so we can detect it and replace with a `.` which is the only
            // decimal place Javascript recognises - it is not locale aware.
            return 0 === d || d && "-" !== d ? (decimalPlace && (d = _numToDecimal(d, decimalPlace)), 
            d.replace && (re1 && (d = d.replace(re1, "")), re2 && (d = d.replace(re2, ""))), 
            1 * d) : -(1 / 0);
        };
        // Information about events fired by DataTables - for documentation.
        /**
	 * Draw event, fired whenever the table is redrawn on the page, at the same
	 * point as fnDrawCallback. This may be useful for binding events or
	 * performing calculations when the table is altered at all.
	 *  @name DataTable#draw.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */
        /**
	 * Search event, fired when the searching applied to the table (using the
	 * built-in global search, or column filters) is altered.
	 *  @name DataTable#search.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */
        /**
	 * Page change event, fired when the paging of the table is altered.
	 *  @name DataTable#page.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */
        /**
	 * Order event, fired when the ordering applied to the table is altered.
	 *  @name DataTable#order.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */
        /**
	 * DataTables initialisation complete event, fired when the table is fully
	 * drawn, including Ajax data loaded, if Ajax data is required.
	 *  @name DataTable#init.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The JSON object request from the server - only
	 *    present if client-side Ajax sourced data is used</li></ol>
	 */
        /**
	 * State save event, fired when the table has changed state a new state save
	 * is required. This event allows modification of the state saving object
	 * prior to actually doing the save, including addition or other state
	 * properties (for plug-ins) or modification of a DataTables core property.
	 *  @name DataTable#stateSaveParams.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The state information to be saved
	 */
        /**
	 * State load event, fired when the table is loading state from the stored
	 * data, but prior to the settings object being modified by the saved state
	 * - allowing modification of the saved state is required or loading of
	 * state for a plug-in.
	 *  @name DataTable#stateLoadParams.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The saved state information
	 */
        /**
	 * State loaded event, fired when state has been loaded from stored data and
	 * the settings object has been modified by the loaded data.
	 *  @name DataTable#stateLoaded.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The saved state information
	 */
        /**
	 * Processing event, fired when DataTables is doing some kind of processing
	 * (be it, order, searcg or anything else). It can be used to indicate to
	 * the end user that there is something happening, or that something has
	 * finished.
	 *  @name DataTable#processing.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {boolean} bShow Flag for if DataTables is doing processing or not
	 */
        /**
	 * Ajax (XHR) event, fired whenever an Ajax request is completed from a
	 * request to made to the server for new data. This event is called before
	 * DataTables processed the returned data, so it can also be used to pre-
	 * process the data returned from the server, if needed.
	 *
	 * Note that this trigger is called in `fnServerData`, if you override
	 * `fnServerData` and which to use this event, you need to trigger it in you
	 * success function.
	 *  @name DataTable#xhr.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {object} json JSON returned from the server
	 *
	 *  @example
	 *     // Use a custom property returned from the server in another DOM element
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	 *       $('#status').html( json.status );
	 *     } );
	 *
	 *  @example
	 *     // Pre-process the data returned from the server
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	 *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
	 *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
	 *       }
	 *       // Note no return - manipulate the data directly in the JSON object.
	 *     } );
	 */
        /**
	 * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
	 * or passing the bDestroy:true parameter in the initialisation object. This
	 * can be used to remove bound events, added DOM nodes, etc.
	 *  @name DataTable#destroy.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */
        /**
	 * Page length change event, fired when number of records to show on each
	 * page (the length) is changed.
	 *  @name DataTable#length.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {integer} len New length
	 */
        /**
	 * Column sizing has changed.
	 *  @name DataTable#column-sizing.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */
        /**
	 * Column visibility has changed.
	 *  @name DataTable#column-visibility.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {int} column Column index
	 *  @param {bool} vis `false` if column now hidden, or `true` if visible
	 */
        // Default sort methods
        // Numeric sorting types - order doesn't matter here
        /*
	 * Public helper functions. These aren't used internally by DataTables, or
	 * called by any of the options passed into DataTables, but they can be used
	 * externally by developers working with DataTables. They are helper functions
	 * to make working with DataTables a little bit easier.
	 */
        /**
	 * Helpers for `columns.render`.
	 *
	 * The options defined here can be used with the `columns.render` initialisation
	 * option to provide a display renderer. The following functions are defined:
	 *
	 * * `number` - Will format numeric data (defined by `columns.data`) for
	 *   display, retaining the original unformatted data for sorting and filtering.
	 *   It takes 5 parameters:
	 *   * `string` - Thousands grouping separator
	 *   * `string` - Decimal point indicator
	 *   * `integer` - Number of decimal points to show
	 *   * `string` (optional) - Prefix.
	 *   * `string` (optional) - Postfix (/suffix).
	 *
	 * @example
	 *   // Column definition using the number renderer
	 *   {
	 *     data: "salary",
	 *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
	 *   }
	 *
	 * @namespace
	 */
        /**
	 * Reference to internal functions for use by plug-in developers. Note that
	 * these methods are references to internal functions and are considered to be
	 * private. If you use these methods, be aware that they are liable to change
	 * between versions.
	 *  @namespace
	 */
        // jQuery access
        // Legacy aliases
        // With a capital `D` we return a DataTables API instance rather than a
        // jQuery object
        // All properties that are available to $.fn.dataTable should also be
        // available on $.fn.DataTable
        return $.extend(_ext.type.order, {
            // Dates
            "date-pre": function(d) {
                return Date.parse(d) || 0;
            },
            // html
            "html-pre": function(a) {
                return _empty(a) ? "" : a.replace ? a.replace(/<.*?>/g, "").toLowerCase() : a + "";
            },
            // string
            "string-pre": function(a) {
                // This is a little complex, but faster than always calling toString,
                // http://jsperf.com/tostring-v-check
                return _empty(a) ? "" : "string" == typeof a ? a.toLowerCase() : a.toString ? a.toString() : "";
            },
            // string-asc and -desc are retained only for compatibility with the old
            // sort methods
            "string-asc": function(x, y) {
                return y > x ? -1 : x > y ? 1 : 0;
            },
            "string-desc": function(x, y) {
                return y > x ? 1 : x > y ? -1 : 0;
            }
        }), _addNumericSort(""), $.extend(!0, DataTable.ext.renderer, {
            header: {
                _: function(settings, cell, column, classes) {
                    // No additional mark-up required
                    // Attach a sort listener to update on sort - note that using the
                    // `DT` namespace will allow the event to be removed automatically
                    // on destroy, while the `dt` namespaced event is the one we are
                    // listening for
                    $(settings.nTable).on("order.dt.DT", function(e, ctx, sorting, columns) {
                        if (settings === ctx) {
                            var colIdx = column.idx;
                            cell.removeClass(column.sSortingClass + " " + classes.sSortAsc + " " + classes.sSortDesc).addClass("asc" == columns[colIdx] ? classes.sSortAsc : "desc" == columns[colIdx] ? classes.sSortDesc : column.sSortingClass);
                        }
                    });
                },
                jqueryui: function(settings, cell, column, classes) {
                    $("<div/>").addClass(classes.sSortJUIWrapper).append(cell.contents()).append($("<span/>").addClass(classes.sSortIcon + " " + column.sSortingClassJUI)).appendTo(cell), 
                    // Attach a sort listener to update on sort
                    $(settings.nTable).on("order.dt.DT", function(e, ctx, sorting, columns) {
                        if (settings === ctx) {
                            var colIdx = column.idx;
                            cell.removeClass(classes.sSortAsc + " " + classes.sSortDesc).addClass("asc" == columns[colIdx] ? classes.sSortAsc : "desc" == columns[colIdx] ? classes.sSortDesc : column.sSortingClass), 
                            cell.find("span." + classes.sSortIcon).removeClass(classes.sSortJUIAsc + " " + classes.sSortJUIDesc + " " + classes.sSortJUI + " " + classes.sSortJUIAscAllowed + " " + classes.sSortJUIDescAllowed).addClass("asc" == columns[colIdx] ? classes.sSortJUIAsc : "desc" == columns[colIdx] ? classes.sSortJUIDesc : column.sSortingClassJUI);
                        }
                    });
                }
            }
        }), DataTable.render = {
            number: function(thousands, decimal, precision, prefix, postfix) {
                return {
                    display: function(d) {
                        if ("number" != typeof d && "string" != typeof d) return d;
                        var negative = 0 > d ? "-" : "";
                        d = Math.abs(parseFloat(d));
                        var intPart = parseInt(d, 10), floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : "";
                        return negative + (prefix || "") + intPart.toString().replace(/\B(?=(\d{3})+(?!\d))/g, thousands) + floatPart + (postfix || "");
                    }
                };
            }
        }, $.extend(DataTable.ext.internal, {
            _fnExternApiFunc: _fnExternApiFunc,
            _fnBuildAjax: _fnBuildAjax,
            _fnAjaxUpdate: _fnAjaxUpdate,
            _fnAjaxParameters: _fnAjaxParameters,
            _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
            _fnAjaxDataSrc: _fnAjaxDataSrc,
            _fnAddColumn: _fnAddColumn,
            _fnColumnOptions: _fnColumnOptions,
            _fnAdjustColumnSizing: _fnAdjustColumnSizing,
            _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
            _fnColumnIndexToVisible: _fnColumnIndexToVisible,
            _fnVisbleColumns: _fnVisbleColumns,
            _fnGetColumns: _fnGetColumns,
            _fnColumnTypes: _fnColumnTypes,
            _fnApplyColumnDefs: _fnApplyColumnDefs,
            _fnHungarianMap: _fnHungarianMap,
            _fnCamelToHungarian: _fnCamelToHungarian,
            _fnLanguageCompat: _fnLanguageCompat,
            _fnBrowserDetect: _fnBrowserDetect,
            _fnAddData: _fnAddData,
            _fnAddTr: _fnAddTr,
            _fnNodeToDataIndex: _fnNodeToDataIndex,
            _fnNodeToColumnIndex: _fnNodeToColumnIndex,
            _fnGetCellData: _fnGetCellData,
            _fnSetCellData: _fnSetCellData,
            _fnSplitObjNotation: _fnSplitObjNotation,
            _fnGetObjectDataFn: _fnGetObjectDataFn,
            _fnSetObjectDataFn: _fnSetObjectDataFn,
            _fnGetDataMaster: _fnGetDataMaster,
            _fnClearTable: _fnClearTable,
            _fnDeleteIndex: _fnDeleteIndex,
            _fnInvalidate: _fnInvalidate,
            _fnGetRowElements: _fnGetRowElements,
            _fnCreateTr: _fnCreateTr,
            _fnBuildHead: _fnBuildHead,
            _fnDrawHead: _fnDrawHead,
            _fnDraw: _fnDraw,
            _fnReDraw: _fnReDraw,
            _fnAddOptionsHtml: _fnAddOptionsHtml,
            _fnDetectHeader: _fnDetectHeader,
            _fnGetUniqueThs: _fnGetUniqueThs,
            _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
            _fnFilterComplete: _fnFilterComplete,
            _fnFilterCustom: _fnFilterCustom,
            _fnFilterColumn: _fnFilterColumn,
            _fnFilter: _fnFilter,
            _fnFilterCreateSearch: _fnFilterCreateSearch,
            _fnEscapeRegex: _fnEscapeRegex,
            _fnFilterData: _fnFilterData,
            _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
            _fnUpdateInfo: _fnUpdateInfo,
            _fnInfoMacros: _fnInfoMacros,
            _fnInitialise: _fnInitialise,
            _fnInitComplete: _fnInitComplete,
            _fnLengthChange: _fnLengthChange,
            _fnFeatureHtmlLength: _fnFeatureHtmlLength,
            _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
            _fnPageChange: _fnPageChange,
            _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
            _fnProcessingDisplay: _fnProcessingDisplay,
            _fnFeatureHtmlTable: _fnFeatureHtmlTable,
            _fnScrollDraw: _fnScrollDraw,
            _fnApplyToChildren: _fnApplyToChildren,
            _fnCalculateColumnWidths: _fnCalculateColumnWidths,
            _fnThrottle: _fnThrottle,
            _fnConvertToWidth: _fnConvertToWidth,
            _fnGetWidestNode: _fnGetWidestNode,
            _fnGetMaxLenString: _fnGetMaxLenString,
            _fnStringToCss: _fnStringToCss,
            _fnSortFlatten: _fnSortFlatten,
            _fnSort: _fnSort,
            _fnSortAria: _fnSortAria,
            _fnSortListener: _fnSortListener,
            _fnSortAttachListener: _fnSortAttachListener,
            _fnSortingClasses: _fnSortingClasses,
            _fnSortData: _fnSortData,
            _fnSaveState: _fnSaveState,
            _fnLoadState: _fnLoadState,
            _fnSettingsFromNode: _fnSettingsFromNode,
            _fnLog: _fnLog,
            _fnMap: _fnMap,
            _fnBindAction: _fnBindAction,
            _fnCallbackReg: _fnCallbackReg,
            _fnCallbackFire: _fnCallbackFire,
            _fnLengthOverflow: _fnLengthOverflow,
            _fnRenderer: _fnRenderer,
            _fnDataSource: _fnDataSource,
            _fnRowAttributes: _fnRowAttributes,
            _fnCalculateEnd: function() {}
        }), $.fn.dataTable = DataTable, $.fn.dataTableSettings = DataTable.settings, $.fn.dataTableExt = DataTable.ext, 
        $.fn.DataTable = function(opts) {
            return $(this).dataTable(opts).api();
        }, $.each(DataTable, function(prop, val) {
            $.fn.DataTable[prop] = val;
        }), $.fn.dataTable;
    });
}(window, document), /**
 * @preserve jQuery DateTimePicker plugin v2.4.3
 * @homepage http://xdsoft.net/jqplugins/datetimepicker/
 * (c) 2014, Chupurnov Valeriy.
 */
/*global document,window,jQuery,setTimeout,clearTimeout,HighlightedDate,getCurrentValue*/
function($) {
    "use strict";
    var default_options = {
        i18n: {
            ar: {
                // Arabic
                months: [ "كانون الثاني", "شباط", "آذار", "نيسان", "مايو", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول" ],
                dayOfWeek: [ "ن", "ث", "ع", "خ", "ج", "س", "ح" ]
            },
            ro: {
                // Romanian
                months: [ "ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie" ],
                dayOfWeek: [ "l", "ma", "mi", "j", "v", "s", "d" ]
            },
            id: {
                // Indonesian
                months: [ "Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember" ],
                dayOfWeek: [ "Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab" ]
            },
            bg: {
                // Bulgarian
                months: [ "Януари", "Февруари", "Март", "Април", "Май", "Юни", "Юли", "Август", "Септември", "Октомври", "Ноември", "Декември" ],
                dayOfWeek: [ "Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб" ]
            },
            fa: {
                // Persian/Farsi
                months: [ "فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند" ],
                dayOfWeek: [ "یکشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه" ]
            },
            ru: {
                // Russian
                months: [ "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь" ],
                dayOfWeek: [ "Вск", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб" ]
            },
            uk: {
                // Ukrainian
                months: [ "Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень" ],
                dayOfWeek: [ "Ндл", "Пнд", "Втр", "Срд", "Чтв", "Птн", "Сбт" ]
            },
            en: {
                // English
                months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                dayOfWeek: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ]
            },
            el: {
                // Ελληνικά
                months: [ "Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος" ],
                dayOfWeek: [ "Κυρ", "Δευ", "Τρι", "Τετ", "Πεμ", "Παρ", "Σαβ" ]
            },
            de: {
                // German
                months: [ "Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember" ],
                dayOfWeek: [ "So", "Mo", "Di", "Mi", "Do", "Fr", "Sa" ]
            },
            nl: {
                // Dutch
                months: [ "januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december" ],
                dayOfWeek: [ "zo", "ma", "di", "wo", "do", "vr", "za" ]
            },
            tr: {
                // Turkish
                months: [ "Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık" ],
                dayOfWeek: [ "Paz", "Pts", "Sal", "Çar", "Per", "Cum", "Cts" ]
            },
            fr: {
                //French
                months: [ "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" ],
                dayOfWeek: [ "Dim", "Lun", "Mar", "Mer", "Jeu", "Ven", "Sam" ]
            },
            es: {
                // Spanish
                months: [ "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" ],
                dayOfWeek: [ "Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb" ]
            },
            th: {
                // Thai
                months: [ "มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม" ],
                dayOfWeek: [ "อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส." ]
            },
            pl: {
                // Polish
                months: [ "styczeń", "luty", "marzec", "kwiecień", "maj", "czerwiec", "lipiec", "sierpień", "wrzesień", "październik", "listopad", "grudzień" ],
                dayOfWeek: [ "nd", "pn", "wt", "śr", "cz", "pt", "sb" ]
            },
            pt: {
                // Portuguese
                months: [ "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" ],
                dayOfWeek: [ "Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab" ]
            },
            ch: {
                // Simplified Chinese
                months: [ "一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月" ],
                dayOfWeek: [ "日", "一", "二", "三", "四", "五", "六" ]
            },
            se: {
                // Swedish
                months: [ "Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December" ],
                dayOfWeek: [ "Sön", "Mån", "Tis", "Ons", "Tor", "Fre", "Lör" ]
            },
            kr: {
                // Korean
                months: [ "1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월" ],
                dayOfWeek: [ "일", "월", "화", "수", "목", "금", "토" ]
            },
            it: {
                // Italian
                months: [ "Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre" ],
                dayOfWeek: [ "Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab" ]
            },
            da: {
                // Dansk
                months: [ "January", "Februar", "Marts", "April", "Maj", "Juni", "July", "August", "September", "Oktober", "November", "December" ],
                dayOfWeek: [ "Søn", "Man", "Tir", "Ons", "Tor", "Fre", "Lør" ]
            },
            no: {
                // Norwegian
                months: [ "Januar", "Februar", "Mars", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Desember" ],
                dayOfWeek: [ "Søn", "Man", "Tir", "Ons", "Tor", "Fre", "Lør" ]
            },
            ja: {
                // Japanese
                months: [ "1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月" ],
                dayOfWeek: [ "日", "月", "火", "水", "木", "金", "土" ]
            },
            vi: {
                // Vietnamese
                months: [ "Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12" ],
                dayOfWeek: [ "CN", "T2", "T3", "T4", "T5", "T6", "T7" ]
            },
            sl: {
                // Slovenščina
                months: [ "Januar", "Februar", "Marec", "April", "Maj", "Junij", "Julij", "Avgust", "September", "Oktober", "November", "December" ],
                dayOfWeek: [ "Ned", "Pon", "Tor", "Sre", "Čet", "Pet", "Sob" ]
            },
            cs: {
                // Čeština
                months: [ "Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec" ],
                dayOfWeek: [ "Ne", "Po", "Út", "St", "Čt", "Pá", "So" ]
            },
            hu: {
                // Hungarian
                months: [ "Január", "Február", "Március", "Április", "Május", "Június", "Július", "Augusztus", "Szeptember", "Október", "November", "December" ],
                dayOfWeek: [ "Va", "Hé", "Ke", "Sze", "Cs", "Pé", "Szo" ]
            },
            az: {
                //Azerbaijanian (Azeri)
                months: [ "Yanvar", "Fevral", "Mart", "Aprel", "May", "Iyun", "Iyul", "Avqust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr" ],
                dayOfWeek: [ "B", "Be", "Ça", "Ç", "Ca", "C", "Ş" ]
            },
            bs: {
                //Bosanski
                months: [ "Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar" ],
                dayOfWeek: [ "Ned", "Pon", "Uto", "Sri", "Čet", "Pet", "Sub" ]
            },
            ca: {
                //Català
                months: [ "Gener", "Febrer", "Març", "Abril", "Maig", "Juny", "Juliol", "Agost", "Setembre", "Octubre", "Novembre", "Desembre" ],
                dayOfWeek: [ "Dg", "Dl", "Dt", "Dc", "Dj", "Dv", "Ds" ]
            },
            "en-GB": {
                //English (British)
                months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                dayOfWeek: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ]
            },
            et: {
                //"Eesti"
                months: [ "Jaanuar", "Veebruar", "Märts", "Aprill", "Mai", "Juuni", "Juuli", "August", "September", "Oktoober", "November", "Detsember" ],
                dayOfWeek: [ "P", "E", "T", "K", "N", "R", "L" ]
            },
            eu: {
                //Euskara
                months: [ "Urtarrila", "Otsaila", "Martxoa", "Apirila", "Maiatza", "Ekaina", "Uztaila", "Abuztua", "Iraila", "Urria", "Azaroa", "Abendua" ],
                dayOfWeek: [ "Ig.", "Al.", "Ar.", "Az.", "Og.", "Or.", "La." ]
            },
            fi: {
                //Finnish (Suomi)
                months: [ "Tammikuu", "Helmikuu", "Maaliskuu", "Huhtikuu", "Toukokuu", "Kesäkuu", "Heinäkuu", "Elokuu", "Syyskuu", "Lokakuu", "Marraskuu", "Joulukuu" ],
                dayOfWeek: [ "Su", "Ma", "Ti", "Ke", "To", "Pe", "La" ]
            },
            gl: {
                //Galego
                months: [ "Xan", "Feb", "Maz", "Abr", "Mai", "Xun", "Xul", "Ago", "Set", "Out", "Nov", "Dec" ],
                dayOfWeek: [ "Dom", "Lun", "Mar", "Mer", "Xov", "Ven", "Sab" ]
            },
            hr: {
                //Hrvatski
                months: [ "Siječanj", "Veljača", "Ožujak", "Travanj", "Svibanj", "Lipanj", "Srpanj", "Kolovoz", "Rujan", "Listopad", "Studeni", "Prosinac" ],
                dayOfWeek: [ "Ned", "Pon", "Uto", "Sri", "Čet", "Pet", "Sub" ]
            },
            ko: {
                //Korean (한국어)
                months: [ "1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월" ],
                dayOfWeek: [ "일", "월", "화", "수", "목", "금", "토" ]
            },
            lt: {
                //Lithuanian (lietuvių)
                months: [ "Sausio", "Vasario", "Kovo", "Balandžio", "Gegužės", "Birželio", "Liepos", "Rugpjūčio", "Rugsėjo", "Spalio", "Lapkričio", "Gruodžio" ],
                dayOfWeek: [ "Sek", "Pir", "Ant", "Tre", "Ket", "Pen", "Šeš" ]
            },
            lv: {
                //Latvian (Latviešu)
                months: [ "Janvāris", "Februāris", "Marts", "Aprīlis ", "Maijs", "Jūnijs", "Jūlijs", "Augusts", "Septembris", "Oktobris", "Novembris", "Decembris" ],
                dayOfWeek: [ "Sv", "Pr", "Ot", "Tr", "Ct", "Pk", "St" ]
            },
            mk: {
                //Macedonian (Македонски)
                months: [ "јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември" ],
                dayOfWeek: [ "нед", "пон", "вто", "сре", "чет", "пет", "саб" ]
            },
            mn: {
                //Mongolian (Монгол)
                months: [ "1-р сар", "2-р сар", "3-р сар", "4-р сар", "5-р сар", "6-р сар", "7-р сар", "8-р сар", "9-р сар", "10-р сар", "11-р сар", "12-р сар" ],
                dayOfWeek: [ "Дав", "Мяг", "Лха", "Пүр", "Бсн", "Бям", "Ням" ]
            },
            "pt-BR": {
                //Português(Brasil)
                months: [ "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" ],
                dayOfWeek: [ "Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb" ]
            },
            sk: {
                //Slovenčina
                months: [ "Január", "Február", "Marec", "Apríl", "Máj", "Jún", "Júl", "August", "September", "Október", "November", "December" ],
                dayOfWeek: [ "Ne", "Po", "Ut", "St", "Št", "Pi", "So" ]
            },
            sq: {
                //Albanian (Shqip)
                months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                dayOfWeek: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ]
            },
            "sr-YU": {
                //Serbian (Srpski)
                months: [ "Januar", "Februar", "Mart", "April", "Maj", "Jun", "Jul", "Avgust", "Septembar", "Oktobar", "Novembar", "Decembar" ],
                dayOfWeek: [ "Ned", "Pon", "Uto", "Sre", "čet", "Pet", "Sub" ]
            },
            sr: {
                //Serbian Cyrillic (Српски)
                months: [ "јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар" ],
                dayOfWeek: [ "нед", "пон", "уто", "сре", "чет", "пет", "суб" ]
            },
            sv: {
                //Svenska
                months: [ "Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December" ],
                dayOfWeek: [ "Sön", "Mån", "Tis", "Ons", "Tor", "Fre", "Lör" ]
            },
            "zh-TW": {
                //Traditional Chinese (繁體中文)
                months: [ "一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月" ],
                dayOfWeek: [ "日", "一", "二", "三", "四", "五", "六" ]
            },
            zh: {
                //Simplified Chinese (简体中文)
                months: [ "一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月" ],
                dayOfWeek: [ "日", "一", "二", "三", "四", "五", "六" ]
            },
            he: {
                //Hebrew (עברית)
                months: [ "ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר" ],
                dayOfWeek: [ "א'", "ב'", "ג'", "ד'", "ה'", "ו'", "שבת" ]
            },
            hy: {
                // Armenian
                months: [ "Հունվար", "Փետրվար", "Մարտ", "Ապրիլ", "Մայիս", "Հունիս", "Հուլիս", "Օգոստոս", "Սեպտեմբեր", "Հոկտեմբեր", "Նոյեմբեր", "Դեկտեմբեր" ],
                dayOfWeek: [ "Կի", "Երկ", "Երք", "Չոր", "Հնգ", "Ուրբ", "Շբթ" ]
            },
            kg: {
                // Kyrgyz
                months: [ "Үчтүн айы", "Бирдин айы", "Жалган Куран", "Чын Куран", "Бугу", "Кулжа", "Теке", "Баш Оона", "Аяк Оона", "Тогуздун айы", "Жетинин айы", "Бештин айы" ],
                dayOfWeek: [ "Жек", "Дүй", "Шей", "Шар", "Бей", "Жум", "Ише" ]
            }
        },
        value: "",
        lang: "en",
        format: "Y/m/d H:i",
        formatTime: "H:i",
        formatDate: "Y/m/d",
        startDate: !1,
        // new Date(), '1986/12/08', '-1970/01/05','-1970/01/05',
        step: 60,
        monthChangeSpinner: !0,
        closeOnDateSelect: !1,
        closeOnTimeSelect: !0,
        closeOnWithoutClick: !0,
        closeOnInputClick: !0,
        timepicker: !0,
        datepicker: !0,
        weeks: !1,
        defaultTime: !1,
        // use formatTime format (ex. '10:00' for formatTime:	'H:i')
        defaultDate: !1,
        // use formatDate format (ex new Date() or '1986/12/08' or '-1970/01/05' or '-1970/01/05')
        minDate: !1,
        maxDate: !1,
        minTime: !1,
        maxTime: !1,
        allowTimes: [],
        opened: !1,
        initTime: !0,
        inline: !1,
        theme: "",
        onSelectDate: function() {},
        onSelectTime: function() {},
        onChangeMonth: function() {},
        onChangeYear: function() {},
        onChangeDateTime: function() {},
        onShow: function() {},
        onClose: function() {},
        onGenerate: function() {},
        withoutCopyright: !0,
        inverseButton: !1,
        hours12: !1,
        next: "xdsoft_next",
        prev: "xdsoft_prev",
        dayOfWeekStart: 0,
        parentID: "body",
        timeHeightInTimePicker: 25,
        timepickerScrollbar: !0,
        todayButton: !0,
        prevButton: !0,
        nextButton: !0,
        defaultSelect: !0,
        scrollMonth: !0,
        scrollTime: !0,
        scrollInput: !0,
        lazyInit: !1,
        mask: !1,
        validateOnBlur: !0,
        allowBlank: !0,
        yearStart: 1950,
        yearEnd: 2050,
        monthStart: 0,
        monthEnd: 11,
        style: "",
        id: "",
        fixed: !1,
        roundTime: "round",
        // ceil, floor
        className: "",
        weekends: [],
        highlightedDates: [],
        highlightedPeriods: [],
        disabledDates: [],
        yearOffset: 0,
        beforeShowDay: null,
        enterLikeTab: !0,
        showApplyButton: !1
    };
    // fix for ie8
    Array.prototype.indexOf || (Array.prototype.indexOf = function(obj, start) {
        var i, j;
        for (i = start || 0, j = this.length; j > i; i += 1) if (this[i] === obj) return i;
        return -1;
    }), Date.prototype.countDaysInMonth = function() {
        return new Date(this.getFullYear(), this.getMonth() + 1, 0).getDate();
    }, $.fn.xdsoftScroller = function(percent) {
        return this.each(function() {
            var timebox, parentHeight, height, scrollbar, scroller, timeboxparent = $(this), pointerEventToXY = function(e) {
                var touch, out = {
                    x: 0,
                    y: 0
                };
                return "touchstart" === e.type || "touchmove" === e.type || "touchend" === e.type || "touchcancel" === e.type ? (touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0], 
                out.x = touch.clientX, out.y = touch.clientY) : ("mousedown" === e.type || "mouseup" === e.type || "mousemove" === e.type || "mouseover" === e.type || "mouseout" === e.type || "mouseenter" === e.type || "mouseleave" === e.type) && (out.x = e.clientX, 
                out.y = e.clientY), out;
            }, maximumOffset = 100, start = !1, startY = 0, startTop = 0, h1 = 0, touchStart = !1, startTopScroll = 0, calcOffset = function() {};
            return "hide" === percent ? void timeboxparent.find(".xdsoft_scrollbar").hide() : ($(this).hasClass("xdsoft_scroller_box") || (timebox = timeboxparent.children().eq(0), 
            parentHeight = timeboxparent[0].clientHeight, height = timebox[0].offsetHeight, 
            scrollbar = $('<div class="xdsoft_scrollbar"></div>'), scroller = $('<div class="xdsoft_scroller"></div>'), 
            scrollbar.append(scroller), timeboxparent.addClass("xdsoft_scroller_box").append(scrollbar), 
            calcOffset = function(event) {
                var offset = pointerEventToXY(event).y - startY + startTopScroll;
                0 > offset && (offset = 0), offset + scroller[0].offsetHeight > h1 && (offset = h1 - scroller[0].offsetHeight), 
                timeboxparent.trigger("scroll_element.xdsoft_scroller", [ maximumOffset ? offset / maximumOffset : 0 ]);
            }, scroller.on("touchstart.xdsoft_scroller mousedown.xdsoft_scroller", function(event) {
                parentHeight || timeboxparent.trigger("resize_scroll.xdsoft_scroller", [ percent ]), 
                startY = pointerEventToXY(event).y, startTopScroll = parseInt(scroller.css("margin-top"), 10), 
                h1 = scrollbar[0].offsetHeight, "mousedown" === event.type ? (document && $(document.body).addClass("xdsoft_noselect"), 
                $([ document.body, window ]).on("mouseup.xdsoft_scroller", function arguments_callee() {
                    $([ document.body, window ]).off("mouseup.xdsoft_scroller", arguments_callee).off("mousemove.xdsoft_scroller", calcOffset).removeClass("xdsoft_noselect");
                }), $(document.body).on("mousemove.xdsoft_scroller", calcOffset)) : (touchStart = !0, 
                event.stopPropagation(), event.preventDefault());
            }).on("touchmove", function(event) {
                touchStart && (event.preventDefault(), calcOffset(event));
            }).on("touchend touchcancel", function(event) {
                touchStart = !1, startTopScroll = 0;
            }), timeboxparent.on("scroll_element.xdsoft_scroller", function(event, percentage) {
                parentHeight || timeboxparent.trigger("resize_scroll.xdsoft_scroller", [ percentage, !0 ]), 
                percentage = percentage > 1 ? 1 : 0 > percentage || isNaN(percentage) ? 0 : percentage, 
                scroller.css("margin-top", maximumOffset * percentage), setTimeout(function() {
                    timebox.css("marginTop", -parseInt((timebox[0].offsetHeight - parentHeight) * percentage, 10));
                }, 10);
            }).on("resize_scroll.xdsoft_scroller", function(event, percentage, noTriggerScroll) {
                var percent, sh;
                parentHeight = timeboxparent[0].clientHeight, height = timebox[0].offsetHeight, 
                percent = parentHeight / height, sh = percent * scrollbar[0].offsetHeight, percent > 1 ? scroller.hide() : (scroller.show(), 
                scroller.css("height", parseInt(sh > 10 ? sh : 10, 10)), maximumOffset = scrollbar[0].offsetHeight - scroller[0].offsetHeight, 
                noTriggerScroll !== !0 && timeboxparent.trigger("scroll_element.xdsoft_scroller", [ percentage || Math.abs(parseInt(timebox.css("marginTop"), 10)) / (height - parentHeight) ]));
            }), timeboxparent.on("mousewheel", function(event) {
                var top = Math.abs(parseInt(timebox.css("marginTop"), 10));
                return top -= 20 * event.deltaY, 0 > top && (top = 0), timeboxparent.trigger("scroll_element.xdsoft_scroller", [ top / (height - parentHeight) ]), 
                event.stopPropagation(), !1;
            }), timeboxparent.on("touchstart", function(event) {
                start = pointerEventToXY(event), startTop = Math.abs(parseInt(timebox.css("marginTop"), 10));
            }), timeboxparent.on("touchmove", function(event) {
                if (start) {
                    event.preventDefault();
                    var coord = pointerEventToXY(event);
                    timeboxparent.trigger("scroll_element.xdsoft_scroller", [ (startTop - (coord.y - start.y)) / (height - parentHeight) ]);
                }
            }), timeboxparent.on("touchend touchcancel", function(event) {
                start = !1, startTop = 0;
            })), void timeboxparent.trigger("resize_scroll.xdsoft_scroller", [ percent ]));
        });
    }, $.fn.datetimepicker = function(opt) {
        var createDateTimePicker, destroyDateTimePicker, KEY0 = 48, KEY9 = 57, _KEY0 = 96, _KEY9 = 105, CTRLKEY = 17, DEL = 46, ENTER = 13, ESC = 27, BACKSPACE = 8, ARROWLEFT = 37, ARROWUP = 38, ARROWRIGHT = 39, ARROWDOWN = 40, TAB = 9, F5 = 116, AKEY = 65, CKEY = 67, VKEY = 86, ZKEY = 90, YKEY = 89, ctrlDown = !1, options = $.isPlainObject(opt) || !opt ? $.extend(!0, {}, default_options, opt) : $.extend(!0, {}, default_options), lazyInitTimer = 0, lazyInit = function(input) {
            input.on("open.xdsoft focusin.xdsoft mousedown.xdsoft", function initOnActionCallback(event) {
                input.is(":disabled") || input.data("xdsoft_datetimepicker") || (clearTimeout(lazyInitTimer), 
                lazyInitTimer = setTimeout(function() {
                    input.data("xdsoft_datetimepicker") || createDateTimePicker(input), input.off("open.xdsoft focusin.xdsoft mousedown.xdsoft", initOnActionCallback).trigger("open.xdsoft");
                }, 100));
            });
        };
        return createDateTimePicker = function(input) {
            function getCurrentValue() {
                var time, ct = !1;
                return options.startDate ? ct = _xdsoft_datetime.strToDate(options.startDate) : (ct = options.value || (input && input.val && input.val() ? input.val() : ""), 
                ct ? ct = _xdsoft_datetime.strToDateTime(ct) : options.defaultDate && (ct = _xdsoft_datetime.strToDateTime(options.defaultDate), 
                options.defaultTime && (time = _xdsoft_datetime.strtotime(options.defaultTime), 
                ct.setHours(time.getHours()), ct.setMinutes(time.getMinutes())))), ct && _xdsoft_datetime.isValidDate(ct) ? datetimepicker.data("changed", !0) : ct = "", 
                ct || 0;
            }
            var XDSoft_datetime, //scroll_element,
            xchangeTimer, timerclick, current_time_index, setPos, _xdsoft_datetime, datetimepicker = $("<div " + (options.id ? 'id="' + options.id + '"' : "") + " " + (options.style ? 'style="' + options.style + '"' : "") + ' class="xdsoft_datetimepicker xdsoft_' + options.theme + " xdsoft_noselect " + (options.weeks ? " xdsoft_showweeks" : "") + options.className + '"></div>'), xdsoft_copyright = $('<div class="xdsoft_copyright"><a target="_blank" href="http://xdsoft.net/jqplugins/datetimepicker/">xdsoft.net</a></div>'), datepicker = $('<div class="xdsoft_datepicker active"></div>'), mounth_picker = $('<div class="xdsoft_mounthpicker"><button type="button" class="xdsoft_prev"></button><button type="button" class="xdsoft_today_button"></button><div class="xdsoft_label xdsoft_month"><span></span><i></i></div><div class="xdsoft_label xdsoft_year"><span></span><i></i></div><button type="button" class="xdsoft_next"></button></div>'), calendar = $('<div class="xdsoft_calendar"></div>'), timepicker = $('<div class="xdsoft_timepicker active"><button type="button" class="xdsoft_prev"></button><div class="xdsoft_time_box"></div><button type="button" class="xdsoft_next"></button></div>'), timeboxparent = timepicker.find(".xdsoft_time_box").eq(0), timebox = $('<div class="xdsoft_time_variant"></div>'), applyButton = $('<button class="xdsoft_save_selected blue-gradient-button">Save Selected</button>'), /*scrollbar = $('<div class="xdsoft_scrollbar"></div>'),
				scroller = $('<div class="xdsoft_scroller"></div>'),*/
            monthselect = $('<div class="xdsoft_select xdsoft_monthselect"><div></div></div>'), yearselect = $('<div class="xdsoft_select xdsoft_yearselect"><div></div></div>'), triggerAfterOpen = !1, timer = 0, timer1 = 0;
            mounth_picker.find(".xdsoft_month span").after(monthselect), mounth_picker.find(".xdsoft_year span").after(yearselect), 
            mounth_picker.find(".xdsoft_month,.xdsoft_year").on("mousedown.xdsoft", function(event) {
                var items, i, select = $(this).find(".xdsoft_select").eq(0), val = 0, top = 0, visible = select.is(":visible");
                for (mounth_picker.find(".xdsoft_select").hide(), _xdsoft_datetime.currentTime && (val = _xdsoft_datetime.currentTime[$(this).hasClass("xdsoft_month") ? "getMonth" : "getFullYear"]()), 
                select[visible ? "hide" : "show"](), items = select.find("div.xdsoft_option"), i = 0; i < items.length && items.eq(i).data("value") !== val; i += 1) top += items[0].offsetHeight;
                return select.xdsoftScroller(top / (select.children()[0].offsetHeight - select[0].clientHeight)), 
                event.stopPropagation(), !1;
            }), mounth_picker.find(".xdsoft_select").xdsoftScroller().on("mousedown.xdsoft", function(event) {
                event.stopPropagation(), event.preventDefault();
            }).on("mousedown.xdsoft", ".xdsoft_option", function(event) {
                (void 0 === _xdsoft_datetime.currentTime || null === _xdsoft_datetime.currentTime) && (_xdsoft_datetime.currentTime = _xdsoft_datetime.now());
                var year = _xdsoft_datetime.currentTime.getFullYear();
                _xdsoft_datetime && _xdsoft_datetime.currentTime && _xdsoft_datetime.currentTime[$(this).parent().parent().hasClass("xdsoft_monthselect") ? "setMonth" : "setFullYear"]($(this).data("value")), 
                $(this).parent().parent().hide(), datetimepicker.trigger("xchange.xdsoft"), options.onChangeMonth && $.isFunction(options.onChangeMonth) && options.onChangeMonth.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input")), 
                year !== _xdsoft_datetime.currentTime.getFullYear() && $.isFunction(options.onChangeYear) && options.onChangeYear.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input"));
            }), datetimepicker.setOptions = function(_options) {
                var highlightedDates = {}, getCaretPos = function(input) {
                    try {
                        if (document.selection && document.selection.createRange) {
                            var range = document.selection.createRange();
                            return range.getBookmark().charCodeAt(2) - 2;
                        }
                        if (input.setSelectionRange) return input.selectionStart;
                    } catch (e) {
                        return 0;
                    }
                }, setCaretPos = function(node, pos) {
                    if (node = "string" == typeof node || node instanceof String ? document.getElementById(node) : node, 
                    !node) return !1;
                    if (node.createTextRange) {
                        var textRange = node.createTextRange();
                        return textRange.collapse(!0), textRange.moveEnd("character", pos), textRange.moveStart("character", pos), 
                        textRange.select(), !0;
                    }
                    return node.setSelectionRange ? (node.setSelectionRange(pos, pos), !0) : !1;
                }, isValidValue = function(mask, value) {
                    var reg = mask.replace(/([\[\]\/\{\}\(\)\-\.\+]{1})/g, "\\$1").replace(/_/g, "{digit+}").replace(/([0-9]{1})/g, "{digit$1}").replace(/\{digit([0-9]{1})\}/g, "[0-$1_]{1}").replace(/\{digit[\+]\}/g, "[0-9_]{1}");
                    return new RegExp(reg).test(value);
                };
                options = $.extend(!0, {}, options, _options), _options.allowTimes && $.isArray(_options.allowTimes) && _options.allowTimes.length && (options.allowTimes = $.extend(!0, [], _options.allowTimes)), 
                _options.weekends && $.isArray(_options.weekends) && _options.weekends.length && (options.weekends = $.extend(!0, [], _options.weekends)), 
                _options.highlightedDates && $.isArray(_options.highlightedDates) && _options.highlightedDates.length && ($.each(_options.highlightedDates, function(index, value) {
                    var exDesc, splitData = $.map(value.split(","), $.trim), hDate = new HighlightedDate(Date.parseDate(splitData[0], options.formatDate), splitData[1], splitData[2]), // date, desc, style
                    keyDate = hDate.date.dateFormat(options.formatDate);
                    void 0 !== highlightedDates[keyDate] ? (exDesc = highlightedDates[keyDate].desc, 
                    exDesc && exDesc.length && hDate.desc && hDate.desc.length && (highlightedDates[keyDate].desc = exDesc + "\n" + hDate.desc)) : highlightedDates[keyDate] = hDate;
                }), options.highlightedDates = $.extend(!0, [], highlightedDates)), _options.highlightedPeriods && $.isArray(_options.highlightedPeriods) && _options.highlightedPeriods.length && (highlightedDates = $.extend(!0, [], options.highlightedDates), 
                $.each(_options.highlightedPeriods, function(index, value) {
                    for (var hDate, keyDate, exDesc, splitData = $.map(value.split(","), $.trim), dateTest = Date.parseDate(splitData[0], options.formatDate), // start date
                    dateEnd = Date.parseDate(splitData[1], options.formatDate), desc = splitData[2], style = splitData[3]; dateEnd >= dateTest; ) hDate = new HighlightedDate(dateTest, desc, style), 
                    keyDate = dateTest.dateFormat(options.formatDate), dateTest.setDate(dateTest.getDate() + 1), 
                    void 0 !== highlightedDates[keyDate] ? (exDesc = highlightedDates[keyDate].desc, 
                    exDesc && exDesc.length && hDate.desc && hDate.desc.length && (highlightedDates[keyDate].desc = exDesc + "\n" + hDate.desc)) : highlightedDates[keyDate] = hDate;
                }), options.highlightedDates = $.extend(!0, [], highlightedDates)), _options.disabledDates && $.isArray(_options.disabledDates) && _options.disabledDates.length && (options.disabledDates = $.extend(!0, [], _options.disabledDates)), 
                !options.open && !options.opened || options.inline || input.trigger("open.xdsoft"), 
                options.inline && (triggerAfterOpen = !0, datetimepicker.addClass("xdsoft_inline"), 
                input.after(datetimepicker).hide()), options.inverseButton && (options.next = "xdsoft_prev", 
                options.prev = "xdsoft_next"), options.datepicker ? datepicker.addClass("active") : datepicker.removeClass("active"), 
                options.timepicker ? timepicker.addClass("active") : timepicker.removeClass("active"), 
                options.value && (_xdsoft_datetime.setCurrentTime(options.value), input && input.val && input.val(_xdsoft_datetime.str)), 
                isNaN(options.dayOfWeekStart) ? options.dayOfWeekStart = 0 : options.dayOfWeekStart = parseInt(options.dayOfWeekStart, 10) % 7, 
                options.timepickerScrollbar || timeboxparent.xdsoftScroller("hide"), options.minDate && /^-(.*)$/.test(options.minDate) && (options.minDate = _xdsoft_datetime.strToDateTime(options.minDate).dateFormat(options.formatDate)), 
                options.maxDate && /^\+(.*)$/.test(options.maxDate) && (options.maxDate = _xdsoft_datetime.strToDateTime(options.maxDate).dateFormat(options.formatDate)), 
                applyButton.toggle(options.showApplyButton), mounth_picker.find(".xdsoft_today_button").css("visibility", options.todayButton ? "visible" : "hidden"), 
                mounth_picker.find("." + options.prev).css("visibility", options.prevButton ? "visible" : "hidden"), 
                mounth_picker.find("." + options.next).css("visibility", options.nextButton ? "visible" : "hidden"), 
                options.mask && (input.off("keydown.xdsoft"), options.mask === !0 && (options.mask = options.format.replace(/Y/g, "9999").replace(/F/g, "9999").replace(/m/g, "19").replace(/d/g, "39").replace(/H/g, "29").replace(/i/g, "59").replace(/s/g, "59")), 
                "string" === $.type(options.mask) && (isValidValue(options.mask, input.val()) || input.val(options.mask.replace(/[0-9]/g, "_")), 
                input.on("keydown.xdsoft", function(event) {
                    var pos, digit, val = this.value, key = event.which;
                    if (key >= KEY0 && KEY9 >= key || key >= _KEY0 && _KEY9 >= key || key === BACKSPACE || key === DEL) {
                        for (pos = getCaretPos(this), digit = key !== BACKSPACE && key !== DEL ? String.fromCharCode(key >= _KEY0 && _KEY9 >= key ? key - KEY0 : key) : "_", 
                        key !== BACKSPACE && key !== DEL || !pos || (pos -= 1, digit = "_"); /[^0-9_]/.test(options.mask.substr(pos, 1)) && pos < options.mask.length && pos > 0; ) pos += key === BACKSPACE || key === DEL ? -1 : 1;
                        if (val = val.substr(0, pos) + digit + val.substr(pos + 1), "" === $.trim(val)) val = options.mask.replace(/[0-9]/g, "_"); else if (pos === options.mask.length) return event.preventDefault(), 
                        !1;
                        for (pos += key === BACKSPACE || key === DEL ? 0 : 1; /[^0-9_]/.test(options.mask.substr(pos, 1)) && pos < options.mask.length && pos > 0; ) pos += key === BACKSPACE || key === DEL ? -1 : 1;
                        isValidValue(options.mask, val) ? (this.value = val, setCaretPos(this, pos)) : "" === $.trim(val) ? this.value = options.mask.replace(/[0-9]/g, "_") : input.trigger("error_input.xdsoft");
                    } else if (-1 !== [ AKEY, CKEY, VKEY, ZKEY, YKEY ].indexOf(key) && ctrlDown || -1 !== [ ESC, ARROWUP, ARROWDOWN, ARROWLEFT, ARROWRIGHT, F5, CTRLKEY, TAB, ENTER ].indexOf(key)) return !0;
                    return event.preventDefault(), !1;
                }))), options.validateOnBlur && input.off("blur.xdsoft").on("blur.xdsoft", function() {
                    if (options.allowBlank && !$.trim($(this).val()).length) $(this).val(null), datetimepicker.data("xdsoft_datetime").empty(); else if (Date.parseDate($(this).val(), options.format)) datetimepicker.data("xdsoft_datetime").setCurrentTime($(this).val()); else {
                        var splittedHours = +[ $(this).val()[0], $(this).val()[1] ].join(""), splittedMinutes = +[ $(this).val()[2], $(this).val()[3] ].join("");
                        // parse the numbers as 0312 => 03:12
                        !options.datepicker && options.timepicker && splittedHours >= 0 && 24 > splittedHours && splittedMinutes >= 0 && 60 > splittedMinutes ? $(this).val([ splittedHours, splittedMinutes ].map(function(item) {
                            return item > 9 ? item : "0" + item;
                        }).join(":")) : $(this).val(_xdsoft_datetime.now().dateFormat(options.format)), 
                        datetimepicker.data("xdsoft_datetime").setCurrentTime($(this).val());
                    }
                    datetimepicker.trigger("changedatetime.xdsoft");
                }), options.dayOfWeekStartPrev = 0 === options.dayOfWeekStart ? 6 : options.dayOfWeekStart - 1, 
                datetimepicker.trigger("xchange.xdsoft").trigger("afterOpen.xdsoft");
            }, datetimepicker.data("options", options).on("mousedown.xdsoft", function(event) {
                return event.stopPropagation(), event.preventDefault(), yearselect.hide(), monthselect.hide(), 
                !1;
            }), //scroll_element = timepicker.find('.xdsoft_time_box');
            timeboxparent.append(timebox), timeboxparent.xdsoftScroller(), datetimepicker.on("afterOpen.xdsoft", function() {
                timeboxparent.xdsoftScroller();
            }), datetimepicker.append(datepicker).append(timepicker), options.withoutCopyright !== !0 && datetimepicker.append(xdsoft_copyright), 
            datepicker.append(mounth_picker).append(calendar).append(applyButton), $(options.parentID).append(datetimepicker), 
            XDSoft_datetime = function() {
                var _this = this;
                _this.now = function(norecursion) {
                    var date, time, d = new Date();
                    return !norecursion && options.defaultDate && (date = _this.strToDateTime(options.defaultDate), 
                    d.setFullYear(date.getFullYear()), d.setMonth(date.getMonth()), d.setDate(date.getDate())), 
                    options.yearOffset && d.setFullYear(d.getFullYear() + options.yearOffset), !norecursion && options.defaultTime && (time = _this.strtotime(options.defaultTime), 
                    d.setHours(time.getHours()), d.setMinutes(time.getMinutes())), d;
                }, _this.isValidDate = function(d) {
                    return "[object Date]" !== Object.prototype.toString.call(d) ? !1 : !isNaN(d.getTime());
                }, _this.setCurrentTime = function(dTime) {
                    _this.currentTime = "string" == typeof dTime ? _this.strToDateTime(dTime) : _this.isValidDate(dTime) ? dTime : _this.now(), 
                    datetimepicker.trigger("xchange.xdsoft");
                }, _this.empty = function() {
                    _this.currentTime = null;
                }, _this.getCurrentTime = function(dTime) {
                    return _this.currentTime;
                }, _this.nextMonth = function() {
                    (void 0 === _this.currentTime || null === _this.currentTime) && (_this.currentTime = _this.now());
                    var year, month = _this.currentTime.getMonth() + 1;
                    return 12 === month && (_this.currentTime.setFullYear(_this.currentTime.getFullYear() + 1), 
                    month = 0), year = _this.currentTime.getFullYear(), _this.currentTime.setDate(Math.min(new Date(_this.currentTime.getFullYear(), month + 1, 0).getDate(), _this.currentTime.getDate())), 
                    _this.currentTime.setMonth(month), options.onChangeMonth && $.isFunction(options.onChangeMonth) && options.onChangeMonth.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input")), 
                    year !== _this.currentTime.getFullYear() && $.isFunction(options.onChangeYear) && options.onChangeYear.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input")), 
                    datetimepicker.trigger("xchange.xdsoft"), month;
                }, _this.prevMonth = function() {
                    (void 0 === _this.currentTime || null === _this.currentTime) && (_this.currentTime = _this.now());
                    var month = _this.currentTime.getMonth() - 1;
                    return -1 === month && (_this.currentTime.setFullYear(_this.currentTime.getFullYear() - 1), 
                    month = 11), _this.currentTime.setDate(Math.min(new Date(_this.currentTime.getFullYear(), month + 1, 0).getDate(), _this.currentTime.getDate())), 
                    _this.currentTime.setMonth(month), options.onChangeMonth && $.isFunction(options.onChangeMonth) && options.onChangeMonth.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input")), 
                    datetimepicker.trigger("xchange.xdsoft"), month;
                }, _this.getWeekOfYear = function(datetime) {
                    var onejan = new Date(datetime.getFullYear(), 0, 1);
                    return Math.ceil(((datetime - onejan) / 864e5 + onejan.getDay() + 1) / 7);
                }, _this.strToDateTime = function(sDateTime) {
                    var timeOffset, currentTime, tmpDate = [];
                    return sDateTime && sDateTime instanceof Date && _this.isValidDate(sDateTime) ? sDateTime : (tmpDate = /^(\+|\-)(.*)$/.exec(sDateTime), 
                    tmpDate && (tmpDate[2] = Date.parseDate(tmpDate[2], options.formatDate)), tmpDate && tmpDate[2] ? (timeOffset = tmpDate[2].getTime() - 6e4 * tmpDate[2].getTimezoneOffset(), 
                    currentTime = new Date(_this.now(!0).getTime() + parseInt(tmpDate[1] + "1", 10) * timeOffset)) : currentTime = sDateTime ? Date.parseDate(sDateTime, options.format) : _this.now(), 
                    _this.isValidDate(currentTime) || (currentTime = _this.now()), currentTime);
                }, _this.strToDate = function(sDate) {
                    if (sDate && sDate instanceof Date && _this.isValidDate(sDate)) return sDate;
                    var currentTime = sDate ? Date.parseDate(sDate, options.formatDate) : _this.now(!0);
                    return _this.isValidDate(currentTime) || (currentTime = _this.now(!0)), currentTime;
                }, _this.strtotime = function(sTime) {
                    if (sTime && sTime instanceof Date && _this.isValidDate(sTime)) return sTime;
                    var currentTime = sTime ? Date.parseDate(sTime, options.formatTime) : _this.now(!0);
                    return _this.isValidDate(currentTime) || (currentTime = _this.now(!0)), currentTime;
                }, _this.str = function() {
                    return _this.currentTime.dateFormat(options.format);
                }, _this.currentTime = this.now();
            }, _xdsoft_datetime = new XDSoft_datetime(), applyButton.on("click", function(e) {
                //pathbrite
                e.preventDefault(), datetimepicker.data("changed", !0), _xdsoft_datetime.setCurrentTime(getCurrentValue()), 
                input.val(_xdsoft_datetime.str()), datetimepicker.trigger("close.xdsoft");
            }), mounth_picker.find(".xdsoft_today_button").on("mousedown.xdsoft", function() {
                datetimepicker.data("changed", !0), _xdsoft_datetime.setCurrentTime(0), datetimepicker.trigger("afterOpen.xdsoft");
            }).on("dblclick.xdsoft", function() {
                var currentDate = _xdsoft_datetime.getCurrentTime();
                currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
                var minDate = _xdsoft_datetime.strtodate(options.minDate);
                if (minDate = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate()), 
                !(minDate > currentDate)) {
                    var maxDate = _xdsoft_datetime.strtodate(options.maxDate);
                    maxDate = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate()), 
                    currentDate > maxDate || (input.val(_xdsoft_datetime.str()), datetimepicker.trigger("close.xdsoft"));
                }
            }), mounth_picker.find(".xdsoft_prev,.xdsoft_next").on("mousedown.xdsoft", function() {
                var $this = $(this), timer = 0, stop = !1;
                !function arguments_callee1(v) {
                    $this.hasClass(options.next) ? _xdsoft_datetime.nextMonth() : $this.hasClass(options.prev) && _xdsoft_datetime.prevMonth(), 
                    options.monthChangeSpinner && (stop || (timer = setTimeout(arguments_callee1, v || 100)));
                }(500), $([ document.body, window ]).on("mouseup.xdsoft", function arguments_callee2() {
                    clearTimeout(timer), stop = !0, $([ document.body, window ]).off("mouseup.xdsoft", arguments_callee2);
                });
            }), timepicker.find(".xdsoft_prev,.xdsoft_next").on("mousedown.xdsoft", function() {
                var $this = $(this), timer = 0, stop = !1, period = 110;
                !function arguments_callee4(v) {
                    var pheight = timeboxparent[0].clientHeight, height = timebox[0].offsetHeight, top = Math.abs(parseInt(timebox.css("marginTop"), 10));
                    $this.hasClass(options.next) && height - pheight - options.timeHeightInTimePicker >= top ? timebox.css("marginTop", "-" + (top + options.timeHeightInTimePicker) + "px") : $this.hasClass(options.prev) && top - options.timeHeightInTimePicker >= 0 && timebox.css("marginTop", "-" + (top - options.timeHeightInTimePicker) + "px"), 
                    timeboxparent.trigger("scroll_element.xdsoft_scroller", [ Math.abs(parseInt(timebox.css("marginTop"), 10) / (height - pheight)) ]), 
                    period = period > 10 ? 10 : period - 10, stop || (timer = setTimeout(arguments_callee4, v || period));
                }(500), $([ document.body, window ]).on("mouseup.xdsoft", function arguments_callee5() {
                    clearTimeout(timer), stop = !0, $([ document.body, window ]).off("mouseup.xdsoft", arguments_callee5);
                });
            }), xchangeTimer = 0, // base handler - generating a calendar and timepicker
            datetimepicker.on("xchange.xdsoft", function(event) {
                clearTimeout(xchangeTimer), xchangeTimer = setTimeout(function() {
                    (void 0 === _xdsoft_datetime.currentTime || null === _xdsoft_datetime.currentTime) && (_xdsoft_datetime.currentTime = _xdsoft_datetime.now());
                    for (var j, hDate, d, y, m, w, customDateSettings, line_time, description, table = "", start = new Date(_xdsoft_datetime.currentTime.getFullYear(), _xdsoft_datetime.currentTime.getMonth(), 1, 12, 0, 0), i = 0, today = _xdsoft_datetime.now(), maxDate = !1, minDate = !1, classes = [], newRow = !0, time = "", h = ""; start.getDay() !== options.dayOfWeekStart; ) start.setDate(start.getDate() - 1);
                    for (table += "<table><thead><tr>", options.weeks && (table += "<th></th>"), j = 0; 7 > j; j += 1) table += "<th>" + options.i18n[options.lang].dayOfWeek[(j + options.dayOfWeekStart) % 7] + "</th>";
                    for (table += "</tr></thead>", table += "<tbody>", options.maxDate !== !1 && (maxDate = _xdsoft_datetime.strToDate(options.maxDate), 
                    maxDate = new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 23, 59, 59, 999)), 
                    options.minDate !== !1 && (minDate = _xdsoft_datetime.strToDate(options.minDate), 
                    minDate = new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate())); i < _xdsoft_datetime.currentTime.countDaysInMonth() || start.getDay() !== options.dayOfWeekStart || _xdsoft_datetime.currentTime.getMonth() === start.getMonth(); ) classes = [], 
                    i += 1, d = start.getDate(), y = start.getFullYear(), m = start.getMonth(), w = _xdsoft_datetime.getWeekOfYear(start), 
                    description = "", classes.push("xdsoft_date"), customDateSettings = options.beforeShowDay && $.isFunction(options.beforeShowDay.call) ? options.beforeShowDay.call(datetimepicker, start) : null, 
                    maxDate !== !1 && start > maxDate || minDate !== !1 && minDate > start || customDateSettings && customDateSettings[0] === !1 ? classes.push("xdsoft_disabled") : -1 !== options.disabledDates.indexOf(start.dateFormat(options.formatDate)) && classes.push("xdsoft_disabled"), 
                    customDateSettings && "" !== customDateSettings[1] && classes.push(customDateSettings[1]), 
                    _xdsoft_datetime.currentTime.getMonth() !== m && classes.push("xdsoft_other_month"), 
                    (options.defaultSelect || datetimepicker.data("changed")) && _xdsoft_datetime.currentTime.dateFormat(options.formatDate) === start.dateFormat(options.formatDate) && classes.push("xdsoft_current"), 
                    today.dateFormat(options.formatDate) === start.dateFormat(options.formatDate) && classes.push("xdsoft_today"), 
                    (0 === start.getDay() || 6 === start.getDay() || -1 !== options.weekends.indexOf(start.dateFormat(options.formatDate))) && classes.push("xdsoft_weekend"), 
                    void 0 !== options.highlightedDates[start.dateFormat(options.formatDate)] && (hDate = options.highlightedDates[start.dateFormat(options.formatDate)], 
                    classes.push(void 0 === hDate.style ? "xdsoft_highlighted_default" : hDate.style), 
                    description = void 0 === hDate.desc ? "" : hDate.desc), options.beforeShowDay && $.isFunction(options.beforeShowDay) && classes.push(options.beforeShowDay(start)), 
                    newRow && (table += "<tr>", newRow = !1, options.weeks && (table += "<th>" + w + "</th>")), 
                    table += '<td data-date="' + d + '" data-month="' + m + '" data-year="' + y + '" class="xdsoft_date xdsoft_day_of_week' + start.getDay() + " " + classes.join(" ") + '" title="' + description + '"><div>' + d + "</div></td>", 
                    start.getDay() === options.dayOfWeekStartPrev && (table += "</tr>", newRow = !0), 
                    start.setDate(d + 1);
                    if (table += "</tbody></table>", calendar.html(table), mounth_picker.find(".xdsoft_label span").eq(0).text(options.i18n[options.lang].months[_xdsoft_datetime.currentTime.getMonth()]), 
                    mounth_picker.find(".xdsoft_label span").eq(1).text(_xdsoft_datetime.currentTime.getFullYear()), 
                    // generate timebox
                    time = "", h = "", m = "", line_time = function(h, m) {
                        var optionDateTime, current_time, now = _xdsoft_datetime.now();
                        now.setHours(h), h = parseInt(now.getHours(), 10), now.setMinutes(m), m = parseInt(now.getMinutes(), 10), 
                        optionDateTime = new Date(_xdsoft_datetime.currentTime), optionDateTime.setHours(h), 
                        optionDateTime.setMinutes(m), classes = [], (options.minDateTime !== !1 && options.minDateTime > optionDateTime || options.maxTime !== !1 && _xdsoft_datetime.strtotime(options.maxTime).getTime() < now.getTime() || options.minTime !== !1 && _xdsoft_datetime.strtotime(options.minTime).getTime() > now.getTime()) && classes.push("xdsoft_disabled"), 
                        current_time = new Date(_xdsoft_datetime.currentTime), current_time.setHours(parseInt(_xdsoft_datetime.currentTime.getHours(), 10)), 
                        current_time.setMinutes(Math[options.roundTime](_xdsoft_datetime.currentTime.getMinutes() / options.step) * options.step), 
                        (options.initTime || options.defaultSelect || datetimepicker.data("changed")) && current_time.getHours() === parseInt(h, 10) && (options.step > 59 || current_time.getMinutes() === parseInt(m, 10)) && (options.defaultSelect || datetimepicker.data("changed") ? classes.push("xdsoft_current") : options.initTime && classes.push("xdsoft_init_time")), 
                        parseInt(today.getHours(), 10) === parseInt(h, 10) && parseInt(today.getMinutes(), 10) === parseInt(m, 10) && classes.push("xdsoft_today"), 
                        time += '<div class="xdsoft_time ' + classes.join(" ") + '" data-hour="' + h + '" data-minute="' + m + '">' + now.dateFormat(options.formatTime) + "</div>";
                    }, options.allowTimes && $.isArray(options.allowTimes) && options.allowTimes.length) for (i = 0; i < options.allowTimes.length; i += 1) h = _xdsoft_datetime.strtotime(options.allowTimes[i]).getHours(), 
                    m = _xdsoft_datetime.strtotime(options.allowTimes[i]).getMinutes(), line_time(h, m); else for (i = 0, 
                    j = 0; i < (options.hours12 ? 12 : 24); i += 1) for (j = 0; 60 > j; j += options.step) h = (10 > i ? "0" : "") + i, 
                    m = (10 > j ? "0" : "") + j, line_time(h, m);
                    for (timebox.html(time), opt = "", i = 0, i = parseInt(options.yearStart, 10) + options.yearOffset; i <= parseInt(options.yearEnd, 10) + options.yearOffset; i += 1) opt += '<div class="xdsoft_option ' + (_xdsoft_datetime.currentTime.getFullYear() === i ? "xdsoft_current" : "") + '" data-value="' + i + '">' + i + "</div>";
                    for (yearselect.children().eq(0).html(opt), i = parseInt(options.monthStart, 10), 
                    opt = ""; i <= parseInt(options.monthEnd, 10); i += 1) opt += '<div class="xdsoft_option ' + (_xdsoft_datetime.currentTime.getMonth() === i ? "xdsoft_current" : "") + '" data-value="' + i + '">' + options.i18n[options.lang].months[i] + "</div>";
                    monthselect.children().eq(0).html(opt), $(datetimepicker).trigger("generate.xdsoft");
                }, 10), event.stopPropagation();
            }).on("afterOpen.xdsoft", function() {
                if (options.timepicker) {
                    var classType, pheight, height, top;
                    timebox.find(".xdsoft_current").length ? classType = ".xdsoft_current" : timebox.find(".xdsoft_init_time").length && (classType = ".xdsoft_init_time"), 
                    classType ? (pheight = timeboxparent[0].clientHeight, height = timebox[0].offsetHeight, 
                    top = timebox.find(classType).index() * options.timeHeightInTimePicker + 1, top > height - pheight && (top = height - pheight), 
                    timeboxparent.trigger("scroll_element.xdsoft_scroller", [ parseInt(top, 10) / (height - pheight) ])) : timeboxparent.trigger("scroll_element.xdsoft_scroller", [ 0 ]);
                }
            }), timerclick = 0, calendar.on("click.xdsoft", "td", function(xdevent) {
                xdevent.stopPropagation(), // Prevents closing of Pop-ups, Modals and Flyouts in Bootstrap
                timerclick += 1;
                var $this = $(this), currentTime = _xdsoft_datetime.currentTime;
                return (void 0 === currentTime || null === currentTime) && (_xdsoft_datetime.currentTime = _xdsoft_datetime.now(), 
                currentTime = _xdsoft_datetime.currentTime), $this.hasClass("xdsoft_disabled") ? !1 : (currentTime.setDate(1), 
                currentTime.setFullYear($this.data("year")), currentTime.setMonth($this.data("month")), 
                currentTime.setDate($this.data("date")), datetimepicker.trigger("select.xdsoft", [ currentTime ]), 
                input.val(_xdsoft_datetime.str()), (timerclick > 1 || options.closeOnDateSelect === !0 || 0 === options.closeOnDateSelect && !options.timepicker) && !options.inline && datetimepicker.trigger("close.xdsoft"), 
                options.onSelectDate && $.isFunction(options.onSelectDate) && options.onSelectDate.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input"), xdevent), 
                datetimepicker.data("changed", !0), datetimepicker.trigger("xchange.xdsoft"), datetimepicker.trigger("changedatetime.xdsoft"), 
                void setTimeout(function() {
                    timerclick = 0;
                }, 200));
            }), timebox.on("click.xdsoft", "div", function(xdevent) {
                xdevent.stopPropagation();
                var $this = $(this), currentTime = _xdsoft_datetime.currentTime;
                return (void 0 === currentTime || null === currentTime) && (_xdsoft_datetime.currentTime = _xdsoft_datetime.now(), 
                currentTime = _xdsoft_datetime.currentTime), $this.hasClass("xdsoft_disabled") ? !1 : (currentTime.setHours($this.data("hour")), 
                currentTime.setMinutes($this.data("minute")), datetimepicker.trigger("select.xdsoft", [ currentTime ]), 
                datetimepicker.data("input").val(_xdsoft_datetime.str()), options.inline !== !0 && options.closeOnTimeSelect === !0 && datetimepicker.trigger("close.xdsoft"), 
                options.onSelectTime && $.isFunction(options.onSelectTime) && options.onSelectTime.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input"), xdevent), 
                datetimepicker.data("changed", !0), datetimepicker.trigger("xchange.xdsoft"), void datetimepicker.trigger("changedatetime.xdsoft"));
            }), datepicker.on("mousewheel.xdsoft", function(event) {
                return options.scrollMonth ? (event.deltaY < 0 ? _xdsoft_datetime.nextMonth() : _xdsoft_datetime.prevMonth(), 
                !1) : !0;
            }), input.on("mousewheel.xdsoft", function(event) {
                return options.scrollInput ? !options.datepicker && options.timepicker ? (current_time_index = timebox.find(".xdsoft_current").length ? timebox.find(".xdsoft_current").eq(0).index() : 0, 
                current_time_index + event.deltaY >= 0 && current_time_index + event.deltaY < timebox.children().length && (current_time_index += event.deltaY), 
                timebox.children().eq(current_time_index).length && timebox.children().eq(current_time_index).trigger("mousedown"), 
                !1) : options.datepicker && !options.timepicker ? (datepicker.trigger(event, [ event.deltaY, event.deltaX, event.deltaY ]), 
                input.val && input.val(_xdsoft_datetime.str()), datetimepicker.trigger("changedatetime.xdsoft"), 
                !1) : void 0 : !0;
            }), datetimepicker.on("changedatetime.xdsoft", function(event) {
                if (options.onChangeDateTime && $.isFunction(options.onChangeDateTime)) {
                    var $input = datetimepicker.data("input");
                    options.onChangeDateTime.call(datetimepicker, _xdsoft_datetime.currentTime, $input, event), 
                    delete options.value, $input.trigger("change");
                }
            }).on("generate.xdsoft", function() {
                options.onGenerate && $.isFunction(options.onGenerate) && options.onGenerate.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input")), 
                triggerAfterOpen && (datetimepicker.trigger("afterOpen.xdsoft"), triggerAfterOpen = !1);
            }).on("click.xdsoft", function(xdevent) {
                xdevent.stopPropagation();
            }), current_time_index = 0, setPos = function() {
                var offset = datetimepicker.data("input").offset(), top = offset.top + datetimepicker.data("input")[0].offsetHeight - 1, left = offset.left, position = "absolute";
                options.fixed ? (top -= $(window).scrollTop(), left -= $(window).scrollLeft(), position = "fixed") : (top + datetimepicker[0].offsetHeight > $(window).height() + $(window).scrollTop() && (top = offset.top - datetimepicker[0].offsetHeight + 1), 
                0 > top && (top = 0), left + datetimepicker[0].offsetWidth > $(window).width() && (left = $(window).width() - datetimepicker[0].offsetWidth)), 
                datetimepicker.css({
                    left: left,
                    top: top,
                    position: position
                });
            }, datetimepicker.on("open.xdsoft", function(event) {
                var onShow = !0;
                options.onShow && $.isFunction(options.onShow) && (onShow = options.onShow.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input"), event)), 
                onShow !== !1 && (datetimepicker.show(), setPos(), $(window).off("resize.xdsoft", setPos).on("resize.xdsoft", setPos), 
                options.closeOnWithoutClick && $([ document.body, window ]).on("mousedown.xdsoft", function arguments_callee6() {
                    datetimepicker.trigger("close.xdsoft"), $([ document.body, window ]).off("mousedown.xdsoft", arguments_callee6);
                }));
            }).on("close.xdsoft", function(event) {
                var onClose = !0;
                mounth_picker.find(".xdsoft_month,.xdsoft_year").find(".xdsoft_select").hide(), 
                options.onClose && $.isFunction(options.onClose) && (onClose = options.onClose.call(datetimepicker, _xdsoft_datetime.currentTime, datetimepicker.data("input"), event)), 
                onClose === !1 || options.opened || options.inline || datetimepicker.hide(), event.stopPropagation();
            }).on("toggle.xdsoft", function(event) {
                datetimepicker.is(":visible") ? datetimepicker.trigger("close.xdsoft") : datetimepicker.trigger("open.xdsoft");
            }).data("input", input), timer = 0, timer1 = 0, datetimepicker.data("xdsoft_datetime", _xdsoft_datetime), 
            datetimepicker.setOptions(options), _xdsoft_datetime.setCurrentTime(getCurrentValue()), 
            input.data("xdsoft_datetimepicker", datetimepicker).on("open.xdsoft focusin.xdsoft mousedown.xdsoft", function(event) {
                input.is(":disabled") || input.data("xdsoft_datetimepicker").is(":visible") && options.closeOnInputClick || (clearTimeout(timer), 
                timer = setTimeout(function() {
                    input.is(":disabled") || (triggerAfterOpen = !0, _xdsoft_datetime.setCurrentTime(getCurrentValue()), 
                    datetimepicker.trigger("open.xdsoft"));
                }, 100));
            }).on("keydown.xdsoft", function(event) {
                var elementSelector, key = (this.value, event.which);
                return -1 !== [ ENTER ].indexOf(key) && options.enterLikeTab ? (elementSelector = $("input:visible,textarea:visible"), 
                datetimepicker.trigger("close.xdsoft"), elementSelector.eq(elementSelector.index(this) + 1).focus(), 
                !1) : -1 !== [ TAB ].indexOf(key) ? (datetimepicker.trigger("close.xdsoft"), !0) : void 0;
            });
        }, destroyDateTimePicker = function(input) {
            var datetimepicker = input.data("xdsoft_datetimepicker");
            datetimepicker && (datetimepicker.data("xdsoft_datetime", null), datetimepicker.remove(), 
            input.data("xdsoft_datetimepicker", null).off(".xdsoft"), $(window).off("resize.xdsoft"), 
            $([ window, document.body ]).off("mousedown.xdsoft"), input.unmousewheel && input.unmousewheel());
        }, $(document).off("keydown.xdsoftctrl keyup.xdsoftctrl").on("keydown.xdsoftctrl", function(e) {
            e.keyCode === CTRLKEY && (ctrlDown = !0);
        }).on("keyup.xdsoftctrl", function(e) {
            e.keyCode === CTRLKEY && (ctrlDown = !1);
        }), this.each(function() {
            var $input, datetimepicker = $(this).data("xdsoft_datetimepicker");
            if (datetimepicker) {
                if ("string" === $.type(opt)) switch (opt) {
                  case "show":
                    $(this).select().focus(), datetimepicker.trigger("open.xdsoft");
                    break;

                  case "hide":
                    datetimepicker.trigger("close.xdsoft");
                    break;

                  case "toggle":
                    datetimepicker.trigger("toggle.xdsoft");
                    break;

                  case "destroy":
                    destroyDateTimePicker($(this));
                    break;

                  case "reset":
                    this.value = this.defaultValue, this.value && datetimepicker.data("xdsoft_datetime").isValidDate(Date.parseDate(this.value, options.format)) || datetimepicker.data("changed", !1), 
                    datetimepicker.data("xdsoft_datetime").setCurrentTime(this.value);
                    break;

                  case "validate":
                    $input = datetimepicker.data("input"), $input.trigger("blur.xdsoft");
                } else datetimepicker.setOptions(opt);
                return 0;
            }
            "string" !== $.type(opt) && (!options.lazyInit || options.open || options.inline ? createDateTimePicker($(this)) : lazyInit($(this)));
        });
    }, $.fn.datetimepicker.defaults = default_options;
}(jQuery), function() {
    /*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Version: 3.1.12
 *
 * Requires: jQuery 1.2.2+
 */
    !function(a) {
        "function" == typeof define && define.amd ? define([ "jquery" ], a) : "object" == typeof exports ? module.exports = a : a(jQuery);
    }(function(a) {
        function b(b) {
            var g = b || window.event, h = i.call(arguments, 1), j = 0, l = 0, m = 0, n = 0, o = 0, p = 0;
            if (b = a.event.fix(g), b.type = "mousewheel", "detail" in g && (m = -1 * g.detail), 
            "wheelDelta" in g && (m = g.wheelDelta), "wheelDeltaY" in g && (m = g.wheelDeltaY), 
            "wheelDeltaX" in g && (l = -1 * g.wheelDeltaX), "axis" in g && g.axis === g.HORIZONTAL_AXIS && (l = -1 * m, 
            m = 0), j = 0 === m ? l : m, "deltaY" in g && (m = -1 * g.deltaY, j = m), "deltaX" in g && (l = g.deltaX, 
            0 === m && (j = -1 * l)), 0 !== m || 0 !== l) {
                if (1 === g.deltaMode) {
                    var q = a.data(this, "mousewheel-line-height");
                    j *= q, m *= q, l *= q;
                } else if (2 === g.deltaMode) {
                    var r = a.data(this, "mousewheel-page-height");
                    j *= r, m *= r, l *= r;
                }
                if (n = Math.max(Math.abs(m), Math.abs(l)), (!f || f > n) && (f = n, d(g, n) && (f /= 40)), 
                d(g, n) && (j /= 40, l /= 40, m /= 40), j = Math[j >= 1 ? "floor" : "ceil"](j / f), 
                l = Math[l >= 1 ? "floor" : "ceil"](l / f), m = Math[m >= 1 ? "floor" : "ceil"](m / f), 
                k.settings.normalizeOffset && this.getBoundingClientRect) {
                    var s = this.getBoundingClientRect();
                    o = b.clientX - s.left, p = b.clientY - s.top;
                }
                return b.deltaX = l, b.deltaY = m, b.deltaFactor = f, b.offsetX = o, b.offsetY = p, 
                b.deltaMode = 0, h.unshift(b, j, l, m), e && clearTimeout(e), e = setTimeout(c, 200), 
                (a.event.dispatch || a.event.handle).apply(this, h);
            }
        }
        function c() {
            f = null;
        }
        function d(a, b) {
            return k.settings.adjustOldDeltas && "mousewheel" === a.type && b % 120 === 0;
        }
        var e, f, g = [ "wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll" ], h = "onwheel" in document || document.documentMode >= 9 ? [ "wheel" ] : [ "mousewheel", "DomMouseScroll", "MozMousePixelScroll" ], i = Array.prototype.slice;
        if (a.event.fixHooks) for (var j = g.length; j; ) a.event.fixHooks[g[--j]] = a.event.mouseHooks;
        var k = a.event.special.mousewheel = {
            version: "3.1.12",
            setup: function() {
                if (this.addEventListener) for (var c = h.length; c; ) this.addEventListener(h[--c], b, !1); else this.onmousewheel = b;
                a.data(this, "mousewheel-line-height", k.getLineHeight(this)), a.data(this, "mousewheel-page-height", k.getPageHeight(this));
            },
            teardown: function() {
                if (this.removeEventListener) for (var c = h.length; c; ) this.removeEventListener(h[--c], b, !1); else this.onmousewheel = null;
                a.removeData(this, "mousewheel-line-height"), a.removeData(this, "mousewheel-page-height");
            },
            getLineHeight: function(b) {
                var c = a(b), d = c["offsetParent" in a.fn ? "offsetParent" : "parent"]();
                return d.length || (d = a("body")), parseInt(d.css("fontSize"), 10) || parseInt(c.css("fontSize"), 10) || 16;
            },
            getPageHeight: function(b) {
                return a(b).height();
            },
            settings: {
                adjustOldDeltas: !0,
                normalizeOffset: !0
            }
        };
        a.fn.extend({
            mousewheel: function(a) {
                return a ? this.bind("mousewheel", a) : this.trigger("mousewheel");
            },
            unmousewheel: function(a) {
                return this.unbind("mousewheel", a);
            }
        });
    }), // Parse and Format Library
    //http://www.xaprb.com/blog/2005/12/12/javascript-closures-for-runtime-efficiency/
    /*
 * Copyright (C) 2004 Baron Schwartz <baron at sequent dot org>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, version 2.1.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 */
    Date.parseFunctions = {
        count: 0
    }, Date.parseRegexes = [], Date.formatFunctions = {
        count: 0
    }, Date.prototype.dateFormat = function(b) {
        if ("unixtime" == b) return parseInt(this.getTime() / 1e3);
        null == Date.formatFunctions[b] && Date.createNewFormat(b);
        var a = Date.formatFunctions[b];
        return this[a]();
    }, Date.createNewFormat = function(format) {
        var funcName = "format" + Date.formatFunctions.count++;
        Date.formatFunctions[format] = funcName;
        for (var codePrefix = "Date.prototype." + funcName + " = function() {return ", code = "", special = !1, ch = "", i = 0; i < format.length; ++i) ch = format.charAt(i), 
        special || "\\" != ch ? special ? (special = !1, code += "'" + String.escape(ch) + "' + ") : code += Date.getFormatCode(ch) : special = !0;
        code = 0 == code.length ? '""' : code.substring(0, code.length - 3), eval(codePrefix + code + ";}");
    }, Date.getFormatCode = function(a) {
        switch (a) {
          case "d":
            return "String.leftPad(this.getDate(), 2, '0') + ";

          case "D":
            return "Date.dayNames[this.getDay()].substring(0, 3) + ";

          case "j":
            return "this.getDate() + ";

          case "l":
            return "Date.dayNames[this.getDay()] + ";

          case "S":
            return "this.getSuffix() + ";

          case "w":
            return "this.getDay() + ";

          case "z":
            return "this.getDayOfYear() + ";

          case "W":
            return "this.getWeekOfYear() + ";

          case "F":
            return "Date.monthNames[this.getMonth()] + ";

          case "m":
            return "String.leftPad(this.getMonth() + 1, 2, '0') + ";

          case "M":
            return "Date.monthNames[this.getMonth()].substring(0, 3) + ";

          case "n":
            return "(this.getMonth() + 1) + ";

          case "t":
            return "this.getDaysInMonth() + ";

          case "L":
            return "(this.isLeapYear() ? 1 : 0) + ";

          case "Y":
            return "this.getFullYear() + ";

          case "y":
            return "('' + this.getFullYear()).substring(2, 4) + ";

          case "a":
            return "(this.getHours() < 12 ? 'am' : 'pm') + ";

          case "A":
            return "(this.getHours() < 12 ? 'AM' : 'PM') + ";

          case "g":
            return "((this.getHours() %12) ? this.getHours() % 12 : 12) + ";

          case "G":
            return "this.getHours() + ";

          case "h":
            return "String.leftPad((this.getHours() %12) ? this.getHours() % 12 : 12, 2, '0') + ";

          case "H":
            return "String.leftPad(this.getHours(), 2, '0') + ";

          case "i":
            return "String.leftPad(this.getMinutes(), 2, '0') + ";

          case "s":
            return "String.leftPad(this.getSeconds(), 2, '0') + ";

          case "O":
            return "this.getGMTOffset() + ";

          case "T":
            return "this.getTimezone() + ";

          case "Z":
            return "(this.getTimezoneOffset() * -60) + ";

          default:
            return "'" + String.escape(a) + "' + ";
        }
    }, Date.parseDate = function(a, c) {
        if ("unixtime" == c) return new Date(isNaN(parseInt(a)) ? 0 : 1e3 * parseInt(a));
        null == Date.parseFunctions[c] && Date.createParser(c);
        var b = Date.parseFunctions[c];
        return Date[b](a);
    }, Date.createParser = function(format) {
        var funcName = "parse" + Date.parseFunctions.count++, regexNum = Date.parseRegexes.length, currentGroup = 1;
        Date.parseFunctions[format] = funcName;
        for (var code = "Date." + funcName + " = function(input) {\nvar y = -1, m = -1, d = -1, h = -1, i = -1, s = -1, z = -1;\nvar d = new Date();\ny = d.getFullYear();\nm = d.getMonth();\nd = d.getDate();\nvar results = input.match(Date.parseRegexes[" + regexNum + "]);\nif (results && results.length > 0) {", regex = "", special = !1, ch = "", i = 0; i < format.length; ++i) ch = format.charAt(i), 
        special || "\\" != ch ? special ? (special = !1, regex += String.escape(ch)) : (obj = Date.formatCodeToRegex(ch, currentGroup), 
        currentGroup += obj.g, regex += obj.s, obj.g && obj.c && (code += obj.c)) : special = !0;
        code += "if (y > 0 && z > 0){\nvar doyDate = new Date(y,0);\ndoyDate.setDate(z);\nm = doyDate.getMonth();\nd = doyDate.getDate();\n}", 
        code += "if (y > 0 && m >= 0 && d > 0 && h >= 0 && i >= 0 && s >= 0)\n{return new Date(y, m, d, h, i, s);}\nelse if (y > 0 && m >= 0 && d > 0 && h >= 0 && i >= 0)\n{return new Date(y, m, d, h, i);}\nelse if (y > 0 && m >= 0 && d > 0 && h >= 0)\n{return new Date(y, m, d, h);}\nelse if (y > 0 && m >= 0 && d > 0)\n{return new Date(y, m, d);}\nelse if (y > 0 && m >= 0)\n{return new Date(y, m);}\nelse if (y > 0)\n{return new Date(y);}\n}return null;}", 
        Date.parseRegexes[regexNum] = new RegExp("^" + regex + "$", "i"), eval(code);
    }, Date.formatCodeToRegex = function(b, a) {
        switch (b) {
          case "D":
            return {
                g: 0,
                c: null,
                s: "(?:Sun|Mon|Tue|Wed|Thu|Fri|Sat)"
            };

          case "j":
          case "d":
            return {
                g: 1,
                c: "d = parseInt(results[" + a + "], 10);\n",
                s: "(\\d{1,2})"
            };

          case "l":
            return {
                g: 0,
                c: null,
                s: "(?:" + Date.dayNames.join("|") + ")"
            };

          case "S":
            return {
                g: 0,
                c: null,
                s: "(?:st|nd|rd|th)"
            };

          case "w":
            return {
                g: 0,
                c: null,
                s: "\\d"
            };

          case "z":
            return {
                g: 1,
                c: "z = parseInt(results[" + a + "], 10);\n",
                s: "(\\d{1,3})"
            };

          case "W":
            return {
                g: 0,
                c: null,
                s: "(?:\\d{2})"
            };

          case "F":
            return {
                g: 1,
                c: "m = parseInt(Date.monthNumbers[results[" + a + "].substring(0, 3)], 10);\n",
                s: "(" + Date.monthNames.join("|") + ")"
            };

          case "M":
            return {
                g: 1,
                c: "m = parseInt(Date.monthNumbers[results[" + a + "]], 10);\n",
                s: "(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)"
            };

          case "n":
          case "m":
            return {
                g: 1,
                c: "m = parseInt(results[" + a + "], 10) - 1;\n",
                s: "(\\d{1,2})"
            };

          case "t":
            return {
                g: 0,
                c: null,
                s: "\\d{1,2}"
            };

          case "L":
            return {
                g: 0,
                c: null,
                s: "(?:1|0)"
            };

          case "Y":
            return {
                g: 1,
                c: "y = parseInt(results[" + a + "], 10);\n",
                s: "(\\d{4})"
            };

          case "y":
            return {
                g: 1,
                c: "var ty = parseInt(results[" + a + "], 10);\ny = ty > Date.y2kYear ? 1900 + ty : 2000 + ty;\n",
                s: "(\\d{1,2})"
            };

          case "a":
            return {
                g: 1,
                c: "if (results[" + a + "] == 'am') {\nif (h == 12) { h = 0; }\n} else { if (h < 12) { h += 12; }}",
                s: "(am|pm)"
            };

          case "A":
            return {
                g: 1,
                c: "if (results[" + a + "] == 'AM') {\nif (h == 12) { h = 0; }\n} else { if (h < 12) { h += 12; }}",
                s: "(AM|PM)"
            };

          case "g":
          case "G":
          case "h":
          case "H":
            return {
                g: 1,
                c: "h = parseInt(results[" + a + "], 10);\n",
                s: "(\\d{1,2})"
            };

          case "i":
            return {
                g: 1,
                c: "i = parseInt(results[" + a + "], 10);\n",
                s: "(\\d{2})"
            };

          case "s":
            return {
                g: 1,
                c: "s = parseInt(results[" + a + "], 10);\n",
                s: "(\\d{2})"
            };

          case "O":
            return {
                g: 0,
                c: null,
                s: "[+-]\\d{4}"
            };

          case "T":
            return {
                g: 0,
                c: null,
                s: "[A-Z]{3}"
            };

          case "Z":
            return {
                g: 0,
                c: null,
                s: "[+-]\\d{1,5}"
            };

          default:
            return {
                g: 0,
                c: null,
                s: String.escape(b)
            };
        }
    }, Date.prototype.getTimezone = function() {
        return this.toString().replace(/^.*? ([A-Z]{3}) [0-9]{4}.*$/, "$1").replace(/^.*?\(([A-Z])[a-z]+ ([A-Z])[a-z]+ ([A-Z])[a-z]+\)$/, "$1$2$3");
    }, Date.prototype.getGMTOffset = function() {
        return (this.getTimezoneOffset() > 0 ? "-" : "+") + String.leftPad(Math.floor(Math.abs(this.getTimezoneOffset()) / 60), 2, "0") + String.leftPad(Math.abs(this.getTimezoneOffset()) % 60, 2, "0");
    }, Date.prototype.getDayOfYear = function() {
        var a = 0;
        Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;
        for (var b = 0; b < this.getMonth(); ++b) a += Date.daysInMonth[b];
        return a + this.getDate();
    }, Date.prototype.getWeekOfYear = function() {
        var b = this.getDayOfYear() + (4 - this.getDay()), a = new Date(this.getFullYear(), 0, 1), c = 7 - a.getDay() + 4;
        return String.leftPad(Math.ceil((b - c) / 7) + 1, 2, "0");
    }, Date.prototype.isLeapYear = function() {
        var a = this.getFullYear();
        return 0 == (3 & a) && (a % 100 || a % 400 == 0 && a);
    }, Date.prototype.getFirstDayOfMonth = function() {
        var a = (this.getDay() - (this.getDate() - 1)) % 7;
        return 0 > a ? a + 7 : a;
    }, Date.prototype.getLastDayOfMonth = function() {
        var a = (this.getDay() + (Date.daysInMonth[this.getMonth()] - this.getDate())) % 7;
        return 0 > a ? a + 7 : a;
    }, Date.prototype.getDaysInMonth = function() {
        return Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28, Date.daysInMonth[this.getMonth()];
    }, Date.prototype.getSuffix = function() {
        switch (this.getDate()) {
          case 1:
          case 21:
          case 31:
            return "st";

          case 2:
          case 22:
            return "nd";

          case 3:
          case 23:
            return "rd";

          default:
            return "th";
        }
    }, String.escape = function(a) {
        return a.replace(/('|\\)/g, "\\$1");
    }, String.leftPad = function(d, b, c) {
        var a = new String(d);
        for (null == c && (c = " "); a.length < b; ) a = c + a;
        return a;
    }, Date.daysInMonth = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ], Date.monthNames = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ], 
    Date.dayNames = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ], 
    Date.y2kYear = 50, Date.monthNumbers = {
        Jan: 0,
        Feb: 1,
        Mar: 2,
        Apr: 3,
        May: 4,
        Jun: 5,
        Jul: 6,
        Aug: 7,
        Sep: 8,
        Oct: 9,
        Nov: 10,
        Dec: 11
    }, Date.patterns = {
        ISO8601LongPattern: "Y-m-d H:i:s",
        ISO8601ShortPattern: "Y-m-d",
        ShortDatePattern: "n/j/Y",
        LongDatePattern: "l, F d, Y",
        FullDateTimePattern: "l, F d, Y g:i:s A",
        MonthDayPattern: "F d",
        ShortTimePattern: "g:i A",
        LongTimePattern: "g:i:s A",
        SortableDateTimePattern: "Y-m-d\\TH:i:s",
        UniversalSortableDateTimePattern: "Y-m-d H:i:sO",
        YearMonthPattern: "F, Y"
    };
}(), /**
 * jquery.switchButton.js v1.0
 * jQuery iPhone-like switch button
 * @author Olivier Lance <olivier.lance@sylights.com>
 *
 * Copyright (c) Olivier Lance - released under MIT License {{{
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:

 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.

 * }}}
 */
/*
 * Meant to be used on a <input type="checkbox">, this widget will replace the receiver element with an iPhone-style
 * switch button with two states: "on" and "off".
 * Labels of the states are customizable, as are their presence and position. The receiver element's "checked" attribute
 * is updated according to the state of the switch, so that it can be used in a <form>.
 *
 */
function($) {
    $.widget("sylightsUI.switchButton", {
        options: {
            checked: void 0,
            // State of the switch
            show_labels: !0,
            // Should we show the on and off labels?
            labels_placement: "both",
            // Position of the labels: "both", "left" or "right"
            on_label: "ON",
            // Text to be displayed when checked
            off_label: "OFF",
            // Text to be displayed when unchecked
            width: 25,
            // Width of the button in pixels
            height: 11,
            // Height of the button in pixels
            button_width: 12,
            // Width of the sliding part in pixels
            clear: !0,
            // Should we insert a div with style="clear: both;" after the switch button?
            clear_after: null,
            // Override the element after which the clearing div should be inserted (null > right after the button)
            on_callback: void 0,
            //callback function that will be executed after going to on state
            off_callback: void 0
        },
        _create: function() {
            // Init the switch from the checkbox if no state was specified on creation
            void 0 === this.options.checked && (this.options.checked = this.element.prop("checked")), 
            this._initLayout(), this._initEvents();
        },
        _initLayout: function() {
            // Hide the receiver element
            this.element.hide(), // Create our objects: two labels and the button
            this.off_label = $("<span>").addClass("switch-button-label"), this.on_label = $("<span>").addClass("switch-button-label"), 
            this.button_bg = $("<div>").addClass("switch-button-background"), this.button = $("<div>").addClass("switch-button-button"), 
            // Insert the objects into the DOM
            this.off_label.insertAfter(this.element), this.button_bg.insertAfter(this.off_label), 
            this.on_label.insertAfter(this.button_bg), this.button_bg.append(this.button), // Insert a clearing element after the specified element if needed
            this.options.clear && (null === this.options.clear_after && (this.options.clear_after = this.on_label), 
            $("<div>").css({
                clear: "left"
            }).insertAfter(this.options.clear_after)), // Call refresh to update labels text and visibility
            this._refresh(), // Init labels and switch state
            // This will animate all checked switches to the ON position when
            // loading... this is intentional!
            this.options.checked = !this.options.checked, this._toggleSwitch();
        },
        _refresh: function() {
            // Move labels around depending on labels_placement option
            switch (// Refresh labels display
            this.options.show_labels ? (this.off_label.show(), this.on_label.show()) : (this.off_label.hide(), 
            this.on_label.hide()), this.options.labels_placement) {
              case "both":
                // Don't move anything if labels are already in place
                (this.button_bg.prev() !== this.off_label || this.button_bg.next() !== this.on_label) && (// Detach labels form DOM and place them correctly
                this.off_label.detach(), this.on_label.detach(), this.off_label.insertBefore(this.button_bg), 
                this.on_label.insertAfter(this.button_bg), // Update label classes
                this.on_label.addClass(this.options.checked ? "on" : "off").removeClass(this.options.checked ? "off" : "on"), 
                this.off_label.addClass(this.options.checked ? "off" : "on").removeClass(this.options.checked ? "on" : "off"));
                break;

              case "left":
                // Don't move anything if labels are already in place
                (this.button_bg.prev() !== this.on_label || this.on_label.prev() !== this.off_label) && (// Detach labels form DOM and place them correctly
                this.off_label.detach(), this.on_label.detach(), this.off_label.insertBefore(this.button_bg), 
                this.on_label.insertBefore(this.button_bg), // update label classes
                this.on_label.addClass("on").removeClass("off"), this.off_label.addClass("off").removeClass("on"));
                break;

              case "right":
                // Don't move anything if labels are already in place
                (this.button_bg.next() !== this.off_label || this.off_label.next() !== this.on_label) && (// Detach labels form DOM and place them correctly
                this.off_label.detach(), this.on_label.detach(), this.off_label.insertAfter(this.button_bg), 
                this.on_label.insertAfter(this.off_label), // update label classes
                this.on_label.addClass("on").removeClass("off"), this.off_label.addClass("off").removeClass("on"));
            }
            // Refresh labels texts
            this.on_label.html(this.options.on_label), this.off_label.html(this.options.off_label), 
            // Refresh button's dimensions
            this.button_bg.width(this.options.width), this.button_bg.height(this.options.height), 
            this.button.width(this.options.button_width), this.button.height(this.options.height);
        },
        _initEvents: function() {
            var self = this;
            // Toggle switch when the switch is clicked
            this.button_bg.click(function(e) {
                return e.preventDefault(), e.stopPropagation(), self._toggleSwitch(), !1;
            }), this.button.click(function(e) {
                return e.preventDefault(), e.stopPropagation(), self._toggleSwitch(), !1;
            }), // Set switch value when clicking labels
            this.on_label.click(function(e) {
                return self.options.checked && "both" === self.options.labels_placement ? !1 : (self._toggleSwitch(), 
                !1);
            }), this.off_label.click(function(e) {
                return self.options.checked || "both" !== self.options.labels_placement ? (self._toggleSwitch(), 
                !1) : !1;
            });
        },
        _setOption: function(key, value) {
            return "checked" === key ? void this._setChecked(value) : (this.options[key] = value, 
            void this._refresh());
        },
        _setChecked: function(value) {
            value !== this.options.checked && (this.options.checked = !value, this._toggleSwitch());
        },
        _toggleSwitch: function() {
            this.options.checked = !this.options.checked;
            var newLeft = "";
            if (this.options.checked) {
                // Update the underlying checkbox state
                this.element.prop("checked", !0), this.element.change();
                var dLeft = this.options.width - this.options.button_width;
                newLeft = "+=" + dLeft, // Update labels states
                "both" == this.options.labels_placement ? (this.off_label.removeClass("on").addClass("off"), 
                this.on_label.removeClass("off").addClass("on")) : (this.off_label.hide(), this.on_label.show()), 
                this.button_bg.addClass("checked"), //execute on state callback if its supplied
                "function" == typeof this.options.on_callback && this.options.on_callback.call(this);
            } else // Update the underlying checkbox state
            this.element.prop("checked", !1), this.element.change(), newLeft = "-1px", // Update labels states
            "both" == this.options.labels_placement ? (this.off_label.removeClass("off").addClass("on"), 
            this.on_label.removeClass("on").addClass("off")) : (this.off_label.show(), this.on_label.hide()), 
            this.button_bg.removeClass("checked"), //execute off state callback if its supplied
            "function" == typeof this.options.off_callback && this.options.off_callback.call(this);
            // Animate the switch
            this.button.animate({
                left: newLeft
            }, 250, "easeInOutCubic");
        }
    });
}(jQuery), function($, window, document) {
    function Plugin(element, options) {
        // list of instance variables
        this.bodyOverflowX, // stack of custom callbacks provided as parameters to API methods
        this.callbacks = {
            hide: [],
            show: []
        }, this.checkInterval = null, // this will be the user content shown in the tooltip. A capital "C" is used because there is also a method called content()
        this.Content, // this is the original element which is being applied the tooltipster plugin
        this.$el = $(element), // this will be the element which triggers the appearance of the tooltip on hover/click/custom events.
        // it will be the same as this.$el if icons are not used (see in the options), otherwise it will correspond to the created icon
        this.$elProxy, this.elProxyPosition, this.enabled = !0, this.options = $.extend({}, defaults, options), 
        this.mouseIsOverProxy = !1, // a unique namespace per instance, for easy selective unbinding
        this.namespace = "tooltipster-" + Math.round(1e5 * Math.random()), // Status (capital S) can be either : appearing, shown, disappearing, hidden
        this.Status = "hidden", this.timerHide = null, this.timerShow = null, // this will be the tooltip element (jQuery wrapped HTML element)
        this.$tooltip, // for backward compatibility
        this.options.iconTheme = this.options.iconTheme.replace(".", ""), this.options.theme = this.options.theme.replace(".", ""), 
        // launch
        this._init();
    }
    // quick & dirty compare function (not bijective nor multidimensional)
    function areEqual(a, b) {
        var same = !0;
        return $.each(a, function(i, el) {
            return "undefined" == typeof b[i] || a[i] !== b[i] ? (same = !1, !1) : void 0;
        }), same;
    }
    function deviceIsPureTouch() {
        return !deviceHasMouse && deviceHasTouchCapability;
    }
    // detecting support for CSS transitions
    function supportsTransitions() {
        var b = document.body || document.documentElement, s = b.style, p = "transition";
        if ("string" == typeof s[p]) return !0;
        v = [ "Moz", "Webkit", "Khtml", "O", "ms" ], p = p.charAt(0).toUpperCase() + p.substr(1);
        for (var i = 0; i < v.length; i++) if ("string" == typeof s[v[i] + p]) return !0;
        return !1;
    }
    var pluginName = "tooltipster", defaults = {
        animation: "fade",
        arrow: !0,
        arrowColor: "",
        autoClose: !0,
        content: null,
        contentAsHTML: !1,
        contentCloning: !0,
        debug: !0,
        delay: 200,
        minWidth: 0,
        maxWidth: null,
        functionInit: function(origin, content) {},
        functionBefore: function(origin, continueTooltip) {
            continueTooltip();
        },
        functionReady: function(origin, tooltip) {},
        functionAfter: function(origin) {},
        hideOnClick: !1,
        icon: "(?)",
        iconCloning: !0,
        iconDesktop: !1,
        iconTouch: !1,
        iconTheme: "tooltipster-icon",
        interactive: !1,
        interactiveTolerance: 350,
        multiple: !1,
        offsetX: 0,
        offsetY: 0,
        onlyOne: !1,
        position: "top",
        positionTracker: !1,
        positionTrackerCallback: function(origin) {
            // the default tracker callback will close the tooltip when the trigger is
            // 'hover' (see https://github.com/iamceege/tooltipster/pull/253)
            "hover" == this.option("trigger") && this.option("autoClose") && this.hide();
        },
        restoration: "current",
        speed: 350,
        timer: 0,
        theme: "tooltipster-default",
        touchDevices: !0,
        trigger: "hover",
        updateAnimation: !0
    };
    Plugin.prototype = {
        _init: function() {
            var self = this;
            // disable the plugin on old browsers (including IE7 and lower)
            if (document.querySelector) {
                // note : the content is null (empty) by default and can stay that way if the plugin remains initialized but not fed any content. The tooltip will just not appear.
                // let's save the initial value of the title attribute for later restoration if need be.
                var initialTitle = null;
                // it will already have been saved in case of multiple tooltips
                void 0 === self.$el.data("tooltipster-initialTitle") && (initialTitle = self.$el.attr("title"), 
                // we do not want initialTitle to have the value "undefined" because of how jQuery's .data() method works
                void 0 === initialTitle && (initialTitle = null), self.$el.data("tooltipster-initialTitle", initialTitle)), 
                // if content is provided in the options, its has precedence over the title attribute.
                // Note : an empty string is considered content, only 'null' represents the absence of content.
                // Also, an existing title="" attribute will result in an empty string content
                null !== self.options.content ? self._content_set(self.options.content) : self._content_set(initialTitle);
                var c = self.options.functionInit.call(self.$el, self.$el, self.Content);
                "undefined" != typeof c && self._content_set(c), self.$el.removeAttr("title").addClass("tooltipstered"), 
                // detect if we're changing the tooltip origin to an icon
                // note about this condition : if the device has touch capability and self.options.iconTouch is false, you'll have no icons event though you may consider your device as a desktop if it also has a mouse. Not sure why someone would have this use case though.
                !deviceHasTouchCapability && self.options.iconDesktop || deviceHasTouchCapability && self.options.iconTouch ? (// TODO : the tooltip should be automatically be given an absolute position to be near the origin. Otherwise, when the origin is floating or what, it's going to be nowhere near it and disturb the position flow of the page elements. It will imply that the icon also detects when its origin moves, to follow it : not trivial.
                // Until it's done, the icon feature does not really make sense since the user still has most of the work to do by himself
                // if the icon provided is in the form of a string
                "string" == typeof self.options.icon ? (// wrap it in a span with the icon class
                self.$elProxy = $('<span class="' + self.options.iconTheme + '"></span>'), self.$elProxy.text(self.options.icon)) : // (deep) clone the object if iconCloning == true, to make sure every instance has its own proxy. We use the icon without wrapping, no need to. We do not give it a class either, as the user will undoubtedly style the object on his own and since our css properties may conflict with his own
                self.options.iconCloning ? self.$elProxy = self.options.icon.clone(!0) : self.$elProxy = self.options.icon, 
                self.$elProxy.insertAfter(self.$el)) : self.$elProxy = self.$el, // for 'click' and 'hover' triggers : bind on events to open the tooltip. Closing is now handled in _showNow() because of its bindings.
                // Notes about touch events :
                // - mouseenter, mouseleave and clicks happen even on pure touch devices because they are emulated. deviceIsPureTouch() is a simple attempt to detect them.
                // - on hybrid devices, we do not prevent touch gesture from opening tooltips. It would be too complex to differentiate real mouse events from emulated ones.
                // - we check deviceIsPureTouch() at each event rather than prior to binding because the situation may change during browsing
                "hover" == self.options.trigger ? (// these binding are for mouse interaction only
                self.$elProxy.on("mouseenter." + self.namespace, function() {
                    (!deviceIsPureTouch() || self.options.touchDevices) && (self.mouseIsOverProxy = !0, 
                    self._show());
                }).on("mouseleave." + self.namespace, function() {
                    (!deviceIsPureTouch() || self.options.touchDevices) && (self.mouseIsOverProxy = !1);
                }), // for touch interaction only
                deviceHasTouchCapability && self.options.touchDevices && // for touch devices, we immediately display the tooltip because we cannot rely on mouseleave to handle the delay
                self.$elProxy.on("touchstart." + self.namespace, function() {
                    self._showNow();
                })) : "click" == self.options.trigger && // note : for touch devices, we do not bind on touchstart, we only rely on the emulated clicks (triggered by taps)
                self.$elProxy.on("click." + self.namespace, function() {
                    (!deviceIsPureTouch() || self.options.touchDevices) && self._show();
                });
            }
        },
        // this function will schedule the opening of the tooltip after the delay, if there is one
        _show: function() {
            var self = this;
            "shown" != self.Status && "appearing" != self.Status && (self.options.delay ? self.timerShow = setTimeout(function() {
                // for hover trigger, we check if the mouse is still over the proxy, otherwise we do not show anything
                ("click" == self.options.trigger || "hover" == self.options.trigger && self.mouseIsOverProxy) && self._showNow();
            }, self.options.delay) : self._showNow());
        },
        // this function will open the tooltip right away
        _showNow: function(callback) {
            var self = this;
            // call our constructor custom function before continuing
            self.options.functionBefore.call(self.$el, self.$el, function() {
                // continue only if the tooltip is enabled and has any content
                if (self.enabled && null !== self.Content) {
                    // save the method callback and cancel hide method callbacks
                    callback && self.callbacks.show.push(callback), self.callbacks.hide = [], //get rid of any appearance timer
                    clearTimeout(self.timerShow), self.timerShow = null, clearTimeout(self.timerHide), 
                    self.timerHide = null, // if we only want one tooltip open at a time, close all auto-closing tooltips currently open and not already disappearing
                    self.options.onlyOne && $(".tooltipstered").not(self.$el).each(function(i, el) {
                        var $el = $(el), nss = $el.data("tooltipster-ns");
                        // iterate on all tooltips of the element
                        $.each(nss, function(i, ns) {
                            var instance = $el.data(ns), // we have to use the public methods here
                            s = instance.status(), ac = instance.option("autoClose");
                            "hidden" !== s && "disappearing" !== s && ac && instance.hide();
                        });
                    });
                    var finish = function() {
                        self.Status = "shown", // trigger any show method custom callbacks and reset them
                        $.each(self.callbacks.show, function(i, c) {
                            c.call(self.$el);
                        }), self.callbacks.show = [];
                    };
                    // if this origin already has its tooltip open
                    if ("hidden" !== self.Status) {
                        // the timer (if any) will start (or restart) right now
                        var extraTime = 0;
                        // if it was disappearing, cancel that
                        "disappearing" === self.Status ? (self.Status = "appearing", supportsTransitions() ? (self.$tooltip.clearQueue().removeClass("tooltipster-dying").addClass("tooltipster-" + self.options.animation + "-show"), 
                        self.options.speed > 0 && self.$tooltip.delay(self.options.speed), self.$tooltip.queue(finish)) : // in case the tooltip was currently fading out, bring it back to life
                        self.$tooltip.stop().fadeIn(finish)) : "shown" === self.Status && finish();
                    } else {
                        self.Status = "appearing";
                        // the timer (if any) will start when the tooltip has fully appeared after its transition
                        var extraTime = self.options.speed;
                        // disable horizontal scrollbar to keep overflowing tooltips from jacking with it and then restore it to its previous value
                        self.bodyOverflowX = $("body").css("overflow-x"), $("body").css("overflow-x", "hidden");
                        // get some other settings related to building the tooltip
                        var animation = "tooltipster-" + self.options.animation, animationSpeed = "-webkit-transition-duration: " + self.options.speed + "ms; -webkit-animation-duration: " + self.options.speed + "ms; -moz-transition-duration: " + self.options.speed + "ms; -moz-animation-duration: " + self.options.speed + "ms; -o-transition-duration: " + self.options.speed + "ms; -o-animation-duration: " + self.options.speed + "ms; -ms-transition-duration: " + self.options.speed + "ms; -ms-animation-duration: " + self.options.speed + "ms; transition-duration: " + self.options.speed + "ms; animation-duration: " + self.options.speed + "ms;", minWidth = self.options.minWidth ? "min-width:" + Math.round(self.options.minWidth) + "px;" : "", maxWidth = self.options.maxWidth ? "max-width:" + Math.round(self.options.maxWidth) + "px;" : "", pointerEvents = self.options.interactive ? "pointer-events: auto;" : "";
                        // auto-close bindings
                        if (// build the base of our tooltip
                        self.$tooltip = $('<div class="tooltipster-base ' + self.options.theme + '" style="' + minWidth + " " + maxWidth + " " + pointerEvents + " " + animationSpeed + '"><div class="tooltipster-content"></div></div>'), 
                        // only add the animation class if the user has a browser that supports animations
                        supportsTransitions() && self.$tooltip.addClass(animation), // insert the content
                        self._content_insert(), // attach
                        self.$tooltip.appendTo("body"), // do all the crazy calculations and positioning
                        self.reposition(), // call our custom callback since the content of the tooltip is now part of the DOM
                        self.options.functionReady.call(self.$el, self.$el, self.$tooltip), // animate in the tooltip
                        supportsTransitions() ? (self.$tooltip.addClass(animation + "-show"), self.options.speed > 0 && self.$tooltip.delay(self.options.speed), 
                        self.$tooltip.queue(finish)) : self.$tooltip.css("display", "none").fadeIn(self.options.speed, finish), 
                        // will check if our tooltip origin is removed while the tooltip is shown
                        self._interval_set(), // reposition on scroll (otherwise position:fixed element's tooltips will move away form their origin) and on resize (in case position can/has to be changed)
                        $(window).on("scroll." + self.namespace + " resize." + self.namespace, function() {
                            self.reposition();
                        }), self.options.autoClose) // here we'll have to set different sets of bindings for both touch and mouse
                        if (// in case a listener is already bound for autoclosing (mouse or touch, hover or click), unbind it first
                        $("body").off("." + self.namespace), "hover" == self.options.trigger) {
                            // if we have to allow interaction
                            if (// if the user touches the body, hide
                            deviceHasTouchCapability && // timeout 0 : explanation below in click section
                            setTimeout(function() {
                                // we don't want to bind on click here because the initial touchstart event has not yet triggered its click event, which is thus about to happen
                                $("body").on("touchstart." + self.namespace, function() {
                                    self.hide();
                                });
                            }, 0), self.options.interactive) {
                                // touch events inside the tooltip must not close it
                                deviceHasTouchCapability && self.$tooltip.on("touchstart." + self.namespace, function(event) {
                                    event.stopPropagation();
                                });
                                // as for mouse interaction, we get rid of the tooltip only after the mouse has spent some time out of it
                                var tolerance = null;
                                self.$elProxy.add(self.$tooltip).on("mouseleave." + self.namespace + "-autoClose", function() {
                                    clearTimeout(tolerance), tolerance = setTimeout(function() {
                                        self.hide();
                                    }, self.options.interactiveTolerance);
                                }).on("mouseenter." + self.namespace + "-autoClose", function() {
                                    clearTimeout(tolerance);
                                });
                            } else self.$elProxy.on("mouseleave." + self.namespace + "-autoClose", function() {
                                self.hide();
                            });
                            // close the tooltip when the proxy gets a click (common behavior of native tooltips)
                            self.options.hideOnClick && self.$elProxy.on("click." + self.namespace + "-autoClose", function() {
                                self.hide();
                            });
                        } else "click" == self.options.trigger && (// use a timeout to prevent immediate closing if the method was called on a click event and if options.delay == 0 (because of bubbling)
                        setTimeout(function() {
                            $("body").on("click." + self.namespace + " touchstart." + self.namespace, function() {
                                self.hide();
                            });
                        }, 0), // if interactive, we'll stop the events that were emitted from inside the tooltip to stop autoClosing
                        self.options.interactive && // note : the touch events will just not be used if the plugin is not enabled on touch devices
                        self.$tooltip.on("click." + self.namespace + " touchstart." + self.namespace, function(event) {
                            event.stopPropagation();
                        }));
                    }
                    // if we have a timer set, let the countdown begin
                    self.options.timer > 0 && (self.timerHide = setTimeout(function() {
                        self.timerHide = null, self.hide();
                    }, self.options.timer + extraTime));
                }
            });
        },
        _interval_set: function() {
            var self = this;
            self.checkInterval = setInterval(function() {
                // if the tooltip and/or its interval should be stopped
                if (// if the origin has been removed
                0 === $("body").find(self.$el).length || 0 === $("body").find(self.$elProxy).length || "hidden" == self.Status || 0 === $("body").find(self.$tooltip).length) // remove the tooltip if it's still here
                ("shown" == self.Status || "appearing" == self.Status) && self.hide(), // clear this interval as it is no longer necessary
                self._interval_cancel(); else // compare the former and current positions of the elProxy to reposition the tooltip if need be
                if (self.options.positionTracker) {
                    var p = self._repositionInfo(self.$elProxy), identical = !1;
                    // compare size first (a change requires repositioning too)
                    areEqual(p.dimension, self.elProxyPosition.dimension) && (// for elements with a fixed position, we track the top and left properties (relative to window)
                    "fixed" === self.$elProxy.css("position") ? areEqual(p.position, self.elProxyPosition.position) && (identical = !0) : areEqual(p.offset, self.elProxyPosition.offset) && (identical = !0)), 
                    identical || (self.reposition(), self.options.positionTrackerCallback.call(self, self.$el));
                }
            }, 200);
        },
        _interval_cancel: function() {
            clearInterval(this.checkInterval), // clean delete
            this.checkInterval = null;
        },
        _content_set: function(content) {
            // clone if asked. Cloning the object makes sure that each instance has its own version of the content (in case a same object were provided for several instances)
            // reminder : typeof null === object
            "object" == typeof content && null !== content && this.options.contentCloning && (content = content.clone(!0)), 
            this.Content = content;
        },
        _content_insert: function() {
            var self = this, $d = this.$tooltip.find(".tooltipster-content");
            "string" != typeof self.Content || self.options.contentAsHTML ? $d.empty().append(self.Content) : $d.text(self.Content);
        },
        _update: function(content) {
            var self = this;
            // change the content
            self._content_set(content), null !== self.Content ? // update the tooltip if it is open
            "hidden" !== self.Status && (// reset the content in the tooltip
            self._content_insert(), // reposition and resize the tooltip
            self.reposition(), // if we want to play a little animation showing the content changed
            self.options.updateAnimation && (supportsTransitions() ? (self.$tooltip.css({
                width: "",
                "-webkit-transition": "all " + self.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms",
                "-moz-transition": "all " + self.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms",
                "-o-transition": "all " + self.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms",
                "-ms-transition": "all " + self.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms",
                transition: "all " + self.options.speed + "ms, width 0ms, height 0ms, left 0ms, top 0ms"
            }).addClass("tooltipster-content-changing"), // reset the CSS transitions and finish the change animation
            setTimeout(function() {
                "hidden" != self.Status && (self.$tooltip.removeClass("tooltipster-content-changing"), 
                // after the changing animation has completed, reset the CSS transitions
                setTimeout(function() {
                    "hidden" !== self.Status && self.$tooltip.css({
                        "-webkit-transition": self.options.speed + "ms",
                        "-moz-transition": self.options.speed + "ms",
                        "-o-transition": self.options.speed + "ms",
                        "-ms-transition": self.options.speed + "ms",
                        transition: self.options.speed + "ms"
                    });
                }, self.options.speed));
            }, self.options.speed)) : self.$tooltip.fadeTo(self.options.speed, .5, function() {
                "hidden" != self.Status && self.$tooltip.fadeTo(self.options.speed, 1);
            }))) : self.hide();
        },
        _repositionInfo: function($el) {
            return {
                dimension: {
                    height: $el.outerHeight(!1),
                    width: $el.outerWidth(!1)
                },
                offset: $el.offset(),
                position: {
                    left: parseInt($el.css("left")),
                    top: parseInt($el.css("top"))
                }
            };
        },
        hide: function(callback) {
            var self = this;
            // save the method custom callback and cancel any show method custom callbacks
            callback && self.callbacks.hide.push(callback), self.callbacks.show = [], // get rid of any appearance timeout
            clearTimeout(self.timerShow), self.timerShow = null, clearTimeout(self.timerHide), 
            self.timerHide = null;
            var finishCallbacks = function() {
                // trigger any hide method custom callbacks and reset them
                $.each(self.callbacks.hide, function(i, c) {
                    c.call(self.$el);
                }), self.callbacks.hide = [];
            };
            // hide
            if ("shown" == self.Status || "appearing" == self.Status) {
                self.Status = "disappearing";
                var finish = function() {
                    self.Status = "hidden", // detach our content object first, so the next jQuery's remove() call does not unbind its event handlers
                    "object" == typeof self.Content && null !== self.Content && self.Content.detach(), 
                    self.$tooltip.remove(), self.$tooltip = null, // unbind orientationchange, scroll and resize listeners
                    $(window).off("." + self.namespace), $("body").off("." + self.namespace).css("overflow-x", self.bodyOverflowX), 
                    // unbind any auto-closing click/touch listeners
                    $("body").off("." + self.namespace), // unbind any auto-closing hover listeners
                    self.$elProxy.off("." + self.namespace + "-autoClose"), // call our constructor custom callback function
                    self.options.functionAfter.call(self.$el, self.$el), // call our method custom callbacks functions
                    finishCallbacks();
                };
                supportsTransitions() ? (self.$tooltip.clearQueue().removeClass("tooltipster-" + self.options.animation + "-show").addClass("tooltipster-dying"), 
                self.options.speed > 0 && self.$tooltip.delay(self.options.speed), self.$tooltip.queue(finish)) : self.$tooltip.stop().fadeOut(self.options.speed, finish);
            } else "hidden" == self.Status && finishCallbacks();
            return self;
        },
        // the public show() method is actually an alias for the private showNow() method
        show: function(callback) {
            return this._showNow(callback), this;
        },
        // 'update' is deprecated in favor of 'content' but is kept for backward compatibility
        update: function(c) {
            return this.content(c);
        },
        content: function(c) {
            // getter method
            // getter method
            return "undefined" == typeof c ? this.Content : (this._update(c), this);
        },
        reposition: function() {
            // a function to detect if the tooltip is going off the screen horizontally. If so, reposition the crap out of it!
            function dontGoOffScreenX() {
                var windowLeft = $(window).scrollLeft();
                // if the tooltip goes off the left side of the screen, line it up with the left side of the window
                0 > myLeft - windowLeft && (arrowReposition = myLeft - windowLeft, myLeft = windowLeft), 
                // if the tooltip goes off the right of the screen, line it up with the right side of the window
                myLeft + tooltipWidth - windowLeft > windowWidth && (arrowReposition = myLeft - (windowWidth + windowLeft - tooltipWidth), 
                myLeft = windowWidth + windowLeft - tooltipWidth);
            }
            // a function to detect if the tooltip is going off the screen vertically. If so, switch to the opposite!
            function dontGoOffScreenY(switchTo, switchFrom) {
                // if it goes off the top off the page
                proxy.offset.top - $(window).scrollTop() - tooltipHeight - offsetY - 12 < 0 && switchFrom.indexOf("top") > -1 && (practicalPosition = switchTo), 
                // if it goes off the bottom of the page
                proxy.offset.top + proxy.dimension.height + tooltipHeight + 12 + offsetY > $(window).scrollTop() + $(window).height() && switchFrom.indexOf("bottom") > -1 && (practicalPosition = switchTo, 
                myTop = proxy.offset.top - tooltipHeight - offsetY - 12);
            }
            var self = this;
            // in case the tooltip has been removed from DOM manually
            if (0 !== $("body").find(self.$tooltip).length) {
                // reset width
                self.$tooltip.css("width", ""), // find variables to determine placement
                self.elProxyPosition = self._repositionInfo(self.$elProxy);
                var arrowReposition = null, windowWidth = $(window).width(), // shorthand
                proxy = self.elProxyPosition, tooltipWidth = self.$tooltip.outerWidth(!1), // this +1 stops FireFox from sometimes forcing an additional text line
                tooltipHeight = (self.$tooltip.innerWidth() + 1, self.$tooltip.outerHeight(!1));
                // if this is an <area> tag inside a <map>, all hell breaks loose. Recalculate all the measurements based on coordinates
                if (self.$elProxy.is("area")) {
                    var areaShape = self.$elProxy.attr("shape"), mapName = self.$elProxy.parent().attr("name"), map = $('img[usemap="#' + mapName + '"]'), mapOffsetLeft = map.offset().left, mapOffsetTop = map.offset().top, areaMeasurements = void 0 !== self.$elProxy.attr("coords") ? self.$elProxy.attr("coords").split(",") : void 0;
                    if ("circle" == areaShape) {
                        var areaLeft = parseInt(areaMeasurements[0]), areaTop = parseInt(areaMeasurements[1]), areaWidth = parseInt(areaMeasurements[2]);
                        proxy.dimension.height = 2 * areaWidth, proxy.dimension.width = 2 * areaWidth, proxy.offset.top = mapOffsetTop + areaTop - areaWidth, 
                        proxy.offset.left = mapOffsetLeft + areaLeft - areaWidth;
                    } else if ("rect" == areaShape) {
                        var areaLeft = parseInt(areaMeasurements[0]), areaTop = parseInt(areaMeasurements[1]), areaRight = parseInt(areaMeasurements[2]), areaBottom = parseInt(areaMeasurements[3]);
                        proxy.dimension.height = areaBottom - areaTop, proxy.dimension.width = areaRight - areaLeft, 
                        proxy.offset.top = mapOffsetTop + areaTop, proxy.offset.left = mapOffsetLeft + areaLeft;
                    } else if ("poly" == areaShape) {
                        for (var areaSmallestX = 0, areaSmallestY = 0, areaGreatestX = 0, areaGreatestY = 0, arrayAlternate = "even", i = 0; i < areaMeasurements.length; i++) {
                            var areaNumber = parseInt(areaMeasurements[i]);
                            "even" == arrayAlternate ? (areaNumber > areaGreatestX && (areaGreatestX = areaNumber, 
                            0 === i && (areaSmallestX = areaGreatestX)), areaSmallestX > areaNumber && (areaSmallestX = areaNumber), 
                            arrayAlternate = "odd") : (areaNumber > areaGreatestY && (areaGreatestY = areaNumber, 
                            1 == i && (areaSmallestY = areaGreatestY)), areaSmallestY > areaNumber && (areaSmallestY = areaNumber), 
                            arrayAlternate = "even");
                        }
                        proxy.dimension.height = areaGreatestY - areaSmallestY, proxy.dimension.width = areaGreatestX - areaSmallestX, 
                        proxy.offset.top = mapOffsetTop + areaSmallestY, proxy.offset.left = mapOffsetLeft + areaSmallestX;
                    } else proxy.dimension.height = map.outerHeight(!1), proxy.dimension.width = map.outerWidth(!1), 
                    proxy.offset.top = mapOffsetTop, proxy.offset.left = mapOffsetLeft;
                }
                // our function and global vars for positioning our tooltip
                var myLeft = 0, myLeftMirror = 0, myTop = 0, offsetY = parseInt(self.options.offsetY), offsetX = parseInt(self.options.offsetX), // this is the arrow position that will eventually be used. It may differ from the position option if the tooltip cannot be displayed in this position
                practicalPosition = self.options.position;
                if ("top" == practicalPosition) {
                    var leftDifference = proxy.offset.left + tooltipWidth - (proxy.offset.left + proxy.dimension.width);
                    myLeft = proxy.offset.left + offsetX - leftDifference / 2, myTop = proxy.offset.top - tooltipHeight - offsetY - 12, 
                    dontGoOffScreenX(), dontGoOffScreenY("bottom", "top");
                }
                if ("top-left" == practicalPosition && (myLeft = proxy.offset.left + offsetX, myTop = proxy.offset.top - tooltipHeight - offsetY - 12, 
                dontGoOffScreenX(), dontGoOffScreenY("bottom-left", "top-left")), "top-right" == practicalPosition && (myLeft = proxy.offset.left + proxy.dimension.width + offsetX - tooltipWidth, 
                myTop = proxy.offset.top - tooltipHeight - offsetY - 12, dontGoOffScreenX(), dontGoOffScreenY("bottom-right", "top-right")), 
                "bottom" == practicalPosition) {
                    var leftDifference = proxy.offset.left + tooltipWidth - (proxy.offset.left + proxy.dimension.width);
                    myLeft = proxy.offset.left - leftDifference / 2 + offsetX, myTop = proxy.offset.top + proxy.dimension.height + offsetY + 12, 
                    dontGoOffScreenX(), dontGoOffScreenY("top", "bottom");
                }
                if ("bottom-left" == practicalPosition && (myLeft = proxy.offset.left + offsetX, 
                myTop = proxy.offset.top + proxy.dimension.height + offsetY + 12, dontGoOffScreenX(), 
                dontGoOffScreenY("top-left", "bottom-left")), "bottom-right" == practicalPosition && (myLeft = proxy.offset.left + proxy.dimension.width + offsetX - tooltipWidth, 
                myTop = proxy.offset.top + proxy.dimension.height + offsetY + 12, dontGoOffScreenX(), 
                dontGoOffScreenY("top-right", "bottom-right")), "left" == practicalPosition) {
                    myLeft = proxy.offset.left - offsetX - tooltipWidth - 12, myLeftMirror = proxy.offset.left + offsetX + proxy.dimension.width + 12;
                    var topDifference = proxy.offset.top + tooltipHeight - (proxy.offset.top + proxy.dimension.height);
                    // if the tooltip goes off boths sides of the page
                    if (myTop = proxy.offset.top - topDifference / 2 - offsetY, 0 > myLeft && myLeftMirror + tooltipWidth > windowWidth) {
                        var borderWidth = 2 * parseFloat(self.$tooltip.css("border-width")), newWidth = tooltipWidth + myLeft - borderWidth;
                        self.$tooltip.css("width", newWidth + "px"), tooltipHeight = self.$tooltip.outerHeight(!1), 
                        myLeft = proxy.offset.left - offsetX - newWidth - 12 - borderWidth, topDifference = proxy.offset.top + tooltipHeight - (proxy.offset.top + proxy.dimension.height), 
                        myTop = proxy.offset.top - topDifference / 2 - offsetY;
                    } else 0 > myLeft && (myLeft = proxy.offset.left + offsetX + proxy.dimension.width + 12, 
                    arrowReposition = "left");
                }
                if ("right" == practicalPosition) {
                    myLeft = proxy.offset.left + offsetX + proxy.dimension.width + 12, myLeftMirror = proxy.offset.left - offsetX - tooltipWidth - 12;
                    var topDifference = proxy.offset.top + tooltipHeight - (proxy.offset.top + proxy.dimension.height);
                    // if the tooltip goes off boths sides of the page
                    if (myTop = proxy.offset.top - topDifference / 2 - offsetY, myLeft + tooltipWidth > windowWidth && 0 > myLeftMirror) {
                        var borderWidth = 2 * parseFloat(self.$tooltip.css("border-width")), newWidth = windowWidth - myLeft - borderWidth;
                        self.$tooltip.css("width", newWidth + "px"), tooltipHeight = self.$tooltip.outerHeight(!1), 
                        topDifference = proxy.offset.top + tooltipHeight - (proxy.offset.top + proxy.dimension.height), 
                        myTop = proxy.offset.top - topDifference / 2 - offsetY;
                    } else myLeft + tooltipWidth > windowWidth && (myLeft = proxy.offset.left - offsetX - tooltipWidth - 12, 
                    arrowReposition = "right");
                }
                // if arrow is set true, style it and append it
                if (self.options.arrow) {
                    var arrowClass = "tooltipster-arrow-" + practicalPosition;
                    // set color of the arrow
                    if (self.options.arrowColor.length < 1) var arrowColor = self.$tooltip.css("background-color"); else var arrowColor = self.options.arrowColor;
                    // building the logic to create the border around the arrow of the tooltip
                    if (// if the tooltip was going off the page and had to re-adjust, we need to update the arrow's position
                    arrowReposition ? "left" == arrowReposition ? (arrowClass = "tooltipster-arrow-right", 
                    arrowReposition = "") : "right" == arrowReposition ? (arrowClass = "tooltipster-arrow-left", 
                    arrowReposition = "") : arrowReposition = "left:" + Math.round(arrowReposition) + "px;" : arrowReposition = "", 
                    "top" == practicalPosition || "top-left" == practicalPosition || "top-right" == practicalPosition) var tooltipBorderWidth = parseFloat(self.$tooltip.css("border-bottom-width")), tooltipBorderColor = self.$tooltip.css("border-bottom-color"); else if ("bottom" == practicalPosition || "bottom-left" == practicalPosition || "bottom-right" == practicalPosition) var tooltipBorderWidth = parseFloat(self.$tooltip.css("border-top-width")), tooltipBorderColor = self.$tooltip.css("border-top-color"); else if ("left" == practicalPosition) var tooltipBorderWidth = parseFloat(self.$tooltip.css("border-right-width")), tooltipBorderColor = self.$tooltip.css("border-right-color"); else if ("right" == practicalPosition) var tooltipBorderWidth = parseFloat(self.$tooltip.css("border-left-width")), tooltipBorderColor = self.$tooltip.css("border-left-color"); else var tooltipBorderWidth = parseFloat(self.$tooltip.css("border-bottom-width")), tooltipBorderColor = self.$tooltip.css("border-bottom-color");
                    tooltipBorderWidth > 1 && tooltipBorderWidth++;
                    var arrowBorder = "";
                    if (0 !== tooltipBorderWidth) {
                        var arrowBorderSize = "", arrowBorderColor = "border-color: " + tooltipBorderColor + ";";
                        -1 !== arrowClass.indexOf("bottom") ? arrowBorderSize = "margin-top: -" + Math.round(tooltipBorderWidth) + "px;" : -1 !== arrowClass.indexOf("top") ? arrowBorderSize = "margin-bottom: -" + Math.round(tooltipBorderWidth) + "px;" : -1 !== arrowClass.indexOf("left") ? arrowBorderSize = "margin-right: -" + Math.round(tooltipBorderWidth) + "px;" : -1 !== arrowClass.indexOf("right") && (arrowBorderSize = "margin-left: -" + Math.round(tooltipBorderWidth) + "px;"), 
                        arrowBorder = '<span class="tooltipster-arrow-border" style="' + arrowBorderSize + " " + arrowBorderColor + ';"></span>';
                    }
                    // if the arrow already exists, remove and replace it
                    self.$tooltip.find(".tooltipster-arrow").remove();
                    // build out the arrow and append it		
                    var arrowConstruct = '<div class="' + arrowClass + ' tooltipster-arrow" style="' + arrowReposition + '">' + arrowBorder + '<span style="border-color:' + arrowColor + ';"></span></div>';
                    self.$tooltip.append(arrowConstruct);
                }
                // position the tooltip
                self.$tooltip.css({
                    top: Math.round(myTop) + "px",
                    left: Math.round(myLeft) + "px"
                });
            }
            return self;
        },
        enable: function() {
            return this.enabled = !0, this;
        },
        disable: function() {
            // hide first, in case the tooltip would not disappear on its own (autoClose false)
            return this.hide(), this.enabled = !1, this;
        },
        destroy: function() {
            var self = this;
            self.hide(), // remove the icon, if any
            self.$el[0] !== self.$elProxy[0] && self.$elProxy.remove(), self.$el.removeData(self.namespace).off("." + self.namespace);
            var ns = self.$el.data("tooltipster-ns");
            // if there are no more tooltips on this element
            if (1 === ns.length) {
                // optional restoration of a title attribute
                var title = null;
                "previous" === self.options.restoration ? title = self.$el.data("tooltipster-initialTitle") : "current" === self.options.restoration && (// old school technique to stringify when outerHTML is not supported
                title = "string" == typeof self.Content ? self.Content : $("<div></div>").append(self.Content).html()), 
                title && self.$el.attr("title", title), // final cleaning
                self.$el.removeClass("tooltipstered").removeData("tooltipster-ns").removeData("tooltipster-initialTitle");
            } else // remove the instance namespace from the list of namespaces of tooltips present on the element
            ns = $.grep(ns, function(el, i) {
                return el !== self.namespace;
            }), self.$el.data("tooltipster-ns", ns);
            return self;
        },
        elementIcon: function() {
            return this.$el[0] !== this.$elProxy[0] ? this.$elProxy[0] : void 0;
        },
        elementTooltip: function() {
            return this.$tooltip ? this.$tooltip[0] : void 0;
        },
        // public methods but for internal use only
        // getter if val is ommitted, setter otherwise
        option: function(o, val) {
            return "undefined" == typeof val ? this.options[o] : (this.options[o] = val, this);
        },
        status: function() {
            return this.Status;
        }
    }, $.fn[pluginName] = function() {
        // for using in closures
        var args = arguments;
        // if we are not in the context of jQuery wrapped HTML element(s) :
        // this happens when calling static methods in the form $.fn.tooltipster('methodName'), or when calling $(sel).tooltipster('methodName or options') where $(sel) does not match anything
        if (0 === this.length) {
            // if the first argument is a method name
            if ("string" == typeof args[0]) {
                var methodIsStatic = !0;
                // list static methods here (usable by calling $.fn.tooltipster('methodName');)
                switch (args[0]) {
                  case "setDefaults":
                    // change default options for all future instances
                    $.extend(defaults, args[1]);
                    break;

                  default:
                    methodIsStatic = !1;
                }
                // $.fn.tooltipster('methodName') calls will return true
                // $.fn.tooltipster('methodName') calls will return true
                return methodIsStatic ? !0 : this;
            }
            // still chainable : same as above
            return this;
        }
        // method calls
        if ("string" == typeof args[0]) {
            var v = "#*$~&";
            return this.each(function() {
                // retrieve the namepaces of the tooltip(s) that exist on that element. We will interact with the first tooltip only.
                var ns = $(this).data("tooltipster-ns"), // self represents the instance of the first tooltipster plugin associated to the current HTML object of the loop
                self = ns ? $(this).data(ns[0]) : null;
                // if the current element holds a tooltipster instance
                if (!self) throw new Error("You called Tooltipster's \"" + args[0] + '" method on an uninitialized element');
                if ("function" != typeof self[args[0]]) throw new Error('Unknown method .tooltipster("' + args[0] + '")');
                // note : args[1] and args[2] may not be defined
                var resp = self[args[0]](args[1], args[2]);
                // if the function returned anything other than the instance itself (which implies chaining)
                // if the function returned anything other than the instance itself (which implies chaining)
                return resp !== self ? (v = resp, !1) : void 0;
            }), "#*$~&" !== v ? v : this;
        }
        var instances = [], // is there a defined value for the multiple option in the options object ?
        multipleIsSet = args[0] && "undefined" != typeof args[0].multiple, // if the multiple option is set to true, or if it's not defined but set to true in the defaults
        multiple = multipleIsSet && args[0].multiple || !multipleIsSet && defaults.multiple, // same for debug
        debugIsSet = args[0] && "undefined" != typeof args[0].debug, debug = debugIsSet && args[0].debug || !debugIsSet && defaults.debug;
        // initialize a tooltipster instance for each element if it doesn't already have one or if the multiple option is set, and attach the object to it
        return this.each(function() {
            var go = !1, ns = $(this).data("tooltipster-ns"), instance = null;
            ns ? multiple ? go = !0 : debug && console.log('Tooltipster: one or more tooltips are already attached to this element: ignoring. Use the "multiple" option to attach more tooltips.') : go = !0, 
            go && (instance = new Plugin(this, args[0]), // save the reference of the new instance
            ns || (ns = []), ns.push(instance.namespace), $(this).data("tooltipster-ns", ns), 
            // save the instance itself
            $(this).data(instance.namespace, instance)), instances.push(instance);
        }), multiple ? instances : this;
    };
    // detect if this device can trigger touch events
    var deviceHasTouchCapability = !!("ontouchstart" in window), deviceHasMouse = !1;
    $("body").one("mousemove", function() {
        deviceHasMouse = !0;
    });
}(jQuery, window, document), /*!
 * jQuery Validation Plugin v1.15.0
 *
 * http://jqueryvalidation.org/
 *
 * Copyright (c) 2016 Jörn Zaefferer
 * Released under the MIT license
 */
function(factory) {
    "function" == typeof define && define.amd ? define([ "jquery" ], factory) : "object" == typeof module && module.exports ? module.exports = factory(require("jquery")) : factory(jQuery);
}(function($) {
    $.extend($.fn, {
        // http://jqueryvalidation.org/validate/
        validate: function(options) {
            // If nothing is selected, return nothing; can't chain anyway
            if (!this.length) return void (options && options.debug && window.console && console.warn("Nothing selected, can't validate, returning nothing."));
            // Check if a validator for this form was already created
            var validator = $.data(this[0], "validator");
            // Add novalidate tag if HTML5.
            // Validate the form on submit
            return validator ? validator : (this.attr("novalidate", "novalidate"), validator = new $.validator(options, this[0]), 
            $.data(this[0], "validator", validator), validator.settings.onsubmit && (this.on("click.validate", ":submit", function(event) {
                validator.settings.submitHandler && (validator.submitButton = event.target), // Allow suppressing validation by adding a cancel class to the submit button
                $(this).hasClass("cancel") && (validator.cancelSubmit = !0), // Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
                void 0 !== $(this).attr("formnovalidate") && (validator.cancelSubmit = !0);
            }), this.on("submit.validate", function(event) {
                function handle() {
                    var hidden, result;
                    // Insert a hidden input as a replacement for the missing submit button
                    // And clean up afterwards; thanks to no-block-scope, hidden can be referenced
                    return validator.settings.submitHandler ? (validator.submitButton && (hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val($(validator.submitButton).val()).appendTo(validator.currentForm)), 
                    result = validator.settings.submitHandler.call(validator, validator.currentForm, event), 
                    validator.submitButton && hidden.remove(), void 0 !== result ? result : !1) : !0;
                }
                // Prevent submit for invalid forms or custom submit handlers
                // Prevent form submit to be able to see console output
                // Prevent submit for invalid forms or custom submit handlers
                return validator.settings.debug && event.preventDefault(), validator.cancelSubmit ? (validator.cancelSubmit = !1, 
                handle()) : validator.form() ? validator.pendingRequest ? (validator.formSubmitted = !0, 
                !1) : handle() : (validator.focusInvalid(), !1);
            })), validator);
        },
        // http://jqueryvalidation.org/valid/
        valid: function() {
            var valid, validator, errorList;
            return $(this[0]).is("form") ? valid = this.validate().form() : (errorList = [], 
            valid = !0, validator = $(this[0].form).validate(), this.each(function() {
                valid = validator.element(this) && valid, valid || (errorList = errorList.concat(validator.errorList));
            }), validator.errorList = errorList), valid;
        },
        // http://jqueryvalidation.org/rules/
        rules: function(command, argument) {
            // If nothing is selected, return nothing; can't chain anyway
            if (this.length) {
                var settings, staticRules, existingRules, data, param, filtered, element = this[0];
                if (command) switch (settings = $.data(element.form, "validator").settings, staticRules = settings.rules, 
                existingRules = $.validator.staticRules(element), command) {
                  case "add":
                    $.extend(existingRules, $.validator.normalizeRule(argument)), // Remove messages from rules, but allow them to be set separately
                    delete existingRules.messages, staticRules[element.name] = existingRules, argument.messages && (settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages));
                    break;

                  case "remove":
                    return argument ? (filtered = {}, $.each(argument.split(/\s/), function(index, method) {
                        filtered[method] = existingRules[method], delete existingRules[method], "required" === method && $(element).removeAttr("aria-required");
                    }), filtered) : (delete staticRules[element.name], existingRules);
                }
                // Make sure required is at front
                // Make sure remote is at back
                return data = $.validator.normalizeRules($.extend({}, $.validator.classRules(element), $.validator.attributeRules(element), $.validator.dataRules(element), $.validator.staticRules(element)), element), 
                data.required && (param = data.required, delete data.required, data = $.extend({
                    required: param
                }, data), $(element).attr("aria-required", "true")), data.remote && (param = data.remote, 
                delete data.remote, data = $.extend(data, {
                    remote: param
                })), data;
            }
        }
    }), // Custom selectors
    $.extend($.expr[":"], {
        // http://jqueryvalidation.org/blank-selector/
        blank: function(a) {
            return !$.trim("" + $(a).val());
        },
        // http://jqueryvalidation.org/filled-selector/
        filled: function(a) {
            var val = $(a).val();
            return null !== val && !!$.trim("" + val);
        },
        // http://jqueryvalidation.org/unchecked-selector/
        unchecked: function(a) {
            return !$(a).prop("checked");
        }
    }), // Constructor for validator
    $.validator = function(options, form) {
        this.settings = $.extend(!0, {}, $.validator.defaults, options), this.currentForm = form, 
        this.init();
    }, // http://jqueryvalidation.org/jQuery.validator.format/
    $.validator.format = function(source, params) {
        return 1 === arguments.length ? function() {
            var args = $.makeArray(arguments);
            return args.unshift(source), $.validator.format.apply(this, args);
        } : void 0 === params ? source : (arguments.length > 2 && params.constructor !== Array && (params = $.makeArray(arguments).slice(1)), 
        params.constructor !== Array && (params = [ params ]), $.each(params, function(i, n) {
            source = source.replace(new RegExp("\\{" + i + "\\}", "g"), function() {
                return n;
            });
        }), source);
    }, $.extend($.validator, {
        defaults: {
            messages: {},
            groups: {},
            rules: {},
            errorClass: "error",
            pendingClass: "pending",
            validClass: "valid",
            errorElement: "label",
            focusCleanup: !1,
            focusInvalid: !0,
            errorContainer: $([]),
            errorLabelContainer: $([]),
            onsubmit: !0,
            ignore: ":hidden",
            ignoreTitle: !1,
            onfocusin: function(element) {
                this.lastActive = element, // Hide error label and remove error class on focus if enabled
                this.settings.focusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass), 
                this.hideThese(this.errorsFor(element)));
            },
            onfocusout: function(element) {
                this.checkable(element) || !(element.name in this.submitted) && this.optional(element) || this.element(element);
            },
            onkeyup: function(element, event) {
                // Avoid revalidate the field when pressing one of the following keys
                // Shift       => 16
                // Ctrl        => 17
                // Alt         => 18
                // Caps lock   => 20
                // End         => 35
                // Home        => 36
                // Left arrow  => 37
                // Up arrow    => 38
                // Right arrow => 39
                // Down arrow  => 40
                // Insert      => 45
                // Num lock    => 144
                // AltGr key   => 225
                var excludedKeys = [ 16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225 ];
                9 === event.which && "" === this.elementValue(element) || -1 !== $.inArray(event.keyCode, excludedKeys) || (element.name in this.submitted || element.name in this.invalid) && this.element(element);
            },
            onclick: function(element) {
                // Click on selects, radiobuttons and checkboxes
                element.name in this.submitted ? this.element(element) : element.parentNode.name in this.submitted && this.element(element.parentNode);
            },
            highlight: function(element, errorClass, validClass) {
                "radio" === element.type ? this.findByName(element.name).addClass(errorClass).removeClass(validClass) : $(element).addClass(errorClass).removeClass(validClass);
            },
            unhighlight: function(element, errorClass, validClass) {
                "radio" === element.type ? this.findByName(element.name).removeClass(errorClass).addClass(validClass) : $(element).removeClass(errorClass).addClass(validClass);
            }
        },
        // http://jqueryvalidation.org/jQuery.validator.setDefaults/
        setDefaults: function(settings) {
            $.extend($.validator.defaults, settings);
        },
        messages: {
            required: "This field is required.",
            remote: "Please fix this field.",
            email: "Please enter a valid email address.",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date ( ISO ).",
            number: "Please enter a valid number.",
            digits: "Please enter only digits.",
            equalTo: "Please enter the same value again.",
            maxlength: $.validator.format("Please enter no more than {0} characters."),
            minlength: $.validator.format("Please enter at least {0} characters."),
            rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
            range: $.validator.format("Please enter a value between {0} and {1}."),
            max: $.validator.format("Please enter a value less than or equal to {0}."),
            min: $.validator.format("Please enter a value greater than or equal to {0}."),
            step: $.validator.format("Please enter a multiple of {0}.")
        },
        autoCreateRanges: !1,
        prototype: {
            init: function() {
                function delegate(event) {
                    var validator = $.data(this.form, "validator"), eventType = "on" + event.type.replace(/^validate/, ""), settings = validator.settings;
                    settings[eventType] && !$(this).is(settings.ignore) && settings[eventType].call(validator, this, event);
                }
                this.labelContainer = $(this.settings.errorLabelContainer), this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm), 
                this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer), 
                this.submitted = {}, this.valueCache = {}, this.pendingRequest = 0, this.pending = {}, 
                this.invalid = {}, this.reset();
                var rules, groups = this.groups = {};
                $.each(this.settings.groups, function(key, value) {
                    "string" == typeof value && (value = value.split(/\s/)), $.each(value, function(index, name) {
                        groups[name] = key;
                    });
                }), rules = this.settings.rules, $.each(rules, function(key, value) {
                    rules[key] = $.validator.normalizeRule(value);
                }), $(this.currentForm).on("focusin.validate focusout.validate keyup.validate", ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable]", delegate).on("click.validate", "select, option, [type='radio'], [type='checkbox']", delegate), 
                this.settings.invalidHandler && $(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler), 
                // Add aria-required to any Static/Data/Class required fields before first validation
                // Screen readers require this attribute to be present before the initial submission http://www.w3.org/TR/WCAG-TECHS/ARIA2.html
                $(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required", "true");
            },
            // http://jqueryvalidation.org/Validator.form/
            form: function() {
                return this.checkForm(), $.extend(this.submitted, this.errorMap), this.invalid = $.extend({}, this.errorMap), 
                this.valid() || $(this.currentForm).triggerHandler("invalid-form", [ this ]), this.showErrors(), 
                this.valid();
            },
            checkForm: function() {
                this.prepareForm();
                for (var i = 0, elements = this.currentElements = this.elements(); elements[i]; i++) this.check(elements[i]);
                return this.valid();
            },
            // http://jqueryvalidation.org/Validator.element/
            element: function(element) {
                var rs, group, cleanElement = this.clean(element), checkElement = this.validationTargetFor(cleanElement), v = this, result = !0;
                // If this element is grouped, then validate all group elements already
                // containing a value
                // Hide error containers on last error
                // Add aria-invalid status for screen readers
                return void 0 === checkElement ? delete this.invalid[cleanElement.name] : (this.prepareElement(checkElement), 
                this.currentElements = $(checkElement), group = this.groups[checkElement.name], 
                group && $.each(this.groups, function(name, testgroup) {
                    testgroup === group && name !== checkElement.name && (cleanElement = v.validationTargetFor(v.clean(v.findByName(name))), 
                    cleanElement && cleanElement.name in v.invalid && (v.currentElements.push(cleanElement), 
                    result = result && v.check(cleanElement)));
                }), rs = this.check(checkElement) !== !1, result = result && rs, rs ? this.invalid[checkElement.name] = !1 : this.invalid[checkElement.name] = !0, 
                this.numberOfInvalids() || (this.toHide = this.toHide.add(this.containers)), this.showErrors(), 
                $(element).attr("aria-invalid", !rs)), result;
            },
            // http://jqueryvalidation.org/Validator.showErrors/
            showErrors: function(errors) {
                if (errors) {
                    var validator = this;
                    // Add items to error list and map
                    $.extend(this.errorMap, errors), this.errorList = $.map(this.errorMap, function(message, name) {
                        return {
                            message: message,
                            element: validator.findByName(name)[0]
                        };
                    }), // Remove items from success list
                    this.successList = $.grep(this.successList, function(element) {
                        return !(element.name in errors);
                    });
                }
                this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors();
            },
            // http://jqueryvalidation.org/Validator.resetForm/
            resetForm: function() {
                $.fn.resetForm && $(this.currentForm).resetForm(), this.invalid = {}, this.submitted = {}, 
                this.prepareForm(), this.hideErrors();
                var elements = this.elements().removeData("previousValue").removeAttr("aria-invalid");
                this.resetElements(elements);
            },
            resetElements: function(elements) {
                var i;
                if (this.settings.unhighlight) for (i = 0; elements[i]; i++) this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, ""), 
                this.findByName(elements[i].name).removeClass(this.settings.validClass); else elements.removeClass(this.settings.errorClass).removeClass(this.settings.validClass);
            },
            numberOfInvalids: function() {
                return this.objectLength(this.invalid);
            },
            objectLength: function(obj) {
                /* jshint unused: false */
                var i, count = 0;
                for (i in obj) obj[i] && count++;
                return count;
            },
            hideErrors: function() {
                this.hideThese(this.toHide);
            },
            hideThese: function(errors) {
                errors.not(this.containers).text(""), this.addWrapper(errors).hide();
            },
            valid: function() {
                return 0 === this.size();
            },
            size: function() {
                return this.errorList.length;
            },
            focusInvalid: function() {
                if (this.settings.focusInvalid) try {
                    $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin");
                } catch (e) {}
            },
            findLastActive: function() {
                var lastActive = this.lastActive;
                return lastActive && 1 === $.grep(this.errorList, function(n) {
                    return n.element.name === lastActive.name;
                }).length && lastActive;
            },
            elements: function() {
                var validator = this, rulesCache = {};
                // Select all valid inputs inside the form (no submit or reset buttons)
                return $(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function() {
                    var name = this.name || $(this).attr("name");
                    // Select only the first element for each name, and only those with rules specified
                    // For contenteditable
                    // Set form expando on contenteditable
                    // Select only the first element for each name, and only those with rules specified
                    return !name && validator.settings.debug && window.console && console.error("%o has no name assigned", this), 
                    this.hasAttribute("contenteditable") && (this.form = $(this).closest("form")[0]), 
                    name in rulesCache || !validator.objectLength($(this).rules()) ? !1 : (rulesCache[name] = !0, 
                    !0);
                });
            },
            clean: function(selector) {
                return $(selector)[0];
            },
            errors: function() {
                var errorClass = this.settings.errorClass.split(" ").join(".");
                return $(this.settings.errorElement + "." + errorClass, this.errorContext);
            },
            resetInternals: function() {
                this.successList = [], this.errorList = [], this.errorMap = {}, this.toShow = $([]), 
                this.toHide = $([]);
            },
            reset: function() {
                this.resetInternals(), this.currentElements = $([]);
            },
            prepareForm: function() {
                this.reset(), this.toHide = this.errors().add(this.containers);
            },
            prepareElement: function(element) {
                this.reset(), this.toHide = this.errorsFor(element);
            },
            elementValue: function(element) {
                var val, idx, $element = $(element), type = element.type;
                // Modern browser (chrome & safari)
                // Legacy browsers
                // Unix-based path
                // Windows-based path
                return "radio" === type || "checkbox" === type ? this.findByName(element.name).filter(":checked").val() : "number" === type && "undefined" != typeof element.validity ? element.validity.badInput ? "NaN" : $element.val() : (val = element.hasAttribute("contenteditable") ? $element.text() : $element.val(), 
                "file" === type ? "C:\\fakepath\\" === val.substr(0, 12) ? val.substr(12) : (idx = val.lastIndexOf("/"), 
                idx >= 0 ? val.substr(idx + 1) : (idx = val.lastIndexOf("\\"), idx >= 0 ? val.substr(idx + 1) : val)) : "string" == typeof val ? val.replace(/\r/g, "") : val);
            },
            check: function(element) {
                element = this.validationTargetFor(this.clean(element));
                var result, method, rule, rules = $(element).rules(), rulesCount = $.map(rules, function(n, i) {
                    return i;
                }).length, dependencyMismatch = !1, val = this.elementValue(element);
                // If a normalizer is defined for this element, then
                // call it to retreive the changed value instead
                // of using the real one.
                // Note that `this` in the normalizer is `element`.
                if ("function" == typeof rules.normalizer) {
                    if (val = rules.normalizer.call(element, val), "string" != typeof val) throw new TypeError("The normalizer should return a string value.");
                    // Delete the normalizer from rules to avoid treating
                    // it as a pre-defined method.
                    delete rules.normalizer;
                }
                for (method in rules) {
                    rule = {
                        method: method,
                        parameters: rules[method]
                    };
                    try {
                        // If a method indicates that the field is optional and therefore valid,
                        // don't mark it as valid when there are no other rules
                        if (result = $.validator.methods[method].call(this, val, element, rule.parameters), 
                        "dependency-mismatch" === result && 1 === rulesCount) {
                            dependencyMismatch = !0;
                            continue;
                        }
                        if (dependencyMismatch = !1, "pending" === result) return void (this.toHide = this.toHide.not(this.errorsFor(element)));
                        if (!result) return this.formatAndAdd(element, rule), !1;
                    } catch (e) {
                        throw this.settings.debug && window.console && console.log("Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e), 
                        e instanceof TypeError && (e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method."), 
                        e;
                    }
                }
                if (!dependencyMismatch) return this.objectLength(rules) && this.successList.push(element), 
                !0;
            },
            // Return the custom message for the given element and validation method
            // specified in the element's HTML5 data attribute
            // return the generic message if present and no method specific message is present
            customDataMessage: function(element, method) {
                return $(element).data("msg" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase()) || $(element).data("msg");
            },
            // Return the custom message for the given element name and validation method
            customMessage: function(name, method) {
                var m = this.settings.messages[name];
                return m && (m.constructor === String ? m : m[method]);
            },
            // Return the first defined argument, allowing empty strings
            findDefined: function() {
                for (var i = 0; i < arguments.length; i++) if (void 0 !== arguments[i]) return arguments[i];
                return void 0;
            },
            defaultMessage: function(element, rule) {
                var message = this.findDefined(this.customMessage(element.name, rule.method), this.customDataMessage(element, rule.method), // 'title' is never undefined, so handle empty string as undefined
                !this.settings.ignoreTitle && element.title || void 0, $.validator.messages[rule.method], "<strong>Warning: No message defined for " + element.name + "</strong>"), theregex = /\$?\{(\d+)\}/g;
                return "function" == typeof message ? message = message.call(this, rule.parameters, element) : theregex.test(message) && (message = $.validator.format(message.replace(theregex, "{$1}"), rule.parameters)), 
                message;
            },
            formatAndAdd: function(element, rule) {
                var message = this.defaultMessage(element, rule);
                this.errorList.push({
                    message: message,
                    element: element,
                    method: rule.method
                }), this.errorMap[element.name] = message, this.submitted[element.name] = message;
            },
            addWrapper: function(toToggle) {
                return this.settings.wrapper && (toToggle = toToggle.add(toToggle.parent(this.settings.wrapper))), 
                toToggle;
            },
            defaultShowErrors: function() {
                var i, elements, error;
                for (i = 0; this.errorList[i]; i++) error = this.errorList[i], this.settings.highlight && this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass), 
                this.showLabel(error.element, error.message);
                if (this.errorList.length && (this.toShow = this.toShow.add(this.containers)), this.settings.success) for (i = 0; this.successList[i]; i++) this.showLabel(this.successList[i]);
                if (this.settings.unhighlight) for (i = 0, elements = this.validElements(); elements[i]; i++) this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);
                this.toHide = this.toHide.not(this.toShow), this.hideErrors(), this.addWrapper(this.toShow).show();
            },
            validElements: function() {
                return this.currentElements.not(this.invalidElements());
            },
            invalidElements: function() {
                return $(this.errorList).map(function() {
                    return this.element;
                });
            },
            showLabel: function(element, message) {
                var place, group, errorID, v, error = this.errorsFor(element), elementID = this.idOrName(element), describedBy = $(element).attr("aria-describedby");
                error.length ? (// Refresh error/success class
                error.removeClass(this.settings.validClass).addClass(this.settings.errorClass), 
                // Replace message on existing label
                error.html(message)) : (// Create error element
                error = $("<" + this.settings.errorElement + ">").attr("id", elementID + "-error").addClass(this.settings.errorClass).html(message || ""), 
                // Maintain reference to the element to be placed into the DOM
                place = error, this.settings.wrapper && (// Make sure the element is visible, even in IE
                // actually showing the wrapped element is handled elsewhere
                place = error.hide().show().wrap("<" + this.settings.wrapper + "/>").parent()), 
                this.labelContainer.length ? this.labelContainer.append(place) : this.settings.errorPlacement ? this.settings.errorPlacement(place, $(element)) : place.insertAfter(element), 
                // Link error back to the element
                error.is("label") ? // If the error is a label, then associate using 'for'
                error.attr("for", elementID) : 0 === error.parents("label[for='" + this.escapeCssMeta(elementID) + "']").length && (errorID = error.attr("id"), 
                // Respect existing non-error aria-describedby
                describedBy ? describedBy.match(new RegExp("\\b" + this.escapeCssMeta(errorID) + "\\b")) || (// Add to end of list if not already present
                describedBy += " " + errorID) : describedBy = errorID, $(element).attr("aria-describedby", describedBy), 
                // If this element is grouped, then assign to all elements in the same group
                group = this.groups[element.name], group && (v = this, $.each(v.groups, function(name, testgroup) {
                    testgroup === group && $("[name='" + v.escapeCssMeta(name) + "']", v.currentForm).attr("aria-describedby", error.attr("id"));
                })))), !message && this.settings.success && (error.text(""), "string" == typeof this.settings.success ? error.addClass(this.settings.success) : this.settings.success(error, element)), 
                this.toShow = this.toShow.add(error);
            },
            errorsFor: function(element) {
                var name = this.escapeCssMeta(this.idOrName(element)), describer = $(element).attr("aria-describedby"), selector = "label[for='" + name + "'], label[for='" + name + "'] *";
                // 'aria-describedby' should directly reference the error element
                return describer && (selector = selector + ", #" + this.escapeCssMeta(describer).replace(/\s+/g, ", #")), 
                this.errors().filter(selector);
            },
            // See https://api.jquery.com/category/selectors/, for CSS
            // meta-characters that should be escaped in order to be used with JQuery
            // as a literal part of a name/id or any selector.
            escapeCssMeta: function(string) {
                return string.replace(/([\\!"#$%&'()*+,.\/:;<=>?@\[\]^`{|}~])/g, "\\$1");
            },
            idOrName: function(element) {
                return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
            },
            validationTargetFor: function(element) {
                // Always apply ignore filter
                // If radio/checkbox, validate first element in group instead
                return this.checkable(element) && (element = this.findByName(element.name)), $(element).not(this.settings.ignore)[0];
            },
            checkable: function(element) {
                return /radio|checkbox/i.test(element.type);
            },
            findByName: function(name) {
                return $(this.currentForm).find("[name='" + this.escapeCssMeta(name) + "']");
            },
            getLength: function(value, element) {
                switch (element.nodeName.toLowerCase()) {
                  case "select":
                    return $("option:selected", element).length;

                  case "input":
                    if (this.checkable(element)) return this.findByName(element.name).filter(":checked").length;
                }
                return value.length;
            },
            depend: function(param, element) {
                return this.dependTypes[typeof param] ? this.dependTypes[typeof param](param, element) : !0;
            },
            dependTypes: {
                "boolean": function(param) {
                    return param;
                },
                string: function(param, element) {
                    return !!$(param, element.form).length;
                },
                "function": function(param, element) {
                    return param(element);
                }
            },
            optional: function(element) {
                var val = this.elementValue(element);
                return !$.validator.methods.required.call(this, val, element) && "dependency-mismatch";
            },
            startRequest: function(element) {
                this.pending[element.name] || (this.pendingRequest++, $(element).addClass(this.settings.pendingClass), 
                this.pending[element.name] = !0);
            },
            stopRequest: function(element, valid) {
                this.pendingRequest--, // Sometimes synchronization fails, make sure pendingRequest is never < 0
                this.pendingRequest < 0 && (this.pendingRequest = 0), delete this.pending[element.name], 
                $(element).removeClass(this.settings.pendingClass), valid && 0 === this.pendingRequest && this.formSubmitted && this.form() ? ($(this.currentForm).submit(), 
                this.formSubmitted = !1) : !valid && 0 === this.pendingRequest && this.formSubmitted && ($(this.currentForm).triggerHandler("invalid-form", [ this ]), 
                this.formSubmitted = !1);
            },
            previousValue: function(element, method) {
                return $.data(element, "previousValue") || $.data(element, "previousValue", {
                    old: null,
                    valid: !0,
                    message: this.defaultMessage(element, {
                        method: method
                    })
                });
            },
            // Cleans up all forms and elements, removes validator-specific events
            destroy: function() {
                this.resetForm(), $(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur");
            }
        },
        classRuleSettings: {
            required: {
                required: !0
            },
            email: {
                email: !0
            },
            url: {
                url: !0
            },
            date: {
                date: !0
            },
            dateISO: {
                dateISO: !0
            },
            number: {
                number: !0
            },
            digits: {
                digits: !0
            },
            creditcard: {
                creditcard: !0
            }
        },
        addClassRules: function(className, rules) {
            className.constructor === String ? this.classRuleSettings[className] = rules : $.extend(this.classRuleSettings, className);
        },
        classRules: function(element) {
            var rules = {}, classes = $(element).attr("class");
            return classes && $.each(classes.split(" "), function() {
                this in $.validator.classRuleSettings && $.extend(rules, $.validator.classRuleSettings[this]);
            }), rules;
        },
        normalizeAttributeRule: function(rules, type, method, value) {
            // Convert the value to a number for number inputs, and for text for backwards compability
            // allows type="date" and others to be compared as strings
            /min|max|step/.test(method) && (null === type || /number|range|text/.test(type)) && (value = Number(value), 
            // Support Opera Mini, which returns NaN for undefined minlength
            isNaN(value) && (value = void 0)), value || 0 === value ? rules[method] = value : type === method && "range" !== type && (// Exception: the jquery validate 'range' method
            // does not test for the html5 'range' type
            rules[method] = !0);
        },
        attributeRules: function(element) {
            var method, value, rules = {}, $element = $(element), type = element.getAttribute("type");
            for (method in $.validator.methods) // Support for <input required> in both html5 and older browsers
            "required" === method ? (value = element.getAttribute(method), // Some browsers return an empty string for the required attribute
            // and non-HTML5 browsers might have required="" markup
            "" === value && (value = !0), // Force non-HTML5 browsers to return bool
            value = !!value) : value = $element.attr(method), this.normalizeAttributeRule(rules, type, method, value);
            // 'maxlength' may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
            return rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength) && delete rules.maxlength, 
            rules;
        },
        dataRules: function(element) {
            var method, value, rules = {}, $element = $(element), type = element.getAttribute("type");
            for (method in $.validator.methods) value = $element.data("rule" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase()), 
            this.normalizeAttributeRule(rules, type, method, value);
            return rules;
        },
        staticRules: function(element) {
            var rules = {}, validator = $.data(element.form, "validator");
            return validator.settings.rules && (rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {}), 
            rules;
        },
        normalizeRules: function(rules, element) {
            // Handle dependency check
            // Evaluate parameters
            // Clean number parameters
            // Auto-create ranges
            return $.each(rules, function(prop, val) {
                // Ignore rule when param is explicitly false, eg. required:false
                if (val === !1) return void delete rules[prop];
                if (val.param || val.depends) {
                    var keepRule = !0;
                    switch (typeof val.depends) {
                      case "string":
                        keepRule = !!$(val.depends, element.form).length;
                        break;

                      case "function":
                        keepRule = val.depends.call(element, element);
                    }
                    keepRule ? rules[prop] = void 0 !== val.param ? val.param : !0 : ($.data(element.form, "validator").resetElements($(element)), 
                    delete rules[prop]);
                }
            }), $.each(rules, function(rule, parameter) {
                rules[rule] = $.isFunction(parameter) && "normalizer" !== rule ? parameter(element) : parameter;
            }), $.each([ "minlength", "maxlength" ], function() {
                rules[this] && (rules[this] = Number(rules[this]));
            }), $.each([ "rangelength", "range" ], function() {
                var parts;
                rules[this] && ($.isArray(rules[this]) ? rules[this] = [ Number(rules[this][0]), Number(rules[this][1]) ] : "string" == typeof rules[this] && (parts = rules[this].replace(/[\[\]]/g, "").split(/[\s,]+/), 
                rules[this] = [ Number(parts[0]), Number(parts[1]) ]));
            }), $.validator.autoCreateRanges && (null != rules.min && null != rules.max && (rules.range = [ rules.min, rules.max ], 
            delete rules.min, delete rules.max), null != rules.minlength && null != rules.maxlength && (rules.rangelength = [ rules.minlength, rules.maxlength ], 
            delete rules.minlength, delete rules.maxlength)), rules;
        },
        // Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
        normalizeRule: function(data) {
            if ("string" == typeof data) {
                var transformed = {};
                $.each(data.split(/\s/), function() {
                    transformed[this] = !0;
                }), data = transformed;
            }
            return data;
        },
        // http://jqueryvalidation.org/jQuery.validator.addMethod/
        addMethod: function(name, method, message) {
            $.validator.methods[name] = method, $.validator.messages[name] = void 0 !== message ? message : $.validator.messages[name], 
            method.length < 3 && $.validator.addClassRules(name, $.validator.normalizeRule(name));
        },
        // http://jqueryvalidation.org/jQuery.validator.methods/
        methods: {
            // http://jqueryvalidation.org/required-method/
            required: function(value, element, param) {
                // Check if dependency is met
                if (!this.depend(param, element)) return "dependency-mismatch";
                if ("select" === element.nodeName.toLowerCase()) {
                    // Could be an array for select-multiple or a string, both are fine this way
                    var val = $(element).val();
                    return val && val.length > 0;
                }
                return this.checkable(element) ? this.getLength(value, element) > 0 : value.length > 0;
            },
            // http://jqueryvalidation.org/email-method/
            email: function(value, element) {
                // From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address
                // Retrieved 2014-01-14
                // If you have a problem with this implementation, report a bug against the above spec
                // Or use custom methods to implement your own email validation
                return this.optional(element) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value);
            },
            // http://jqueryvalidation.org/url-method/
            url: function(value, element) {
                // Copyright (c) 2010-2013 Diego Perini, MIT licensed
                // https://gist.github.com/dperini/729294
                // see also https://mathiasbynens.be/demo/url-regex
                // modified to allow protocol-relative URLs
                return this.optional(element) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[\/?#]\S*)?$/i.test(value);
            },
            // http://jqueryvalidation.org/date-method/
            date: function(value, element) {
                return this.optional(element) || !/Invalid|NaN/.test(new Date(value).toString());
            },
            // http://jqueryvalidation.org/dateISO-method/
            dateISO: function(value, element) {
                return this.optional(element) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
            },
            // http://jqueryvalidation.org/number-method/
            number: function(value, element) {
                return this.optional(element) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
            },
            // http://jqueryvalidation.org/digits-method/
            digits: function(value, element) {
                return this.optional(element) || /^\d+$/.test(value);
            },
            // http://jqueryvalidation.org/minlength-method/
            minlength: function(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length >= param;
            },
            // http://jqueryvalidation.org/maxlength-method/
            maxlength: function(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || param >= length;
            },
            // http://jqueryvalidation.org/rangelength-method/
            rangelength: function(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length >= param[0] && length <= param[1];
            },
            // http://jqueryvalidation.org/min-method/
            min: function(value, element, param) {
                return this.optional(element) || value >= param;
            },
            // http://jqueryvalidation.org/max-method/
            max: function(value, element, param) {
                return this.optional(element) || param >= value;
            },
            // http://jqueryvalidation.org/range-method/
            range: function(value, element, param) {
                return this.optional(element) || value >= param[0] && value <= param[1];
            },
            // http://jqueryvalidation.org/step-method/
            step: function(value, element, param) {
                var type = $(element).attr("type"), errorMessage = "Step attribute on input type " + type + " is not supported.", supportedTypes = [ "text", "number", "range" ], re = new RegExp("\\b" + type + "\\b"), notSupported = type && !re.test(supportedTypes.join());
                // Works only for text, number and range input types
                // TODO find a way to support input types date, datetime, datetime-local, month, time and week
                if (notSupported) throw new Error(errorMessage);
                return this.optional(element) || value % param === 0;
            },
            // http://jqueryvalidation.org/equalTo-method/
            equalTo: function(value, element, param) {
                // Bind to the blur event of the target in order to revalidate whenever the target field is updated
                var target = $(param);
                return this.settings.onfocusout && target.not(".validate-equalTo-blur").length && target.addClass("validate-equalTo-blur").on("blur.validate-equalTo", function() {
                    $(element).valid();
                }), value === target.val();
            },
            // http://jqueryvalidation.org/remote-method/
            remote: function(value, element, param, method) {
                if (this.optional(element)) return "dependency-mismatch";
                method = "string" == typeof method && method || "remote";
                var validator, data, optionDataString, previous = this.previousValue(element, method);
                return this.settings.messages[element.name] || (this.settings.messages[element.name] = {}), 
                previous.originalMessage = previous.originalMessage || this.settings.messages[element.name][method], 
                this.settings.messages[element.name][method] = previous.message, param = "string" == typeof param && {
                    url: param
                } || param, optionDataString = $.param($.extend({
                    data: value
                }, param.data)), previous.old === optionDataString ? previous.valid : (previous.old = optionDataString, 
                validator = this, this.startRequest(element), data = {}, data[element.name] = value, 
                $.ajax($.extend(!0, {
                    mode: "abort",
                    port: "validate" + element.name,
                    dataType: "json",
                    data: data,
                    context: validator.currentForm,
                    success: function(response) {
                        var errors, message, submitted, valid = response === !0 || "true" === response;
                        validator.settings.messages[element.name][method] = previous.originalMessage, valid ? (submitted = validator.formSubmitted, 
                        validator.resetInternals(), validator.toHide = validator.errorsFor(element), validator.formSubmitted = submitted, 
                        validator.successList.push(element), validator.invalid[element.name] = !1, validator.showErrors()) : (errors = {}, 
                        message = response || validator.defaultMessage(element, {
                            method: method,
                            parameters: value
                        }), errors[element.name] = previous.message = message, validator.invalid[element.name] = !0, 
                        validator.showErrors(errors)), previous.valid = valid, validator.stopRequest(element, valid);
                    }
                }, param)), "pending");
            }
        }
    });
    // Ajax mode: abort
    // usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
    // if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()
    var ajax, pendingRequests = {};
    // Use a prefilter if available (1.5+)
    $.ajaxPrefilter ? $.ajaxPrefilter(function(settings, _, xhr) {
        var port = settings.port;
        "abort" === settings.mode && (pendingRequests[port] && pendingRequests[port].abort(), 
        pendingRequests[port] = xhr);
    }) : (// Proxy ajax
    ajax = $.ajax, $.ajax = function(settings) {
        var mode = ("mode" in settings ? settings : $.ajaxSettings).mode, port = ("port" in settings ? settings : $.ajaxSettings).port;
        return "abort" === mode ? (pendingRequests[port] && pendingRequests[port].abort(), 
        pendingRequests[port] = ajax.apply(this, arguments), pendingRequests[port]) : ajax.apply(this, arguments);
    });
}), function(window, document, undefined) {
    /**
   * is returns a boolean if the typeof an obj is exactly type.
   *
   * @access private
   * @function is
   * @param {*} obj - A thing we want to check the type of
   * @param {string} type - A string to compare the typeof against
   * @returns {boolean}
   */
    function is(obj, type) {
        return typeof obj === type;
    }
    /**
   * Run through all tests and detect their support in the current UA.
   *
   * @access private
   */
    function testRunner() {
        var featureNames, feature, aliasIdx, result, nameIdx, featureName, featureNameSplit;
        for (var featureIdx in tests) if (tests.hasOwnProperty(featureIdx)) {
            // run the test, throw the return value into the Modernizr,
            // then based on that boolean, define an appropriate className
            // and push it into an array of classes we'll join later.
            //
            // If there is no name, it's an 'async' test that is run,
            // but not directly added to the object. That should
            // be done with a post-run addTest call.
            if (featureNames = [], feature = tests[featureIdx], feature.name && (featureNames.push(feature.name.toLowerCase()), 
            feature.options && feature.options.aliases && feature.options.aliases.length)) // Add all the aliases into the names list
            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());
            // Set each of the names on the Modernizr object
            for (// Run the test, or use the raw value if it's not a function
            result = is(feature.fn, "function") ? feature.fn() : feature.fn, nameIdx = 0; nameIdx < featureNames.length; nameIdx++) featureName = featureNames[nameIdx], 
            // Support dot properties as sub tests. We don't do checking to make sure
            // that the implied parent tests have been added. You must call them in
            // order (either in the test, or make the parent test a dependency).
            //
            // Cap it to TWO to make the logic simple and because who needs that kind of subtesting
            // hashtag famous last words
            featureNameSplit = featureName.split("."), 1 === featureNameSplit.length ? Modernizr[featureNameSplit[0]] = result : (// cast to a Boolean, if not one already
            /* jshint -W053 */
            !Modernizr[featureNameSplit[0]] || Modernizr[featureNameSplit[0]] instanceof Boolean || (Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]])), 
            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result), classes.push((result ? "" : "no-") + featureNameSplit.join("-"));
        }
    }
    /**
   * setClasses takes an array of class names and adds them to the root element
   *
   * @access private
   * @function setClasses
   * @param {string[]} classes - Array of class names
   */
    // Pass in an and array of class names, e.g.:
    //  ['no-webp', 'borderradius', ...]
    function setClasses(classes) {
        var className = docElement.className, classPrefix = Modernizr._config.classPrefix || "";
        // Change `no-js` to `js` (independently of the `enableClasses` option)
        // Handle classPrefix on this too
        if (isSVG && (className = className.baseVal), Modernizr._config.enableJSClass) {
            var reJS = new RegExp("(^|\\s)" + classPrefix + "no-js(\\s|$)");
            className = className.replace(reJS, "$1" + classPrefix + "js$2");
        }
        Modernizr._config.enableClasses && (// Add the new classes
        className += " " + classPrefix + classes.join(" " + classPrefix), isSVG ? docElement.className.baseVal = className : docElement.className = className);
    }
    /**
   * createElement is a convenience wrapper around document.createElement. Since we
   * use createElement all over the place, this allows for (slightly) smaller code
   * as well as abstracting away issues with creating elements in contexts other than
   * HTML documents (e.g. SVG documents).
   *
   * @access private
   * @function createElement
   * @returns {HTMLElement|SVGElement} An HTML or SVG element
   */
    function createElement() {
        return "function" != typeof document.createElement ? document.createElement(arguments[0]) : isSVG ? document.createElementNS.call(document, "http://www.w3.org/2000/svg", arguments[0]) : document.createElement.apply(document, arguments);
    }
    /**
   * getBody returns the body of a document, or an element that can stand in for
   * the body if a real body does not exist
   *
   * @access private
   * @function getBody
   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an
   * artificially created element that stands in for the body
   */
    function getBody() {
        // After page load injecting a fake body doesn't work so check if body exists
        var body = document.body;
        // Can't use the real body create a fake one.
        return body || (body = createElement(isSVG ? "svg" : "body"), body.fake = !0), body;
    }
    /**
   * injectElementWithStyles injects an element with style element and some CSS rules
   *
   * @access private
   * @function injectElementWithStyles
   * @param {string} rule - String representing a css rule
   * @param {function} callback - A function that is used to test the injected element
   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected
   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes
   * @returns {boolean}
   */
    function injectElementWithStyles(rule, callback, nodes, testnames) {
        var style, ret, node, docOverflow, mod = "modernizr", div = createElement("div"), body = getBody();
        if (parseInt(nodes, 10)) // In order not to give false positives we create a node for each test
        // This also allows the method to scale for unspecified uses
        for (;nodes--; ) node = createElement("div"), node.id = testnames ? testnames[nodes] : mod + (nodes + 1), 
        div.appendChild(node);
        // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.
        // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270
        //avoid crashing IE8, if background image is used
        //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible
        // If this is done after page load we don't want to remove the body so check if body exists
        // Trigger layout so kinetic scrolling isn't disabled in iOS6+
        return style = createElement("style"), style.type = "text/css", style.id = "s" + mod, 
        (body.fake ? body : div).appendChild(style), body.appendChild(div), style.styleSheet ? style.styleSheet.cssText = rule : style.appendChild(document.createTextNode(rule)), 
        div.id = mod, body.fake && (body.style.background = "", body.style.overflow = "hidden", 
        docOverflow = docElement.style.overflow, docElement.style.overflow = "hidden", docElement.appendChild(body)), 
        ret = callback(div, rule), body.fake ? (body.parentNode.removeChild(body), docElement.style.overflow = docOverflow, 
        docElement.offsetHeight) : div.parentNode.removeChild(div), !!ret;
    }
    /**
   * contains checks to see if a string contains another string
   *
   * @access private
   * @function contains
   * @param {string} str - The string we want to check for substrings
   * @param {string} substr - The substring we want to search the first string for
   * @returns {boolean}
   */
    function contains(str, substr) {
        return !!~("" + str).indexOf(substr);
    }
    /**
   * cssToDOM takes a kebab-case string and converts it to camelCase
   * e.g. box-sizing -> boxSizing
   *
   * @access private
   * @function cssToDOM
   * @param {string} name - String name of kebab-case prop we want to convert
   * @returns {string} The camelCase version of the supplied name
   */
    function cssToDOM(name) {
        return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {
            return m1 + m2.toUpperCase();
        }).replace(/^-/, "");
    }
    /**
   * fnBind is a super small [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) polyfill.
   *
   * @access private
   * @function fnBind
   * @param {function} fn - a function you want to change `this` reference to
   * @param {object} that - the `this` you want to call the function with
   * @returns {function} The wrapped version of the supplied function
   */
    function fnBind(fn, that) {
        return function() {
            return fn.apply(that, arguments);
        };
    }
    /**
   * testDOMProps is a generic DOM property test; if a browser supports
   *   a certain property, it won't return undefined for it.
   */
    function testDOMProps(props, obj, elem) {
        var item;
        for (var i in props) if (props[i] in obj) // return the property name as a string
        // return the property name as a string
        // let's bind a function
        return elem === !1 ? props[i] : (item = obj[props[i]], is(item, "function") ? fnBind(item, elem || obj) : item);
        return !1;
    }
    /**
   * domToCSS takes a camelCase string and converts it to kebab-case
   * e.g. boxSizing -> box-sizing
   *
   * @access private
   * @function domToCSS
   * @param {string} name - String name of camelCase prop we want to convert
   * @returns {string} The kebab-case version of the supplied name
   */
    function domToCSS(name) {
        return name.replace(/([A-Z])/g, function(str, m1) {
            return "-" + m1.toLowerCase();
        }).replace(/^ms-/, "-ms-");
    }
    /**
   * nativeTestProps allows for us to use native feature detection functionality if available.
   * some prefixed form, or false, in the case of an unsupported rule
   *
   * @access private
   * @function nativeTestProps
   * @param {array} props - An array of property names
   * @param {string} value - A string representing the value we want to check via @supports
   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise
   */
    // Accepts a list of property names and a single value
    // Returns `undefined` if native detection not available
    function nativeTestProps(props, value) {
        var i = props.length;
        // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface
        if ("CSS" in window && "supports" in window.CSS) {
            // Try every prefixed variant of the property
            for (;i--; ) if (window.CSS.supports(domToCSS(props[i]), value)) return !0;
            return !1;
        }
        if ("CSSSupportsRule" in window) {
            for (// Build a condition string for every prefixed variant
            var conditionText = []; i--; ) conditionText.push("(" + domToCSS(props[i]) + ":" + value + ")");
            return conditionText = conditionText.join(" or "), injectElementWithStyles("@supports (" + conditionText + ") { #modernizr { position: absolute; } }", function(node) {
                return "absolute" == getComputedStyle(node, null).position;
            });
        }
        return undefined;
    }
    // testProps is a generic CSS / DOM property test.
    // In testing support for a given CSS property, it's legit to test:
    //    `elem.style[styleName] !== undefined`
    // If the property is supported it will return an empty string,
    // if unsupported it will return undefined.
    // We'll take advantage of this quick test and skip setting a style
    // on our modernizr element, but instead just testing undefined vs
    // empty string.
    // Property names can be provided in either camelCase or kebab-case.
    function testProps(props, prefixed, value, skipValueTest) {
        // Delete the objects if we created them.
        function cleanElems() {
            afterInit && (delete mStyle.style, delete mStyle.modElem);
        }
        // Try native detect first
        if (skipValueTest = is(skipValueTest, "undefined") ? !1 : skipValueTest, !is(value, "undefined")) {
            var result = nativeTestProps(props, value);
            if (!is(result, "undefined")) return result;
        }
        for (// Otherwise do it properly
        var afterInit, i, propsLength, prop, before, elems = [ "modernizr", "tspan" ]; !mStyle.style; ) afterInit = !0, 
        mStyle.modElem = createElement(elems.shift()), mStyle.style = mStyle.modElem.style;
        for (propsLength = props.length, i = 0; propsLength > i; i++) if (prop = props[i], 
        before = mStyle.style[prop], contains(prop, "-") && (prop = cssToDOM(prop)), mStyle.style[prop] !== undefined) {
            // If value to test has been passed in, do a set-and-check test.
            // 0 (integer) is a valid property value, so check that `value` isn't
            // undefined, rather than just checking it's truthy.
            if (skipValueTest || is(value, "undefined")) return cleanElems(), "pfx" == prefixed ? prop : !0;
            // Needs a try catch block because of old IE. This is slow, but will
            // be avoided in most cases because `skipValueTest` will be used.
            try {
                mStyle.style[prop] = value;
            } catch (e) {}
            // If the property value has changed, we assume the value used is
            // supported. If `value` is empty string, it'll fail here (because
            // it hasn't changed), which matches how browsers have implemented
            // CSS.supports()
            if (mStyle.style[prop] != before) return cleanElems(), "pfx" == prefixed ? prop : !0;
        }
        return cleanElems(), !1;
    }
    /**
   * testPropsAll tests a list of DOM properties we want to check against.
   * We specify literally ALL possible (known and/or likely) properties on
   * the element including the non-vendor prefixed one, for forward-
   * compatibility.
   */
    function testPropsAll(prop, prefixed, elem, value, skipValueTest) {
        var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1), props = (prop + " " + cssomPrefixes.join(ucProp + " ") + ucProp).split(" ");
        // did they call .prefixed('boxSizing') or are we just testing a prop?
        // did they call .prefixed('boxSizing') or are we just testing a prop?
        return is(prefixed, "string") || is(prefixed, "undefined") ? testProps(props, prefixed, value, skipValueTest) : (props = (prop + " " + domPrefixes.join(ucProp + " ") + ucProp).split(" "), 
        testDOMProps(props, prefixed, elem));
    }
    /**
   * testAllProps determines whether a given CSS property is supported in the browser
   *
   * @memberof Modernizr
   * @name Modernizr.testAllProps
   * @optionName Modernizr.testAllProps()
   * @optionProp testAllProps
   * @access public
   * @function testAllProps
   * @param {string} prop - String naming the property to test (either camelCase or kebab-case)
   * @param {string} [value] - String of the value to test
   * @param {boolean} [skipValueTest=false] - Whether to skip testing that the value is supported when using non-native detection
   * @example
   *
   * testAllProps determines whether a given CSS property, in some prefixed form,
   * is supported by the browser.
   *
   * ```js
   * testAllProps('boxSizing')  // true
   * ```
   *
   * It can optionally be given a CSS value in string form to test if a property
   * value is valid
   *
   * ```js
   * testAllProps('display', 'block') // true
   * testAllProps('display', 'penguin') // false
   * ```
   *
   * A boolean can be passed as a third parameter to skip the value check when
   * native detection (@supports) isn't available.
   *
   * ```js
   * testAllProps('shapeOutside', 'content-box', true);
   * ```
   */
    function testAllProps(prop, value, skipValueTest) {
        return testPropsAll(prop, undefined, undefined, value, skipValueTest);
    }
    var classes = [], tests = [], ModernizrProto = {
        // The current version, dummy
        _version: "3.1.0",
        // Any settings that don't work as separate modules
        // can go in here as configuration.
        _config: {
            classPrefix: "",
            enableClasses: !0,
            enableJSClass: !0,
            usePrefixes: !0
        },
        // Queue of tests
        _q: [],
        // Stub these for people who are listening
        on: function(test, cb) {
            // I don't really think people should do this, but we can
            // safe guard it a bit.
            // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.
            // This is in case people listen to synchronous tests. I would leave it out,
            // but the code to *disallow* sync tests in the real version of this
            // function is actually larger than this.
            var self = this;
            setTimeout(function() {
                cb(self[test]);
            }, 0);
        },
        addTest: function(name, fn, options) {
            tests.push({
                name: name,
                fn: fn,
                options: options
            });
        },
        addAsyncTest: function(fn) {
            tests.push({
                name: null,
                fn: fn
            });
        }
    }, Modernizr = function() {};
    Modernizr.prototype = ModernizrProto, // Leak modernizr globally when you `require` it rather than force it here.
    // Overwrite name so constructor name is nicer :D
    Modernizr = new Modernizr();
    /**
   * List of property values to set for css tests. See ticket #21
   * http://git.io/vUGl4
   *
   * @memberof Modernizr
   * @name Modernizr._prefixes
   * @optionName Modernizr._prefixes
   * @optionProp prefixes
   * @access public
   * @example
   *
   * Modernizr._prefixes is the internal list of prefixes that we test against
   * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply
   * an array of kebab-case vendor prefixes you can use within your code.
   *
   * Some common use cases include
   *
   * Generating all possible prefixed version of a CSS property
   * ```js
   * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');
   *
   * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'
   * ```
   *
   * Generating all possible prefixed version of a CSS value
   * ```js
   * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';
   *
   * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'
   * ```
   */
    var prefixes = ModernizrProto._config.usePrefixes ? " -webkit- -moz- -o- -ms- ".split(" ") : [];
    // expose these for the plugin API. Look in the source for how to join() them against your input
    ModernizrProto._prefixes = prefixes;
    /**
   * docElement is a convenience wrapper to grab the root element of the document
   *
   * @access private
   * @returns {HTMLElement|SVGElement} The root element of the document
   */
    var docElement = document.documentElement, omPrefixes = "Moz O ms Webkit", domPrefixes = ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(" ") : [];
    ModernizrProto._domPrefixes = domPrefixes;
    /**
   * A convenience helper to check if the document we are running in is an SVG document
   *
   * @access private
   * @returns {boolean}
   */
    var isSVG = "svg" === docElement.nodeName.toLowerCase();
    isSVG || !function(window, document) {
        /*--------------------------------------------------------------------------*/
        /**
       * Creates a style sheet with the given CSS text and adds it to the document.
       * @private
       * @param {Document} ownerDocument The document.
       * @param {String} cssText The CSS text.
       * @returns {StyleSheet} The style element.
       */
        function addStyleSheet(ownerDocument, cssText) {
            var p = ownerDocument.createElement("p"), parent = ownerDocument.getElementsByTagName("head")[0] || ownerDocument.documentElement;
            return p.innerHTML = "x<style>" + cssText + "</style>", parent.insertBefore(p.lastChild, parent.firstChild);
        }
        /**
       * Returns the value of `html5.elements` as an array.
       * @private
       * @returns {Array} An array of shived element node names.
       */
        function getElements() {
            var elements = html5.elements;
            return "string" == typeof elements ? elements.split(" ") : elements;
        }
        /**
       * Extends the built-in list of html5 elements
       * @memberOf html5
       * @param {String|Array} newElements whitespace separated list or array of new element names to shiv
       * @param {Document} ownerDocument The context document.
       */
        function addElements(newElements, ownerDocument) {
            var elements = html5.elements;
            "string" != typeof elements && (elements = elements.join(" ")), "string" != typeof newElements && (newElements = newElements.join(" ")), 
            html5.elements = elements + " " + newElements, shivDocument(ownerDocument);
        }
        /**
       * Returns the data associated to the given document
       * @private
       * @param {Document} ownerDocument The document.
       * @returns {Object} An object of data.
       */
        function getExpandoData(ownerDocument) {
            var data = expandoData[ownerDocument[expando]];
            return data || (data = {}, expanID++, ownerDocument[expando] = expanID, expandoData[expanID] = data), 
            data;
        }
        /**
       * returns a shived element for the given nodeName and document
       * @memberOf html5
       * @param {String} nodeName name of the element
       * @param {Document|DocumentFragment} ownerDocument The context document.
       * @returns {Object} The shived element.
       */
        function createElement(nodeName, ownerDocument, data) {
            if (ownerDocument || (ownerDocument = document), supportsUnknownElements) return ownerDocument.createElement(nodeName);
            data || (data = getExpandoData(ownerDocument));
            var node;
            // Avoid adding some elements to fragments in IE < 9 because
            // * Attributes like `name` or `type` cannot be set/changed once an element
            //   is inserted into a document/fragment
            // * Link elements with `src` attributes that are inaccessible, as with
            //   a 403 response, will cause the tab/window to crash
            // * Script elements appended to fragments will execute when their `src`
            //   or `text` property is set
            return node = data.cache[nodeName] ? data.cache[nodeName].cloneNode() : saveClones.test(nodeName) ? (data.cache[nodeName] = data.createElem(nodeName)).cloneNode() : data.createElem(nodeName), 
            !node.canHaveChildren || reSkip.test(nodeName) || node.tagUrn ? node : data.frag.appendChild(node);
        }
        /**
       * returns a shived DocumentFragment for the given document
       * @memberOf html5
       * @param {Document} ownerDocument The context document.
       * @returns {Object} The shived DocumentFragment.
       */
        function createDocumentFragment(ownerDocument, data) {
            if (ownerDocument || (ownerDocument = document), supportsUnknownElements) return ownerDocument.createDocumentFragment();
            data = data || getExpandoData(ownerDocument);
            for (var clone = data.frag.cloneNode(), i = 0, elems = getElements(), l = elems.length; l > i; i++) clone.createElement(elems[i]);
            return clone;
        }
        /**
       * Shivs the `createElement` and `createDocumentFragment` methods of the document.
       * @private
       * @param {Document|DocumentFragment} ownerDocument The document.
       * @param {Object} data of the document.
       */
        function shivMethods(ownerDocument, data) {
            data.cache || (data.cache = {}, data.createElem = ownerDocument.createElement, data.createFrag = ownerDocument.createDocumentFragment, 
            data.frag = data.createFrag()), ownerDocument.createElement = function(nodeName) {
                //abort shiv
                //abort shiv
                return html5.shivMethods ? createElement(nodeName, ownerDocument, data) : data.createElem(nodeName);
            }, ownerDocument.createDocumentFragment = Function("h,f", "return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&(" + // unroll the `createElement` calls
            getElements().join().replace(/[\w\-:]+/g, function(nodeName) {
                return data.createElem(nodeName), data.frag.createElement(nodeName), 'c("' + nodeName + '")';
            }) + ");return n}")(html5, data.frag);
        }
        /*--------------------------------------------------------------------------*/
        /**
       * Shivs the given document.
       * @memberOf html5
       * @param {Document} ownerDocument The document to shiv.
       * @returns {Document} The shived document.
       */
        function shivDocument(ownerDocument) {
            ownerDocument || (ownerDocument = document);
            var data = getExpandoData(ownerDocument);
            // corrects block display not defined in IE6/7/8/9
            return !html5.shivCSS || supportsHtml5Styles || data.hasCSS || (data.hasCSS = !!addStyleSheet(ownerDocument, "article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")), 
            supportsUnknownElements || shivMethods(ownerDocument, data), ownerDocument;
        }
        /*jshint evil:true */
        /** version */
        var supportsHtml5Styles, supportsUnknownElements, version = "3.7.3", options = window.html5 || {}, reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i, saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i, expando = "_html5shiv", expanID = 0, expandoData = {};
        !function() {
            try {
                var a = document.createElement("a");
                a.innerHTML = "<xyz></xyz>", //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles
                supportsHtml5Styles = "hidden" in a, supportsUnknownElements = 1 == a.childNodes.length || function() {
                    // assign a false positive if unable to shiv
                    document.createElement("a");
                    var frag = document.createDocumentFragment();
                    return "undefined" == typeof frag.cloneNode || "undefined" == typeof frag.createDocumentFragment || "undefined" == typeof frag.createElement;
                }();
            } catch (e) {
                // assign a false positive if detection fails => unable to shiv
                supportsHtml5Styles = !0, supportsUnknownElements = !0;
            }
        }();
        /*--------------------------------------------------------------------------*/
        /**
       * The `html5` object is exposed so that more elements can be shived and
       * existing shiving can be detected on iframes.
       * @type Object
       * @example
       *
       * // options can be changed before the script is included
       * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };
       */
        var html5 = {
            /**
         * An array or space separated string of node names of the elements to shiv.
         * @memberOf html5
         * @type Array|String
         */
            elements: options.elements || "abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video",
            /**
         * current version of html5shiv
         */
            version: version,
            /**
         * A flag to indicate that the HTML5 style sheet should be inserted.
         * @memberOf html5
         * @type Boolean
         */
            shivCSS: options.shivCSS !== !1,
            /**
         * Is equal to true if a browser supports creating unknown/HTML5 elements
         * @memberOf html5
         * @type boolean
         */
            supportsUnknownElements: supportsUnknownElements,
            /**
         * A flag to indicate that the document's `createElement` and `createDocumentFragment`
         * methods should be overwritten.
         * @memberOf html5
         * @type Boolean
         */
            shivMethods: options.shivMethods !== !1,
            /**
         * A string to describe the type of `html5` object ("default" or "default print").
         * @memberOf html5
         * @type String
         */
            type: "default",
            // shivs the document according to the specified `html5` object options
            shivDocument: shivDocument,
            //creates a shived element
            createElement: createElement,
            //creates a shived documentFragment
            createDocumentFragment: createDocumentFragment,
            //extends list of elements
            addElements: addElements
        };
        /*--------------------------------------------------------------------------*/
        // expose html5
        window.html5 = html5, // shiv the document
        shivDocument(document), "object" == typeof module && module.exports && (module.exports = html5);
    }("undefined" != typeof window ? window : this, document), /*!
{
  "name": "CSS Gradients",
  "caniuse": "css-gradients",
  "property": "cssgradients",
  "tags": ["css"],
  "knownBugs": ["False-positives on webOS (https://github.com/Modernizr/Modernizr/issues/202)"],
  "notes": [{
    "name": "Webkit Gradient Syntax",
    "href": "http://webkit.org/blog/175/introducing-css-gradients/"
  },{
    "name": "Mozilla Linear Gradient Syntax",
    "href": "http://developer.mozilla.org/en/CSS/-moz-linear-gradient"
  },{
    "name": "Mozilla Radial Gradient Syntax",
    "href": "http://developer.mozilla.org/en/CSS/-moz-radial-gradient"
  },{
    "name": "W3C Gradient Spec",
    "href": "dev.w3.org/csswg/css3-images/#gradients-"
  }]
}
!*/
    Modernizr.addTest("cssgradients", function() {
        var str1 = "background-image:", str2 = "gradient(linear,left top,right bottom,from(#9f9),to(white));", str3 = "linear-gradient(left top,#9f9, white);", css = str1 + prefixes.join(str3 + str1).slice(0, -str1.length);
        Modernizr._config.usePrefixes && (// legacy webkit syntax (FIXME: remove when syntax not in use anymore)
        css += str1 + "-webkit-" + str2);
        var elem = createElement("a"), style = elem.style;
        // IE6 returns undefined so cast to string
        return style.cssText = css, ("" + style.backgroundImage).indexOf("gradient") > -1;
    }), /*!
{
  "name": "CSS rgba",
  "caniuse": "css3-colors",
  "property": "rgba",
  "tags": ["css"],
  "notes": [{
    "name": "CSSTricks Tutorial",
    "href": "http://css-tricks.com/rgba-browser-support/"
  }]
}
!*/
    Modernizr.addTest("rgba", function() {
        var style = createElement("a").style;
        return style.cssText = "background-color:rgba(150,255,150,.5)", ("" + style.backgroundColor).indexOf("rgba") > -1;
    });
    /*!
{
  "name": "CSS Supports",
  "property": "supports",
  "caniuse": "css-featurequeries",
  "tags": ["css"],
  "builderAliases": ["css_supports"],
  "notes": [{
    "name": "W3 Spec",
    "href": "http://dev.w3.org/csswg/css3-conditional/#at-supports"
  },{
    "name": "Related Github Issue",
    "href": "github.com/Modernizr/Modernizr/issues/648"
  },{
    "name": "W3 Info",
    "href": "http://dev.w3.org/csswg/css3-conditional/#the-csssupportsrule-interface"
  }]
}
!*/
    var newSyntax = "CSS" in window && "supports" in window.CSS, oldSyntax = "supportsCSS" in window;
    Modernizr.addTest("supports", newSyntax || oldSyntax);
    var cssomPrefixes = ModernizrProto._config.usePrefixes ? omPrefixes.split(" ") : [];
    ModernizrProto._cssomPrefixes = cssomPrefixes;
    /**
   * testStyles injects an element with style element and some CSS rules
   *
   * @memberof Modernizr
   * @name Modernizr.testStyles
   * @optionName Modernizr.testStyles()
   * @optionProp testStyles
   * @access public
   * @function testStyles
   * @param {string} rule - String representing a css rule
   * @param {function} callback - A function that is used to test the injected element
   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected
   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes
   * @returns {boolean}
   * @example
   *
   * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page
   * along with (possibly multiple) DOM elements. This lets you check for features
   * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).
   *
   * ```js
   * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {
   *   // elem is the first DOM node in the page (by default #modernizr)
   *   // rule is the first argument you supplied - the CSS rule in string form
   *
   *   addTest('widthworks', elem.style.width === '9px')
   * });
   * ```
   *
   * If your test requires multiple nodes, you can include a third argument
   * indicating how many additional div elements to include on the page. The
   * additional nodes are injected as children of the `elem` that is returned as
   * the first argument to the callback.
   *
   * ```js
   * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {
   *   document.getElementById('modernizr').style.width === '1px'; // true
   *   document.getElementById('modernizr2').style.width === '2px'; // true
   *   elem.firstChild === document.getElementById('modernizr2'); // true
   * }, 1);
   * ```
   *
   * By default, all of the additional elements have an ID of `modernizr[n]`, where
   * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,
   * the second additional is `#modernizr3`, etc.).
   * If you want to have more meaningful IDs for your function, you can provide
   * them as the fourth argument, as an array of strings
   *
   * ```js
   * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {
   *   elem.firstChild === document.getElementById('foo'); // true
   *   elem.lastChild === document.getElementById('bar'); // true
   * }, 2, ['foo', 'bar']);
   * ```
   *
   */
    var testStyles = ModernizrProto.testStyles = injectElementWithStyles, blacklist = function() {
        var ua = navigator.userAgent, wkvers = ua.match(/applewebkit\/([0-9]+)/gi) && parseFloat(RegExp.$1), webos = ua.match(/w(eb)?osbrowser/gi), wppre8 = ua.match(/windows phone/gi) && ua.match(/iemobile\/([0-9])+/gi) && parseFloat(RegExp.$1) >= 9, oldandroid = 533 > wkvers && ua.match(/android/gi);
        return webos || oldandroid || wppre8;
    }();
    blacklist ? Modernizr.addTest("fontface", !1) : testStyles('@font-face {font-family:"font";src:url("https://")}', function(node, rule) {
        var style = document.getElementById("smodernizr"), sheet = style.sheet || style.styleSheet, cssText = sheet ? sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || "" : "", bool = /src/i.test(cssText) && 0 === cssText.indexOf(rule.split(" ")[0]);
        Modernizr.addTest("fontface", bool);
    });
    /**
   * Create our "modernizr" element that we do most feature tests on.
   *
   * @access private
   */
    var modElem = {
        elem: createElement("modernizr")
    };
    // Clean up this element
    Modernizr._q.push(function() {
        delete modElem.elem;
    });
    var mStyle = {
        style: modElem.elem.style
    };
    // kill ref for gc, must happen before mod.elem is removed, so we unshift on to
    // the front of the queue.
    Modernizr._q.unshift(function() {
        delete mStyle.style;
    });
    /**
   * testProp() investigates whether a given style property is recognized
   * Property names can be provided in either camelCase or kebab-case.
   *
   * @memberof Modernizr
   * @name Modernizr.testProp
   * @access public
   * @optionName Modernizr.testProp()
   * @optionProp testProp
   * @function testProp
   * @param {string} prop - Name of the CSS property to check
   * @param {string} [value] - Name of the CSS value to check
   * @param {boolean} [useValue] - Whether or not to check the value if @supports isn't supported
   * @returns {boolean}
   * @example
   *
   * Just like [testAllProps](#modernizr-testallprops), only it does not check any vendor prefixed
   * version of the string.
   *
   * Note that the property name must be provided in camelCase (e.g. boxSizing not box-sizing)
   *
   * ```js
   * Modernizr.testProp('pointerEvents')  // true
   * ```
   *
   * You can also provide a value as an optional second argument to check if a
   * specific value is supported
   *
   * ```js
   * Modernizr.testProp('pointerEvents', 'none') // true
   * Modernizr.testProp('pointerEvents', 'penguin') // false
   * ```
   */
    ModernizrProto.testProp = function(prop, value, useValue) {
        return testProps([ prop ], undefined, value, useValue);
    };
    // Modernizr.testAllProps() investigates whether a given style property,
    // or any of its vendor-prefixed variants, is recognized
    //
    // Note that the property names must be provided in the camelCase variant.
    // Modernizr.testAllProps('boxSizing')
    ModernizrProto.testAllProps = testPropsAll, ModernizrProto.testAllProps = testAllProps, 
    /*!
{
  "name": "Border Radius",
  "property": "borderradius",
  "caniuse": "border-radius",
  "polyfills": ["css3pie"],
  "tags": ["css"],
  "notes": [{
    "name": "Comprehensive Compat Chart",
    "href": "http://muddledramblings.com/table-of-css3-border-radius-compliance"
  }]
}
!*/
    Modernizr.addTest("borderradius", testAllProps("borderRadius", "0px", !0)), /*!
{
  "name": "CSS Reflections",
  "caniuse": "css-reflections",
  "property": "cssreflections",
  "tags": ["css"]
}
!*/
    Modernizr.addTest("cssreflections", testAllProps("boxReflect", "above", !0)), /*!
{
  "name": "CSS Transforms",
  "property": "csstransforms",
  "caniuse": "transforms2d",
  "tags": ["css"]
}
!*/
    Modernizr.addTest("csstransforms", function() {
        // Android < 3.0 is buggy, so we sniff and blacklist
        // http://git.io/hHzL7w
        return -1 === navigator.userAgent.indexOf("Android 2.") && testAllProps("transform", "scale(1)", !0);
    }), /*!
{
  "name": "CSS Transforms 3D",
  "property": "csstransforms3d",
  "caniuse": "transforms3d",
  "tags": ["css"],
  "warnings": [
    "Chrome may occassionally fail this test on some systems; more info: https://code.google.com/p/chromium/issues/detail?id=129004"
  ]
}
!*/
    Modernizr.addTest("csstransforms3d", function() {
        var ret = !!testAllProps("perspective", "1px", !0), usePrefix = Modernizr._config.usePrefixes;
        // Webkit's 3D transforms are passed off to the browser's own graphics renderer.
        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in
        //   some conditions. As a result, Webkit typically recognizes the syntax but
        //   will sometimes throw a false positive, thus we must do a more thorough check:
        if (ret && (!usePrefix || "webkitPerspective" in docElement.style)) {
            var mq;
            // Use CSS Conditional Rules if available
            Modernizr.supports ? mq = "@supports (perspective: 1px)" : (// Otherwise, Webkit allows this media query to succeed only if the feature is enabled.
            // `@media (transform-3d),(-webkit-transform-3d){ ... }`
            mq = "@media (transform-3d)", usePrefix && (mq += ",(-webkit-transform-3d)")), // If loaded inside the body tag and the test element inherits any padding, margin or borders it will fail #740
            mq += "{#modernizr{left:9px;position:absolute;height:5px;margin:0;padding:0;border:0}}", 
            testStyles(mq, function(elem) {
                ret = 9 === elem.offsetLeft && 5 === elem.offsetHeight;
            });
        }
        return ret;
    }), // Run each test
    testRunner(), // Remove the "no-js" class if it exists
    setClasses(classes), delete ModernizrProto.addTest, delete ModernizrProto.addAsyncTest;
    // Run the things that are supposed to run after the tests
    for (var i = 0; i < Modernizr._q.length; i++) Modernizr._q[i]();
    // Leak Modernizr namespace
    window.Modernizr = Modernizr;
}(window, document), /*
**
* multiaccordion.jquery.js - v1.3.1 (https://github.com/TouPye/multiaccordion.jquery)
* Pierre Skowron 2014 - www.pskowron.info
*
**
* Dependencies
* - jQuery
* - jQuery UI
**
* HowTo
* $(selector).multiaccordion(method, options);
**
* Method (String) - facultative
* - "init" : initialize multiaccordion - default if no method defined
* - "open" : open selected accordion(s)
* - "close" : close selected accordion(s)
**
* Options (Object) - facultative
* - header (String) : selector for the header
* - container (String) : selector for the container
* - closeIcon (String) : jQuery UI icon when accordion is closed
* - openIcon (String) : jQuery UI icon when accordion is open
* - initialState (String) : initial state of accordions ("open" or "close")
* - animation (Boolean) : whether the content display is animated or not
*/
function($) {
    function isOpen(elt) {
        return "open" == elt.data("state");
    }
    function setState(elt, state) {
        elt.attr("data-state", state).data("state", state);
    }
    // default options of multiaccordion
    var defaults = {
        header: "h3",
        container: ".content",
        closeIcon: "ui-icon-circle-arrow-e",
        openIcon: "ui-icon-circle-arrow-s",
        initialState: "open",
        animation: !0
    }, methods = {
        init: function(options) {
            var opts = $.extend(defaults, options), $this = this;
            // if state is not forced by user, we affect the default state
            void 0 == $this.data("state") && setState($this, opts.initialState), $this.addClass("ui-accordion ui-widget").children(opts.header + ":first-child").off().addClass("ui-accordion-header").prepend('<div class="ui-icon ui-accordion-header-icon"></div>').hover(function() {
                $(this).toggleClass("ui-state-hover");
            }).click(function() {
                isOpen($this) ? $this.multiaccordion("close") : $this.multiaccordion("open");
            }).next(opts.container).addClass("ui-accordion-content", function() {
                isOpen($this) ? $this.children(opts.header + ":first-child").addClass("ui-state-active ui-accordion-header-active").find("> .ui-icon").addClass(opts.openIcon).end().next(".ui-accordion-content").addClass("ui-accordion-content-active") : $this.children(opts.header + ":first-child").addClass("ui-state-state-default").find("> .ui-icon").addClass(opts.closeIcon).end().next(".ui-accordion-content").addClass("ui-accordion-content-default").hide();
            });
        },
        open: function(options) {
            var opts = $.extend(defaults, options), $this = this;
            isOpen($this) || (setState($this, "open"), $this.children(".ui-accordion-header:first-child").removeClass("ui-state-default").addClass("ui-accordion-header-active ui-state-active").find("> .ui-icon").removeClass(opts.closeIcon).addClass(opts.openIcon).end().next(".ui-accordion-content").removeClass("ui-accordion-content-default").addClass("ui-accordion-content-active").off(), 
            opts.animation ? $(this).children(".ui-accordion-content").slideToggle() : $(this).children(".ui-accordion-content").show());
        },
        close: function(options) {
            var opts = $.extend(defaults, options), $this = this;
            isOpen($this) && (setState($this, "close"), $this.children(".ui-accordion-header:first-child").removeClass("ui-accordion-header-active ui-state-active").addClass("ui-state-default").find("> .ui-icon").removeClass(opts.openIcon).addClass(opts.closeIcon).end().next(".ui-accordion-content").removeClass("ui-accordion-content-active").addClass("ui-accordion-content-default").off(), 
            opts.animation ? $(this).children(".ui-accordion-content").slideToggle() : $(this).children(".ui-accordion-content").hide());
        }
    };
    $.fn.multiaccordion = function(params) {
        if (void 0 != methods[params]) {
            if (this.length > 0) return $(this).each(function(i) {
                return methods[params].apply($(this), Array.prototype.slice.call(arguments, 1));
            });
        } else if ("object" != typeof params && params) $.error("Method " + params + " doesn't exist on jQuery.multiaccordion"); else if (this.length > 0) return $(this).each(function(i) {
            return methods.init.apply($(this), arguments);
        });
    };
}(jQuery), $.fn.preventDoubleSubmission = function() {
    return $(this).off("submit.preventDoubleSubmission").on("submit.preventDoubleSubmission", function(e) {
        if (this.downloadFile) return void (this.downloadFile = !1);
        // if (this.submittedXX) {
        //   console.log('already submitted');
        //   e.stopPropagation();
        // } else {
        //   this.submittedXX = true;
        // }
        // Preventing Double Form Submission
        var $form = $(this);
        $form.data("submitted") === !0 ? // Previously submitted - don't submit again
        e.preventDefault() : // Mark it so that the next submit can be ignored
        $form.data("submitted", !0);
    }), this;
}, $(document).ready(function() {
    function splitTable(original) {
        original.wrap("<div class='table-wrapper' />");
        var copy = original.clone();
        copy.find("td:not(:first-child), th:not(:first-child)").css("display", "none"), 
        copy.removeClass("responsive"), original.closest(".table-wrapper").append(copy), 
        copy.wrap("<div class='pinned' />"), original.wrap("<div class='scrollable' />");
    }
    function unsplitTable(original) {
        original.closest(".table-wrapper").find(".pinned").remove(), original.unwrap(), 
        original.unwrap();
    }
    var switched = !1, updateTables = function() {
        return $(window).width() < 767 && !switched ? (switched = !0, $("table.responsive").each(function(i, element) {
            splitTable($(element));
        }), !0) : void (switched && $(window).width() > 767 && (switched = !1, $("table.responsive").each(function(i, element) {
            unsplitTable($(element));
        })));
    };
    $(window).load(updateTables), $(window).bind("resize", updateTables);
}), /*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.5.7
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
function(factory) {
    "use strict";
    "function" == typeof define && define.amd ? define([ "jquery" ], factory) : "undefined" != typeof exports ? module.exports = factory(require("jquery")) : factory(jQuery);
}(function($) {
    "use strict";
    var Slick = window.Slick || {};
    Slick = function() {
        function Slick(element, settings) {
            var dataSettings, _ = this;
            _.defaults = {
                accessibility: !0,
                adaptiveHeight: !1,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: !0,
                asNavFor: null,
                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
                autoplay: !1,
                autoplaySpeed: 3e3,
                centerMode: !1,
                centerPadding: "50px",
                cssEase: "ease",
                customPaging: function(slider, i) {
                    return '<button type="button" data-role="none" role="button" aria-required="false" tabindex="0">' + (i + 1) + "</button>";
                },
                dots: !1,
                dotsClass: "slick-dots",
                draggable: !0,
                easing: "linear",
                edgeFriction: .35,
                fade: !1,
                focusOnSelect: !1,
                infinite: !0,
                initialSlide: 0,
                lazyLoad: "ondemand",
                mobileFirst: !1,
                pauseOnHover: !0,
                pauseOnDotsHover: !1,
                respondTo: "window",
                responsive: null,
                rows: 1,
                rtl: !1,
                slide: "",
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: !0,
                swipeToSlide: !1,
                touchMove: !0,
                touchThreshold: 5,
                useCSS: !0,
                variableWidth: !1,
                vertical: !1,
                verticalSwiping: !1,
                waitForAnimate: !0,
                zIndex: 1e3
            }, _.initials = {
                animating: !1,
                dragging: !1,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: !1,
                slideOffset: 0,
                swipeLeft: null,
                $list: null,
                touchObject: {},
                transformsEnabled: !1,
                unslicked: !1
            }, $.extend(_, _.initials), _.activeBreakpoint = null, _.animType = null, _.animProp = null, 
            _.breakpoints = [], _.breakpointSettings = [], _.cssTransitions = !1, _.hidden = "hidden", 
            _.paused = !1, _.positionProp = null, _.respondTo = null, _.rowCount = 1, _.shouldClick = !0, 
            _.$slider = $(element), _.$slidesCache = null, _.transformType = null, _.transitionType = null, 
            _.visibilityChange = "visibilitychange", _.windowWidth = 0, _.windowTimer = null, 
            dataSettings = $(element).data("slick") || {}, _.options = $.extend({}, _.defaults, dataSettings, settings), 
            _.currentSlide = _.options.initialSlide, _.originalSettings = _.options, "undefined" != typeof document.mozHidden ? (_.hidden = "mozHidden", 
            _.visibilityChange = "mozvisibilitychange") : "undefined" != typeof document.webkitHidden && (_.hidden = "webkitHidden", 
            _.visibilityChange = "webkitvisibilitychange"), _.autoPlay = $.proxy(_.autoPlay, _), 
            _.autoPlayClear = $.proxy(_.autoPlayClear, _), _.changeSlide = $.proxy(_.changeSlide, _), 
            _.clickHandler = $.proxy(_.clickHandler, _), _.selectHandler = $.proxy(_.selectHandler, _), 
            _.setPosition = $.proxy(_.setPosition, _), _.swipeHandler = $.proxy(_.swipeHandler, _), 
            _.dragHandler = $.proxy(_.dragHandler, _), _.keyHandler = $.proxy(_.keyHandler, _), 
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _), _.instanceUid = instanceUid++, 
            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/, _.registerBreakpoints(), _.init(!0), _.checkResponsive(!0);
        }
        var instanceUid = 0;
        return Slick;
    }(), Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {
        var _ = this;
        if ("boolean" == typeof index) addBefore = index, index = null; else if (0 > index || index >= _.slideCount) return !1;
        _.unload(), "number" == typeof index ? 0 === index && 0 === _.$slides.length ? $(markup).appendTo(_.$slideTrack) : addBefore ? $(markup).insertBefore(_.$slides.eq(index)) : $(markup).insertAfter(_.$slides.eq(index)) : addBefore === !0 ? $(markup).prependTo(_.$slideTrack) : $(markup).appendTo(_.$slideTrack), 
        _.$slides = _.$slideTrack.children(this.options.slide), _.$slideTrack.children(this.options.slide).detach(), 
        _.$slideTrack.append(_.$slides), _.$slides.each(function(index, element) {
            $(element).attr("data-slick-index", index);
        }), _.$slidesCache = _.$slides, _.reinit();
    }, Slick.prototype.animateHeight = function() {
        var _ = this;
        if (1 === _.options.slidesToShow && _.options.adaptiveHeight === !0 && _.options.vertical === !1) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(!0);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    }, Slick.prototype.animateSlide = function(targetLeft, callback) {
        var animProps = {}, _ = this;
        _.animateHeight(), _.options.rtl === !0 && _.options.vertical === !1 && (targetLeft = -targetLeft), 
        _.transformsEnabled === !1 ? _.options.vertical === !1 ? _.$slideTrack.animate({
            left: targetLeft
        }, _.options.speed, _.options.easing, callback) : _.$slideTrack.animate({
            top: targetLeft
        }, _.options.speed, _.options.easing, callback) : _.cssTransitions === !1 ? (_.options.rtl === !0 && (_.currentLeft = -_.currentLeft), 
        $({
            animStart: _.currentLeft
        }).animate({
            animStart: targetLeft
        }, {
            duration: _.options.speed,
            easing: _.options.easing,
            step: function(now) {
                now = Math.ceil(now), _.options.vertical === !1 ? (animProps[_.animType] = "translate(" + now + "px, 0px)", 
                _.$slideTrack.css(animProps)) : (animProps[_.animType] = "translate(0px," + now + "px)", 
                _.$slideTrack.css(animProps));
            },
            complete: function() {
                callback && callback.call();
            }
        })) : (_.applyTransition(), targetLeft = Math.ceil(targetLeft), _.options.vertical === !1 ? animProps[_.animType] = "translate3d(" + targetLeft + "px, 0px, 0px)" : animProps[_.animType] = "translate3d(0px," + targetLeft + "px, 0px)", 
        _.$slideTrack.css(animProps), callback && setTimeout(function() {
            _.disableTransition(), callback.call();
        }, _.options.speed));
    }, Slick.prototype.asNavFor = function(index) {
        var _ = this, asNavFor = _.options.asNavFor;
        asNavFor && null !== asNavFor && (asNavFor = $(asNavFor).not(_.$slider)), null !== asNavFor && "object" == typeof asNavFor && asNavFor.each(function() {
            var target = $(this).slick("getSlick");
            target.unslicked || target.slideHandler(index, !0);
        });
    }, Slick.prototype.applyTransition = function(slide) {
        var _ = this, transition = {};
        _.options.fade === !1 ? transition[_.transitionType] = _.transformType + " " + _.options.speed + "ms " + _.options.cssEase : transition[_.transitionType] = "opacity " + _.options.speed + "ms " + _.options.cssEase, 
        _.options.fade === !1 ? _.$slideTrack.css(transition) : _.$slides.eq(slide).css(transition);
    }, Slick.prototype.autoPlay = function() {
        var _ = this;
        _.autoPlayTimer && clearInterval(_.autoPlayTimer), _.slideCount > _.options.slidesToShow && _.paused !== !0 && (_.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed));
    }, Slick.prototype.autoPlayClear = function() {
        var _ = this;
        _.autoPlayTimer && clearInterval(_.autoPlayTimer);
    }, Slick.prototype.autoPlayIterator = function() {
        var _ = this;
        _.options.infinite === !1 ? 1 === _.direction ? (_.currentSlide + 1 === _.slideCount - 1 && (_.direction = 0), 
        _.slideHandler(_.currentSlide + _.options.slidesToScroll)) : (_.currentSlide - 1 === 0 && (_.direction = 1), 
        _.slideHandler(_.currentSlide - _.options.slidesToScroll)) : _.slideHandler(_.currentSlide + _.options.slidesToScroll);
    }, Slick.prototype.buildArrows = function() {
        var _ = this;
        _.options.arrows === !0 && (_.$prevArrow = $(_.options.prevArrow).addClass("slick-arrow"), 
        _.$nextArrow = $(_.options.nextArrow).addClass("slick-arrow"), _.slideCount > _.options.slidesToShow ? (_.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), 
        _.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), _.htmlExpr.test(_.options.prevArrow) && _.$prevArrow.prependTo(_.options.appendArrows), 
        _.htmlExpr.test(_.options.nextArrow) && _.$nextArrow.appendTo(_.options.appendArrows), 
        _.options.infinite !== !0 && _.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true")) : _.$prevArrow.add(_.$nextArrow).addClass("slick-hidden").attr({
            "aria-disabled": "true",
            tabindex: "-1"
        }));
    }, Slick.prototype.buildDots = function() {
        var i, dotString, _ = this;
        if (_.options.dots === !0 && _.slideCount > _.options.slidesToShow) {
            for (dotString = '<ul class="' + _.options.dotsClass + '">', i = 0; i <= _.getDotCount(); i += 1) dotString += "<li>" + _.options.customPaging.call(this, _, i) + "</li>";
            dotString += "</ul>", _.$dots = $(dotString).appendTo(_.options.appendDots), _.$dots.find("li").first().addClass("slick-active").attr("aria-hidden", "false");
        }
    }, Slick.prototype.buildOut = function() {
        var _ = this;
        _.$slides = _.$slider.children(_.options.slide + ":not(.slick-cloned)").addClass("slick-slide"), 
        _.slideCount = _.$slides.length, _.$slides.each(function(index, element) {
            $(element).attr("data-slick-index", index).data("originalStyling", $(element).attr("style") || "");
        }), _.$slidesCache = _.$slides, _.$slider.addClass("slick-slider"), _.$slideTrack = 0 === _.slideCount ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent(), 
        _.$list = _.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent(), 
        _.$slideTrack.css("opacity", 0), (_.options.centerMode === !0 || _.options.swipeToSlide === !0) && (_.options.slidesToScroll = 1), 
        $("img[data-lazy]", _.$slider).not("[src]").addClass("slick-loading"), _.setupInfinite(), 
        _.buildArrows(), _.buildDots(), _.updateDots(), _.setSlideClasses("number" == typeof _.currentSlide ? _.currentSlide : 0), 
        _.options.draggable === !0 && _.$list.addClass("draggable");
    }, Slick.prototype.buildRows = function() {
        var a, b, c, newSlides, numOfSlides, originalSlides, slidesPerSection, _ = this;
        if (newSlides = document.createDocumentFragment(), originalSlides = _.$slider.children(), 
        _.options.rows > 1) {
            for (slidesPerSection = _.options.slidesPerRow * _.options.rows, numOfSlides = Math.ceil(originalSlides.length / slidesPerSection), 
            a = 0; numOfSlides > a; a++) {
                var slide = document.createElement("div");
                for (b = 0; b < _.options.rows; b++) {
                    var row = document.createElement("div");
                    for (c = 0; c < _.options.slidesPerRow; c++) {
                        var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);
                        originalSlides.get(target) && row.appendChild(originalSlides.get(target));
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }
            _.$slider.html(newSlides), _.$slider.children().children().children().css({
                width: 100 / _.options.slidesPerRow + "%",
                display: "inline-block"
            });
        }
    }, Slick.prototype.checkResponsive = function(initial, forceUpdate) {
        var breakpoint, targetBreakpoint, respondToWidth, _ = this, triggerBreakpoint = !1, sliderWidth = _.$slider.width(), windowWidth = window.innerWidth || $(window).width();
        if ("window" === _.respondTo ? respondToWidth = windowWidth : "slider" === _.respondTo ? respondToWidth = sliderWidth : "min" === _.respondTo && (respondToWidth = Math.min(windowWidth, sliderWidth)), 
        _.options.responsive && _.options.responsive.length && null !== _.options.responsive) {
            targetBreakpoint = null;
            for (breakpoint in _.breakpoints) _.breakpoints.hasOwnProperty(breakpoint) && (_.originalSettings.mobileFirst === !1 ? respondToWidth < _.breakpoints[breakpoint] && (targetBreakpoint = _.breakpoints[breakpoint]) : respondToWidth > _.breakpoints[breakpoint] && (targetBreakpoint = _.breakpoints[breakpoint]));
            null !== targetBreakpoint ? null !== _.activeBreakpoint ? (targetBreakpoint !== _.activeBreakpoint || forceUpdate) && (_.activeBreakpoint = targetBreakpoint, 
            "unslick" === _.breakpointSettings[targetBreakpoint] ? _.unslick(targetBreakpoint) : (_.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]), 
            initial === !0 && (_.currentSlide = _.options.initialSlide), _.refresh(initial)), 
            triggerBreakpoint = targetBreakpoint) : (_.activeBreakpoint = targetBreakpoint, 
            "unslick" === _.breakpointSettings[targetBreakpoint] ? _.unslick(targetBreakpoint) : (_.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]), 
            initial === !0 && (_.currentSlide = _.options.initialSlide), _.refresh(initial)), 
            triggerBreakpoint = targetBreakpoint) : null !== _.activeBreakpoint && (_.activeBreakpoint = null, 
            _.options = _.originalSettings, initial === !0 && (_.currentSlide = _.options.initialSlide), 
            _.refresh(initial), triggerBreakpoint = targetBreakpoint), // only trigger breakpoints during an actual break. not on initialize.
            initial || triggerBreakpoint === !1 || _.$slider.trigger("breakpoint", [ _, triggerBreakpoint ]);
        }
    }, Slick.prototype.changeSlide = function(event, dontAnimate) {
        var indexOffset, slideOffset, unevenOffset, _ = this, $target = $(event.target);
        switch (// If target is a link, prevent default action.
        $target.is("a") && event.preventDefault(), // If target is not the <li> element (ie: a child), find the <li>.
        $target.is("li") || ($target = $target.closest("li")), unevenOffset = _.slideCount % _.options.slidesToScroll !== 0, 
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll, 
        event.data.message) {
          case "previous":
            slideOffset = 0 === indexOffset ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset, 
            _.slideCount > _.options.slidesToShow && _.slideHandler(_.currentSlide - slideOffset, !1, dontAnimate);
            break;

          case "next":
            slideOffset = 0 === indexOffset ? _.options.slidesToScroll : indexOffset, _.slideCount > _.options.slidesToShow && _.slideHandler(_.currentSlide + slideOffset, !1, dontAnimate);
            break;

          case "index":
            var index = 0 === event.data.index ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;
            _.slideHandler(_.checkNavigable(index), !1, dontAnimate), $target.children().trigger("focus");
            break;

          default:
            return;
        }
    }, Slick.prototype.checkNavigable = function(index) {
        var navigables, prevNavigable, _ = this;
        if (navigables = _.getNavigableIndexes(), prevNavigable = 0, index > navigables[navigables.length - 1]) index = navigables[navigables.length - 1]; else for (var n in navigables) {
            if (index < navigables[n]) {
                index = prevNavigable;
                break;
            }
            prevNavigable = navigables[n];
        }
        return index;
    }, Slick.prototype.cleanUpEvents = function() {
        var _ = this;
        _.options.dots && null !== _.$dots && ($("li", _.$dots).off("click.slick", _.changeSlide), 
        _.options.pauseOnDotsHover === !0 && _.options.autoplay === !0 && $("li", _.$dots).off("mouseenter.slick", $.proxy(_.setPaused, _, !0)).off("mouseleave.slick", $.proxy(_.setPaused, _, !1))), 
        _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && (_.$prevArrow && _.$prevArrow.off("click.slick", _.changeSlide), 
        _.$nextArrow && _.$nextArrow.off("click.slick", _.changeSlide)), _.$list.off("touchstart.slick mousedown.slick", _.swipeHandler), 
        _.$list.off("touchmove.slick mousemove.slick", _.swipeHandler), _.$list.off("touchend.slick mouseup.slick", _.swipeHandler), 
        _.$list.off("touchcancel.slick mouseleave.slick", _.swipeHandler), _.$list.off("click.slick", _.clickHandler), 
        $(document).off(_.visibilityChange, _.visibility), _.$list.off("mouseenter.slick", $.proxy(_.setPaused, _, !0)), 
        _.$list.off("mouseleave.slick", $.proxy(_.setPaused, _, !1)), _.options.accessibility === !0 && _.$list.off("keydown.slick", _.keyHandler), 
        _.options.focusOnSelect === !0 && $(_.$slideTrack).children().off("click.slick", _.selectHandler), 
        $(window).off("orientationchange.slick.slick-" + _.instanceUid, _.orientationChange), 
        $(window).off("resize.slick.slick-" + _.instanceUid, _.resize), $("[draggable!=true]", _.$slideTrack).off("dragstart", _.preventDefault), 
        $(window).off("load.slick.slick-" + _.instanceUid, _.setPosition), $(document).off("ready.slick.slick-" + _.instanceUid, _.setPosition);
    }, Slick.prototype.cleanUpRows = function() {
        var originalSlides, _ = this;
        _.options.rows > 1 && (originalSlides = _.$slides.children().children(), originalSlides.removeAttr("style"), 
        _.$slider.html(originalSlides));
    }, Slick.prototype.clickHandler = function(event) {
        var _ = this;
        _.shouldClick === !1 && (event.stopImmediatePropagation(), event.stopPropagation(), 
        event.preventDefault());
    }, Slick.prototype.destroy = function(refresh) {
        var _ = this;
        _.autoPlayClear(), _.touchObject = {}, _.cleanUpEvents(), $(".slick-cloned", _.$slider).detach(), 
        _.$dots && _.$dots.remove(), _.options.arrows === !0 && (_.$prevArrow && _.$prevArrow.length && (_.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), 
        _.htmlExpr.test(_.options.prevArrow) && _.$prevArrow.remove()), _.$nextArrow && _.$nextArrow.length && (_.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), 
        _.htmlExpr.test(_.options.nextArrow) && _.$nextArrow.remove())), _.$slides && (_.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function() {
            $(this).attr("style", $(this).data("originalStyling"));
        }), _.$slideTrack.children(this.options.slide).detach(), _.$slideTrack.detach(), 
        _.$list.detach(), _.$slider.append(_.$slides)), _.cleanUpRows(), _.$slider.removeClass("slick-slider"), 
        _.$slider.removeClass("slick-initialized"), _.unslicked = !0, refresh || _.$slider.trigger("destroy", [ _ ]);
    }, Slick.prototype.disableTransition = function(slide) {
        var _ = this, transition = {};
        transition[_.transitionType] = "", _.options.fade === !1 ? _.$slideTrack.css(transition) : _.$slides.eq(slide).css(transition);
    }, Slick.prototype.fadeSlide = function(slideIndex, callback) {
        var _ = this;
        _.cssTransitions === !1 ? (_.$slides.eq(slideIndex).css({
            zIndex: _.options.zIndex
        }), _.$slides.eq(slideIndex).animate({
            opacity: 1
        }, _.options.speed, _.options.easing, callback)) : (_.applyTransition(slideIndex), 
        _.$slides.eq(slideIndex).css({
            opacity: 1,
            zIndex: _.options.zIndex
        }), callback && setTimeout(function() {
            _.disableTransition(slideIndex), callback.call();
        }, _.options.speed));
    }, Slick.prototype.fadeSlideOut = function(slideIndex) {
        var _ = this;
        _.cssTransitions === !1 ? _.$slides.eq(slideIndex).animate({
            opacity: 0,
            zIndex: _.options.zIndex - 2
        }, _.options.speed, _.options.easing) : (_.applyTransition(slideIndex), _.$slides.eq(slideIndex).css({
            opacity: 0,
            zIndex: _.options.zIndex - 2
        }));
    }, Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {
        var _ = this;
        null !== filter && (_.unload(), _.$slideTrack.children(this.options.slide).detach(), 
        _.$slidesCache.filter(filter).appendTo(_.$slideTrack), _.reinit());
    }, Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {
        var _ = this;
        return _.currentSlide;
    }, Slick.prototype.getDotCount = function() {
        var _ = this, breakPoint = 0, counter = 0, pagerQty = 0;
        if (_.options.infinite === !0) for (;breakPoint < _.slideCount; ) ++pagerQty, breakPoint = counter + _.options.slidesToShow, 
        counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow; else if (_.options.centerMode === !0) pagerQty = _.slideCount; else for (;breakPoint < _.slideCount; ) ++pagerQty, 
        breakPoint = counter + _.options.slidesToShow, counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        return pagerQty - 1;
    }, Slick.prototype.getLeft = function(slideIndex) {
        var targetLeft, verticalHeight, targetSlide, _ = this, verticalOffset = 0;
        return _.slideOffset = 0, verticalHeight = _.$slides.first().outerHeight(!0), _.options.infinite === !0 ? (_.slideCount > _.options.slidesToShow && (_.slideOffset = _.slideWidth * _.options.slidesToShow * -1, 
        verticalOffset = verticalHeight * _.options.slidesToShow * -1), _.slideCount % _.options.slidesToScroll !== 0 && slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow && (slideIndex > _.slideCount ? (_.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1, 
        verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1) : (_.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1, 
        verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1))) : slideIndex + _.options.slidesToShow > _.slideCount && (_.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth, 
        verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight), 
        _.slideCount <= _.options.slidesToShow && (_.slideOffset = 0, verticalOffset = 0), 
        _.options.centerMode === !0 && _.options.infinite === !0 ? _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth : _.options.centerMode === !0 && (_.slideOffset = 0, 
        _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2)), targetLeft = _.options.vertical === !1 ? slideIndex * _.slideWidth * -1 + _.slideOffset : slideIndex * verticalHeight * -1 + verticalOffset, 
        _.options.variableWidth === !0 && (targetSlide = _.slideCount <= _.options.slidesToShow || _.options.infinite === !1 ? _.$slideTrack.children(".slick-slide").eq(slideIndex) : _.$slideTrack.children(".slick-slide").eq(slideIndex + _.options.slidesToShow), 
        targetLeft = targetSlide[0] ? -1 * targetSlide[0].offsetLeft : 0, _.options.centerMode === !0 && (targetSlide = _.options.infinite === !1 ? _.$slideTrack.children(".slick-slide").eq(slideIndex) : _.$slideTrack.children(".slick-slide").eq(slideIndex + _.options.slidesToShow + 1), 
        targetLeft = targetSlide[0] ? -1 * targetSlide[0].offsetLeft : 0, targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2)), 
        targetLeft;
    }, Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {
        var _ = this;
        return _.options[option];
    }, Slick.prototype.getNavigableIndexes = function() {
        var max, _ = this, breakPoint = 0, counter = 0, indexes = [];
        for (_.options.infinite === !1 ? max = _.slideCount : (breakPoint = -1 * _.options.slidesToScroll, 
        counter = -1 * _.options.slidesToScroll, max = 2 * _.slideCount); max > breakPoint; ) indexes.push(breakPoint), 
        breakPoint = counter + _.options.slidesToScroll, counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        return indexes;
    }, Slick.prototype.getSlick = function() {
        return this;
    }, Slick.prototype.getSlideCount = function() {
        var slidesTraversed, swipedSlide, centerOffset, _ = this;
        return centerOffset = _.options.centerMode === !0 ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0, 
        _.options.swipeToSlide === !0 ? (_.$slideTrack.find(".slick-slide").each(function(index, slide) {
            return slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > -1 * _.swipeLeft ? (swipedSlide = slide, 
            !1) : void 0;
        }), slidesTraversed = Math.abs($(swipedSlide).attr("data-slick-index") - _.currentSlide) || 1) : _.options.slidesToScroll;
    }, Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {
        var _ = this;
        _.changeSlide({
            data: {
                message: "index",
                index: parseInt(slide)
            }
        }, dontAnimate);
    }, Slick.prototype.init = function(creation) {
        var _ = this;
        $(_.$slider).hasClass("slick-initialized") || ($(_.$slider).addClass("slick-initialized"), 
        _.buildRows(), _.buildOut(), _.setProps(), _.startLoad(), _.loadSlider(), _.initializeEvents(), 
        _.updateArrows(), _.updateDots()), creation && _.$slider.trigger("init", [ _ ]), 
        _.options.accessibility === !0 && _.initADA();
    }, Slick.prototype.initArrowEvents = function() {
        var _ = this;
        _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && (_.$prevArrow.on("click.slick", {
            message: "previous"
        }, _.changeSlide), _.$nextArrow.on("click.slick", {
            message: "next"
        }, _.changeSlide));
    }, Slick.prototype.initDotEvents = function() {
        var _ = this;
        _.options.dots === !0 && _.slideCount > _.options.slidesToShow && $("li", _.$dots).on("click.slick", {
            message: "index"
        }, _.changeSlide), _.options.dots === !0 && _.options.pauseOnDotsHover === !0 && _.options.autoplay === !0 && $("li", _.$dots).on("mouseenter.slick", $.proxy(_.setPaused, _, !0)).on("mouseleave.slick", $.proxy(_.setPaused, _, !1));
    }, Slick.prototype.initializeEvents = function() {
        var _ = this;
        _.initArrowEvents(), _.initDotEvents(), _.$list.on("touchstart.slick mousedown.slick", {
            action: "start"
        }, _.swipeHandler), _.$list.on("touchmove.slick mousemove.slick", {
            action: "move"
        }, _.swipeHandler), _.$list.on("touchend.slick mouseup.slick", {
            action: "end"
        }, _.swipeHandler), _.$list.on("touchcancel.slick mouseleave.slick", {
            action: "end"
        }, _.swipeHandler), _.$list.on("click.slick", _.clickHandler), $(document).on(_.visibilityChange, $.proxy(_.visibility, _)), 
        _.$list.on("mouseenter.slick", $.proxy(_.setPaused, _, !0)), _.$list.on("mouseleave.slick", $.proxy(_.setPaused, _, !1)), 
        _.options.accessibility === !0 && _.$list.on("keydown.slick", _.keyHandler), _.options.focusOnSelect === !0 && $(_.$slideTrack).children().on("click.slick", _.selectHandler), 
        $(window).on("orientationchange.slick.slick-" + _.instanceUid, $.proxy(_.orientationChange, _)), 
        $(window).on("resize.slick.slick-" + _.instanceUid, $.proxy(_.resize, _)), $("[draggable!=true]", _.$slideTrack).on("dragstart", _.preventDefault), 
        $(window).on("load.slick.slick-" + _.instanceUid, _.setPosition), $(document).on("ready.slick.slick-" + _.instanceUid, _.setPosition);
    }, Slick.prototype.initUI = function() {
        var _ = this;
        _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && (_.$prevArrow.show(), 
        _.$nextArrow.show()), _.options.dots === !0 && _.slideCount > _.options.slidesToShow && _.$dots.show(), 
        _.options.autoplay === !0 && _.autoPlay();
    }, Slick.prototype.keyHandler = function(event) {
        var _ = this;
        //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        event.target.tagName.match("TEXTAREA|INPUT|SELECT") || (37 === event.keyCode && _.options.accessibility === !0 ? _.changeSlide({
            data: {
                message: "previous"
            }
        }) : 39 === event.keyCode && _.options.accessibility === !0 && _.changeSlide({
            data: {
                message: "next"
            }
        }));
    }, Slick.prototype.lazyLoad = function() {
        function loadImages(imagesScope) {
            $("img[data-lazy]", imagesScope).each(function() {
                var image = $(this), imageSource = $(this).attr("data-lazy"), imageToLoad = document.createElement("img");
                imageToLoad.onload = function() {
                    image.animate({
                        opacity: 0
                    }, 100, function() {
                        image.attr("src", imageSource).animate({
                            opacity: 1
                        }, 200, function() {
                            image.removeAttr("data-lazy").removeClass("slick-loading");
                        });
                    });
                }, imageToLoad.src = imageSource;
            });
        }
        var loadRange, cloneRange, rangeStart, rangeEnd, _ = this;
        _.options.centerMode === !0 ? _.options.infinite === !0 ? (rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1), 
        rangeEnd = rangeStart + _.options.slidesToShow + 2) : (rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1)), 
        rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide) : (rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide, 
        rangeEnd = rangeStart + _.options.slidesToShow, _.options.fade === !0 && (rangeStart > 0 && rangeStart--, 
        rangeEnd <= _.slideCount && rangeEnd++)), loadRange = _.$slider.find(".slick-slide").slice(rangeStart, rangeEnd), 
        loadImages(loadRange), _.slideCount <= _.options.slidesToShow ? (cloneRange = _.$slider.find(".slick-slide"), 
        loadImages(cloneRange)) : _.currentSlide >= _.slideCount - _.options.slidesToShow ? (cloneRange = _.$slider.find(".slick-cloned").slice(0, _.options.slidesToShow), 
        loadImages(cloneRange)) : 0 === _.currentSlide && (cloneRange = _.$slider.find(".slick-cloned").slice(-1 * _.options.slidesToShow), 
        loadImages(cloneRange));
    }, Slick.prototype.loadSlider = function() {
        var _ = this;
        _.setPosition(), _.$slideTrack.css({
            opacity: 1
        }), _.$slider.removeClass("slick-loading"), _.initUI(), "progressive" === _.options.lazyLoad && _.progressiveLazyLoad();
    }, Slick.prototype.next = Slick.prototype.slickNext = function() {
        var _ = this;
        _.changeSlide({
            data: {
                message: "next"
            }
        });
    }, Slick.prototype.orientationChange = function() {
        var _ = this;
        _.checkResponsive(), _.setPosition();
    }, Slick.prototype.pause = Slick.prototype.slickPause = function() {
        var _ = this;
        _.autoPlayClear(), _.paused = !0;
    }, Slick.prototype.play = Slick.prototype.slickPlay = function() {
        var _ = this;
        _.paused = !1, _.autoPlay();
    }, Slick.prototype.postSlide = function(index) {
        var _ = this;
        _.$slider.trigger("afterChange", [ _, index ]), _.animating = !1, _.setPosition(), 
        _.swipeLeft = null, _.options.autoplay === !0 && _.paused === !1 && _.autoPlay(), 
        _.options.accessibility === !0 && _.initADA();
    }, Slick.prototype.prev = Slick.prototype.slickPrev = function() {
        var _ = this;
        _.changeSlide({
            data: {
                message: "previous"
            }
        });
    }, Slick.prototype.preventDefault = function(e) {
        e.preventDefault();
    }, Slick.prototype.progressiveLazyLoad = function() {
        var imgCount, targetImage, _ = this;
        imgCount = $("img[data-lazy]", _.$slider).length, imgCount > 0 && (targetImage = $("img[data-lazy]", _.$slider).first(), 
        targetImage.attr("src", targetImage.attr("data-lazy")).removeClass("slick-loading").load(function() {
            targetImage.removeAttr("data-lazy"), _.progressiveLazyLoad(), _.options.adaptiveHeight === !0 && _.setPosition();
        }).error(function() {
            targetImage.removeAttr("data-lazy"), _.progressiveLazyLoad();
        }));
    }, Slick.prototype.refresh = function(initializing) {
        var _ = this, currentSlide = _.currentSlide;
        _.destroy(!0), $.extend(_, _.initials, {
            currentSlide: currentSlide
        }), _.init(), initializing || _.changeSlide({
            data: {
                message: "index",
                index: currentSlide
            }
        }, !1);
    }, Slick.prototype.registerBreakpoints = function() {
        var breakpoint, currentBreakpoint, l, _ = this, responsiveSettings = _.options.responsive || null;
        if ("array" === $.type(responsiveSettings) && responsiveSettings.length) {
            _.respondTo = _.options.respondTo || "window";
            for (breakpoint in responsiveSettings) if (l = _.breakpoints.length - 1, currentBreakpoint = responsiveSettings[breakpoint].breakpoint, 
            responsiveSettings.hasOwnProperty(breakpoint)) {
                // loop through the breakpoints and cut out any existing
                // ones with the same breakpoint number, we don't want dupes.
                for (;l >= 0; ) _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint && _.breakpoints.splice(l, 1), 
                l--;
                _.breakpoints.push(currentBreakpoint), _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
            }
            _.breakpoints.sort(function(a, b) {
                return _.options.mobileFirst ? a - b : b - a;
            });
        }
    }, Slick.prototype.reinit = function() {
        var _ = this;
        _.$slides = _.$slideTrack.children(_.options.slide).addClass("slick-slide"), _.slideCount = _.$slides.length, 
        _.currentSlide >= _.slideCount && 0 !== _.currentSlide && (_.currentSlide = _.currentSlide - _.options.slidesToScroll), 
        _.slideCount <= _.options.slidesToShow && (_.currentSlide = 0), _.registerBreakpoints(), 
        _.setProps(), _.setupInfinite(), _.buildArrows(), _.updateArrows(), _.initArrowEvents(), 
        _.buildDots(), _.updateDots(), _.initDotEvents(), _.checkResponsive(!1, !0), _.options.focusOnSelect === !0 && $(_.$slideTrack).children().on("click.slick", _.selectHandler), 
        _.setSlideClasses(0), _.setPosition(), _.$slider.trigger("reInit", [ _ ]), _.options.autoplay === !0 && _.focusHandler();
    }, Slick.prototype.resize = function() {
        var _ = this;
        $(window).width() !== _.windowWidth && (clearTimeout(_.windowDelay), _.windowDelay = window.setTimeout(function() {
            _.windowWidth = $(window).width(), _.checkResponsive(), _.unslicked || _.setPosition();
        }, 50));
    }, Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {
        var _ = this;
        return "boolean" == typeof index ? (removeBefore = index, index = removeBefore === !0 ? 0 : _.slideCount - 1) : index = removeBefore === !0 ? --index : index, 
        _.slideCount < 1 || 0 > index || index > _.slideCount - 1 ? !1 : (_.unload(), removeAll === !0 ? _.$slideTrack.children().remove() : _.$slideTrack.children(this.options.slide).eq(index).remove(), 
        _.$slides = _.$slideTrack.children(this.options.slide), _.$slideTrack.children(this.options.slide).detach(), 
        _.$slideTrack.append(_.$slides), _.$slidesCache = _.$slides, void _.reinit());
    }, Slick.prototype.setCSS = function(position) {
        var x, y, _ = this, positionProps = {};
        _.options.rtl === !0 && (position = -position), x = "left" == _.positionProp ? Math.ceil(position) + "px" : "0px", 
        y = "top" == _.positionProp ? Math.ceil(position) + "px" : "0px", positionProps[_.positionProp] = position, 
        _.transformsEnabled === !1 ? _.$slideTrack.css(positionProps) : (positionProps = {}, 
        _.cssTransitions === !1 ? (positionProps[_.animType] = "translate(" + x + ", " + y + ")", 
        _.$slideTrack.css(positionProps)) : (positionProps[_.animType] = "translate3d(" + x + ", " + y + ", 0px)", 
        _.$slideTrack.css(positionProps)));
    }, Slick.prototype.setDimensions = function() {
        var _ = this;
        _.options.vertical === !1 ? _.options.centerMode === !0 && _.$list.css({
            padding: "0px " + _.options.centerPadding
        }) : (_.$list.height(_.$slides.first().outerHeight(!0) * _.options.slidesToShow), 
        _.options.centerMode === !0 && _.$list.css({
            padding: _.options.centerPadding + " 0px"
        })), _.listWidth = _.$list.width(), _.listHeight = _.$list.height(), _.options.vertical === !1 && _.options.variableWidth === !1 ? (_.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow), 
        _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children(".slick-slide").length))) : _.options.variableWidth === !0 ? _.$slideTrack.width(5e3 * _.slideCount) : (_.slideWidth = Math.ceil(_.listWidth), 
        _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(!0) * _.$slideTrack.children(".slick-slide").length)));
        var offset = _.$slides.first().outerWidth(!0) - _.$slides.first().width();
        _.options.variableWidth === !1 && _.$slideTrack.children(".slick-slide").width(_.slideWidth - offset);
    }, Slick.prototype.setFade = function() {
        var targetLeft, _ = this;
        _.$slides.each(function(index, element) {
            targetLeft = _.slideWidth * index * -1, _.options.rtl === !0 ? $(element).css({
                position: "relative",
                right: targetLeft,
                top: 0,
                zIndex: _.options.zIndex - 2,
                opacity: 0
            }) : $(element).css({
                position: "relative",
                left: targetLeft,
                top: 0,
                zIndex: _.options.zIndex - 2,
                opacity: 0
            });
        }), _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });
    }, Slick.prototype.setHeight = function() {
        var _ = this;
        if (1 === _.options.slidesToShow && _.options.adaptiveHeight === !0 && _.options.vertical === !1) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(!0);
            _.$list.css("height", targetHeight);
        }
    }, Slick.prototype.setOption = Slick.prototype.slickSetOption = function(option, value, refresh) {
        var l, item, _ = this;
        if ("responsive" === option && "array" === $.type(value)) for (item in value) if ("array" !== $.type(_.options.responsive)) _.options.responsive = [ value[item] ]; else {
            // loop through the responsive object and splice out duplicates.
            for (l = _.options.responsive.length - 1; l >= 0; ) _.options.responsive[l].breakpoint === value[item].breakpoint && _.options.responsive.splice(l, 1), 
            l--;
            _.options.responsive.push(value[item]);
        } else _.options[option] = value;
        refresh === !0 && (_.unload(), _.reinit());
    }, Slick.prototype.setPosition = function() {
        var _ = this;
        _.setDimensions(), _.setHeight(), _.options.fade === !1 ? _.setCSS(_.getLeft(_.currentSlide)) : _.setFade(), 
        _.$slider.trigger("setPosition", [ _ ]);
    }, Slick.prototype.setProps = function() {
        var _ = this, bodyStyle = document.body.style;
        _.positionProp = _.options.vertical === !0 ? "top" : "left", "top" === _.positionProp ? _.$slider.addClass("slick-vertical") : _.$slider.removeClass("slick-vertical"), 
        (void 0 !== bodyStyle.WebkitTransition || void 0 !== bodyStyle.MozTransition || void 0 !== bodyStyle.msTransition) && _.options.useCSS === !0 && (_.cssTransitions = !0), 
        _.options.fade && ("number" == typeof _.options.zIndex ? _.options.zIndex < 3 && (_.options.zIndex = 3) : _.options.zIndex = _.defaults.zIndex), 
        void 0 !== bodyStyle.OTransform && (_.animType = "OTransform", _.transformType = "-o-transform", 
        _.transitionType = "OTransition", void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.webkitPerspective && (_.animType = !1)), 
        void 0 !== bodyStyle.MozTransform && (_.animType = "MozTransform", _.transformType = "-moz-transform", 
        _.transitionType = "MozTransition", void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.MozPerspective && (_.animType = !1)), 
        void 0 !== bodyStyle.webkitTransform && (_.animType = "webkitTransform", _.transformType = "-webkit-transform", 
        _.transitionType = "webkitTransition", void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.webkitPerspective && (_.animType = !1)), 
        void 0 !== bodyStyle.msTransform && (_.animType = "msTransform", _.transformType = "-ms-transform", 
        _.transitionType = "msTransition", void 0 === bodyStyle.msTransform && (_.animType = !1)), 
        void 0 !== bodyStyle.transform && _.animType !== !1 && (_.animType = "transform", 
        _.transformType = "transform", _.transitionType = "transition"), _.transformsEnabled = null !== _.animType && _.animType !== !1;
    }, Slick.prototype.setSlideClasses = function(index) {
        var centerOffset, allSlides, indexOffset, remainder, _ = this;
        allSlides = _.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), 
        _.$slides.eq(index).addClass("slick-current"), _.options.centerMode === !0 ? (centerOffset = Math.floor(_.options.slidesToShow / 2), 
        _.options.infinite === !0 && (index >= centerOffset && index <= _.slideCount - 1 - centerOffset ? _.$slides.slice(index - centerOffset, index + centerOffset + 1).addClass("slick-active").attr("aria-hidden", "false") : (indexOffset = _.options.slidesToShow + index, 
        allSlides.slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2).addClass("slick-active").attr("aria-hidden", "false")), 
        0 === index ? allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass("slick-center") : index === _.slideCount - 1 && allSlides.eq(_.options.slidesToShow).addClass("slick-center")), 
        _.$slides.eq(index).addClass("slick-center")) : index >= 0 && index <= _.slideCount - _.options.slidesToShow ? _.$slides.slice(index, index + _.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : allSlides.length <= _.options.slidesToShow ? allSlides.addClass("slick-active").attr("aria-hidden", "false") : (remainder = _.slideCount % _.options.slidesToShow, 
        indexOffset = _.options.infinite === !0 ? _.options.slidesToShow + index : index, 
        _.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow ? allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass("slick-active").attr("aria-hidden", "false") : allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false")), 
        "ondemand" === _.options.lazyLoad && _.lazyLoad();
    }, Slick.prototype.setupInfinite = function() {
        var i, slideIndex, infiniteCount, _ = this;
        if (_.options.fade === !0 && (_.options.centerMode = !1), _.options.infinite === !0 && _.options.fade === !1 && (slideIndex = null, 
        _.slideCount > _.options.slidesToShow)) {
            for (infiniteCount = _.options.centerMode === !0 ? _.options.slidesToShow + 1 : _.options.slidesToShow, 
            i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) slideIndex = i - 1, 
            $(_.$slides[slideIndex]).clone(!0).attr("id", "").attr("data-slick-index", slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass("slick-cloned");
            for (i = 0; infiniteCount > i; i += 1) slideIndex = i, $(_.$slides[slideIndex]).clone(!0).attr("id", "").attr("data-slick-index", slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass("slick-cloned");
            _.$slideTrack.find(".slick-cloned").find("[id]").each(function() {
                $(this).attr("id", "");
            });
        }
    }, Slick.prototype.setPaused = function(paused) {
        var _ = this;
        _.options.autoplay === !0 && _.options.pauseOnHover === !0 && (_.paused = paused, 
        paused ? _.autoPlayClear() : _.autoPlay());
    }, Slick.prototype.selectHandler = function(event) {
        var _ = this, targetElement = $(event.target).is(".slick-slide") ? $(event.target) : $(event.target).parents(".slick-slide"), index = parseInt(targetElement.attr("data-slick-index"));
        return index || (index = 0), _.slideCount <= _.options.slidesToShow ? (_.setSlideClasses(index), 
        void _.asNavFor(index)) : void _.slideHandler(index);
    }, Slick.prototype.slideHandler = function(index, sync, dontAnimate) {
        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null, _ = this;
        return sync = sync || !1, _.animating === !0 && _.options.waitForAnimate === !0 || _.options.fade === !0 && _.currentSlide === index || _.slideCount <= _.options.slidesToShow ? void 0 : (sync === !1 && _.asNavFor(index), 
        targetSlide = index, targetLeft = _.getLeft(targetSlide), slideLeft = _.getLeft(_.currentSlide), 
        _.currentLeft = null === _.swipeLeft ? slideLeft : _.swipeLeft, _.options.infinite === !1 && _.options.centerMode === !1 && (0 > index || index > _.getDotCount() * _.options.slidesToScroll) ? void (_.options.fade === !1 && (targetSlide = _.currentSlide, 
        dontAnimate !== !0 ? _.animateSlide(slideLeft, function() {
            _.postSlide(targetSlide);
        }) : _.postSlide(targetSlide))) : _.options.infinite === !1 && _.options.centerMode === !0 && (0 > index || index > _.slideCount - _.options.slidesToScroll) ? void (_.options.fade === !1 && (targetSlide = _.currentSlide, 
        dontAnimate !== !0 ? _.animateSlide(slideLeft, function() {
            _.postSlide(targetSlide);
        }) : _.postSlide(targetSlide))) : (_.options.autoplay === !0 && clearInterval(_.autoPlayTimer), 
        animSlide = 0 > targetSlide ? _.slideCount % _.options.slidesToScroll !== 0 ? _.slideCount - _.slideCount % _.options.slidesToScroll : _.slideCount + targetSlide : targetSlide >= _.slideCount ? _.slideCount % _.options.slidesToScroll !== 0 ? 0 : targetSlide - _.slideCount : targetSlide, 
        _.animating = !0, _.$slider.trigger("beforeChange", [ _, _.currentSlide, animSlide ]), 
        oldSlide = _.currentSlide, _.currentSlide = animSlide, _.setSlideClasses(_.currentSlide), 
        _.updateDots(), _.updateArrows(), _.options.fade === !0 ? (dontAnimate !== !0 ? (_.fadeSlideOut(oldSlide), 
        _.fadeSlide(animSlide, function() {
            _.postSlide(animSlide);
        })) : _.postSlide(animSlide), void _.animateHeight()) : void (dontAnimate !== !0 ? _.animateSlide(targetLeft, function() {
            _.postSlide(animSlide);
        }) : _.postSlide(animSlide))));
    }, Slick.prototype.startLoad = function() {
        var _ = this;
        _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && (_.$prevArrow.hide(), 
        _.$nextArrow.hide()), _.options.dots === !0 && _.slideCount > _.options.slidesToShow && _.$dots.hide(), 
        _.$slider.addClass("slick-loading");
    }, Slick.prototype.swipeDirection = function() {
        var xDist, yDist, r, swipeAngle, _ = this;
        return xDist = _.touchObject.startX - _.touchObject.curX, yDist = _.touchObject.startY - _.touchObject.curY, 
        r = Math.atan2(yDist, xDist), swipeAngle = Math.round(180 * r / Math.PI), 0 > swipeAngle && (swipeAngle = 360 - Math.abs(swipeAngle)), 
        45 >= swipeAngle && swipeAngle >= 0 ? _.options.rtl === !1 ? "left" : "right" : 360 >= swipeAngle && swipeAngle >= 315 ? _.options.rtl === !1 ? "left" : "right" : swipeAngle >= 135 && 225 >= swipeAngle ? _.options.rtl === !1 ? "right" : "left" : _.options.verticalSwiping === !0 ? swipeAngle >= 35 && 135 >= swipeAngle ? "left" : "right" : "vertical";
    }, Slick.prototype.swipeEnd = function(event) {
        var slideCount, _ = this;
        if (_.dragging = !1, _.shouldClick = _.touchObject.swipeLength > 10 ? !1 : !0, void 0 === _.touchObject.curX) return !1;
        if (_.touchObject.edgeHit === !0 && _.$slider.trigger("edge", [ _, _.swipeDirection() ]), 
        _.touchObject.swipeLength >= _.touchObject.minSwipe) switch (_.swipeDirection()) {
          case "left":
            slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount(), 
            _.slideHandler(slideCount), _.currentDirection = 0, _.touchObject = {}, _.$slider.trigger("swipe", [ _, "left" ]);
            break;

          case "right":
            slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount(), 
            _.slideHandler(slideCount), _.currentDirection = 1, _.touchObject = {}, _.$slider.trigger("swipe", [ _, "right" ]);
        } else _.touchObject.startX !== _.touchObject.curX && (_.slideHandler(_.currentSlide), 
        _.touchObject = {});
    }, Slick.prototype.swipeHandler = function(event) {
        var _ = this;
        if (!(_.options.swipe === !1 || "ontouchend" in document && _.options.swipe === !1 || _.options.draggable === !1 && -1 !== event.type.indexOf("mouse"))) switch (_.touchObject.fingerCount = event.originalEvent && void 0 !== event.originalEvent.touches ? event.originalEvent.touches.length : 1, 
        _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold, _.options.verticalSwiping === !0 && (_.touchObject.minSwipe = _.listHeight / _.options.touchThreshold), 
        event.data.action) {
          case "start":
            _.swipeStart(event);
            break;

          case "move":
            _.swipeMove(event);
            break;

          case "end":
            _.swipeEnd(event);
        }
    }, Slick.prototype.swipeMove = function(event) {
        var curLeft, swipeDirection, swipeLength, positionOffset, touches, _ = this;
        return touches = void 0 !== event.originalEvent ? event.originalEvent.touches : null, 
        !_.dragging || touches && 1 !== touches.length ? !1 : (curLeft = _.getLeft(_.currentSlide), 
        _.touchObject.curX = void 0 !== touches ? touches[0].pageX : event.clientX, _.touchObject.curY = void 0 !== touches ? touches[0].pageY : event.clientY, 
        _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2))), 
        _.options.verticalSwiping === !0 && (_.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)))), 
        swipeDirection = _.swipeDirection(), "vertical" !== swipeDirection ? (void 0 !== event.originalEvent && _.touchObject.swipeLength > 4 && event.preventDefault(), 
        positionOffset = (_.options.rtl === !1 ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1), 
        _.options.verticalSwiping === !0 && (positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1), 
        swipeLength = _.touchObject.swipeLength, _.touchObject.edgeHit = !1, _.options.infinite === !1 && (0 === _.currentSlide && "right" === swipeDirection || _.currentSlide >= _.getDotCount() && "left" === swipeDirection) && (swipeLength = _.touchObject.swipeLength * _.options.edgeFriction, 
        _.touchObject.edgeHit = !0), _.options.vertical === !1 ? _.swipeLeft = curLeft + swipeLength * positionOffset : _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset, 
        _.options.verticalSwiping === !0 && (_.swipeLeft = curLeft + swipeLength * positionOffset), 
        _.options.fade === !0 || _.options.touchMove === !1 ? !1 : _.animating === !0 ? (_.swipeLeft = null, 
        !1) : void _.setCSS(_.swipeLeft)) : void 0);
    }, Slick.prototype.swipeStart = function(event) {
        var touches, _ = this;
        return 1 !== _.touchObject.fingerCount || _.slideCount <= _.options.slidesToShow ? (_.touchObject = {}, 
        !1) : (void 0 !== event.originalEvent && void 0 !== event.originalEvent.touches && (touches = event.originalEvent.touches[0]), 
        _.touchObject.startX = _.touchObject.curX = void 0 !== touches ? touches.pageX : event.clientX, 
        _.touchObject.startY = _.touchObject.curY = void 0 !== touches ? touches.pageY : event.clientY, 
        void (_.dragging = !0));
    }, Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {
        var _ = this;
        null !== _.$slidesCache && (_.unload(), _.$slideTrack.children(this.options.slide).detach(), 
        _.$slidesCache.appendTo(_.$slideTrack), _.reinit());
    }, Slick.prototype.unload = function() {
        var _ = this;
        $(".slick-cloned", _.$slider).remove(), _.$dots && _.$dots.remove(), _.$prevArrow && _.htmlExpr.test(_.options.prevArrow) && _.$prevArrow.remove(), 
        _.$nextArrow && _.htmlExpr.test(_.options.nextArrow) && _.$nextArrow.remove(), _.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");
    }, Slick.prototype.unslick = function(fromBreakpoint) {
        var _ = this;
        _.$slider.trigger("unslick", [ _, fromBreakpoint ]), _.destroy();
    }, Slick.prototype.updateArrows = function() {
        var centerOffset, _ = this;
        centerOffset = Math.floor(_.options.slidesToShow / 2), _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && !_.options.infinite && (_.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 
        _.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 0 === _.currentSlide ? (_.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true"), 
        _.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : _.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === !1 ? (_.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), 
        _.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : _.currentSlide >= _.slideCount - 1 && _.options.centerMode === !0 && (_.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), 
        _.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")));
    }, Slick.prototype.updateDots = function() {
        var _ = this;
        null !== _.$dots && (_.$dots.find("li").removeClass("slick-active").attr("aria-hidden", "true"), 
        _.$dots.find("li").eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden", "false"));
    }, Slick.prototype.visibility = function() {
        var _ = this;
        document[_.hidden] ? (_.paused = !0, _.autoPlayClear()) : _.options.autoplay === !0 && (_.paused = !1, 
        _.autoPlay());
    }, Slick.prototype.initADA = function() {
        var _ = this;
        _.$slides.add(_.$slideTrack.find(".slick-cloned")).attr({
            "aria-hidden": "true",
            tabindex: "-1"
        }).find("a, input, button, select").attr({
            tabindex: "-1"
        }), _.$slideTrack.attr("role", "listbox"), _.$slides.not(_.$slideTrack.find(".slick-cloned")).each(function(i) {
            $(this).attr({
                role: "option",
                "aria-describedby": "slick-slide" + _.instanceUid + i
            });
        }), null !== _.$dots && _.$dots.attr("role", "tablist").find("li").each(function(i) {
            $(this).attr({
                role: "presentation",
                "aria-selected": "false",
                "aria-controls": "navigation" + _.instanceUid + i,
                id: "slick-slide" + _.instanceUid + i
            });
        }).first().attr("aria-selected", "true").end().find("button").attr("role", "button").end().closest("div").attr("role", "toolbar"), 
        _.activateADA();
    }, Slick.prototype.activateADA = function() {
        var _ = this, _isSlideOnFocus = _.$slider.find("*").is(":focus");
        // _isSlideOnFocus = _.$slides.is(':focus') || _.$slides.find('*').is(':focus');
        _.$slideTrack.find(".slick-active").attr({
            "aria-hidden": "false",
            tabindex: "0"
        }).find("a, input, button, select").attr({
            tabindex: "0"
        }), _isSlideOnFocus && _.$slideTrack.find(".slick-active").focus();
    }, Slick.prototype.focusHandler = function() {
        var _ = this;
        _.$slider.on("focus.slick blur.slick", "*", function(event) {
            event.stopImmediatePropagation();
            var sf = $(this);
            setTimeout(function() {
                _.isPlay && (sf.is(":focus") ? (_.autoPlayClear(), _.paused = !0) : (_.paused = !1, 
                _.autoPlay()));
            }, 0);
        });
    }, $.fn.slick = function() {
        var ret, _ = this, opt = arguments[0], args = Array.prototype.slice.call(arguments, 1), l = _.length, i = 0;
        for (i; l > i; i++) if ("object" == typeof opt || "undefined" == typeof opt ? _[i].slick = new Slick(_[i], opt) : ret = _[i].slick[opt].apply(_[i].slick, args), 
        "undefined" != typeof ret) return ret;
        return _;
    };
}), function() {
    var MutationObserver, Util, WeakMap, getComputedStyle, getComputedStyleRX, bind = function(fn, me) {
        return function() {
            return fn.apply(me, arguments);
        };
    }, indexOf = [].indexOf || function(item) {
        for (var i = 0, l = this.length; l > i; i++) if (i in this && this[i] === item) return i;
        return -1;
    };
    Util = function() {
        function Util() {}
        return Util.prototype.extend = function(custom, defaults) {
            var key, value;
            for (key in defaults) value = defaults[key], null == custom[key] && (custom[key] = value);
            return custom;
        }, Util.prototype.isMobile = function(agent) {
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(agent);
        }, Util.prototype.createEvent = function(event, bubble, cancel, detail) {
            var customEvent;
            return null == bubble && (bubble = !1), null == cancel && (cancel = !1), null == detail && (detail = null), 
            null != document.createEvent ? (customEvent = document.createEvent("CustomEvent"), 
            customEvent.initCustomEvent(event, bubble, cancel, detail)) : null != document.createEventObject ? (customEvent = document.createEventObject(), 
            customEvent.eventType = event) : customEvent.eventName = event, customEvent;
        }, Util.prototype.emitEvent = function(elem, event) {
            return null != elem.dispatchEvent ? elem.dispatchEvent(event) : event in (null != elem) ? elem[event]() : "on" + event in (null != elem) ? elem["on" + event]() : void 0;
        }, Util.prototype.addEvent = function(elem, event, fn) {
            return null != elem.addEventListener ? elem.addEventListener(event, fn, !1) : null != elem.attachEvent ? elem.attachEvent("on" + event, fn) : elem[event] = fn;
        }, Util.prototype.removeEvent = function(elem, event, fn) {
            return null != elem.removeEventListener ? elem.removeEventListener(event, fn, !1) : null != elem.detachEvent ? elem.detachEvent("on" + event, fn) : delete elem[event];
        }, Util.prototype.innerHeight = function() {
            return "innerHeight" in window ? window.innerHeight : document.documentElement.clientHeight;
        }, Util;
    }(), WeakMap = this.WeakMap || this.MozWeakMap || (WeakMap = function() {
        function WeakMap() {
            this.keys = [], this.values = [];
        }
        return WeakMap.prototype.get = function(key) {
            var i, item, j, len, ref;
            for (ref = this.keys, i = j = 0, len = ref.length; len > j; i = ++j) if (item = ref[i], 
            item === key) return this.values[i];
        }, WeakMap.prototype.set = function(key, value) {
            var i, item, j, len, ref;
            for (ref = this.keys, i = j = 0, len = ref.length; len > j; i = ++j) if (item = ref[i], 
            item === key) return void (this.values[i] = value);
            return this.keys.push(key), this.values.push(value);
        }, WeakMap;
    }()), MutationObserver = this.MutationObserver || this.WebkitMutationObserver || this.MozMutationObserver || (MutationObserver = function() {
        function MutationObserver() {
            "undefined" != typeof console && null !== console && console.warn("MutationObserver is not supported by your browser."), 
            "undefined" != typeof console && null !== console && console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content.");
        }
        return MutationObserver.notSupported = !0, MutationObserver.prototype.observe = function() {}, 
        MutationObserver;
    }()), getComputedStyle = this.getComputedStyle || function(el, pseudo) {
        return this.getPropertyValue = function(prop) {
            var ref;
            return "float" === prop && (prop = "styleFloat"), getComputedStyleRX.test(prop) && prop.replace(getComputedStyleRX, function(_, _char) {
                return _char.toUpperCase();
            }), (null != (ref = el.currentStyle) ? ref[prop] : void 0) || null;
        }, this;
    }, getComputedStyleRX = /(\-([a-z]){1})/g, this.WOW = function() {
        function WOW(options) {
            null == options && (options = {}), this.scrollCallback = bind(this.scrollCallback, this), 
            this.scrollHandler = bind(this.scrollHandler, this), this.resetAnimation = bind(this.resetAnimation, this), 
            this.start = bind(this.start, this), this.scrolled = !0, this.config = this.util().extend(options, this.defaults), 
            null != options.scrollContainer && (this.config.scrollContainer = document.querySelector(options.scrollContainer)), 
            this.animationNameCache = new WeakMap(), this.wowEvent = this.util().createEvent(this.config.boxClass);
        }
        return WOW.prototype.defaults = {
            boxClass: "wow",
            animateClass: "animated",
            offset: 0,
            mobile: !0,
            live: !0,
            callback: null,
            scrollContainer: null
        }, WOW.prototype.init = function() {
            var ref;
            return this.element = window.document.documentElement, "interactive" === (ref = document.readyState) || "complete" === ref ? this.start() : this.util().addEvent(document, "DOMContentLoaded", this.start), 
            this.finished = [];
        }, WOW.prototype.start = function() {
            var box, j, len, ref;
            if (this.stopped = !1, this.boxes = function() {
                var j, len, ref, results;
                for (ref = this.element.querySelectorAll("." + this.config.boxClass), results = [], 
                j = 0, len = ref.length; len > j; j++) box = ref[j], results.push(box);
                return results;
            }.call(this), this.all = function() {
                var j, len, ref, results;
                for (ref = this.boxes, results = [], j = 0, len = ref.length; len > j; j++) box = ref[j], 
                results.push(box);
                return results;
            }.call(this), this.boxes.length) if (this.disabled()) this.resetStyle(); else for (ref = this.boxes, 
            j = 0, len = ref.length; len > j; j++) box = ref[j], this.applyStyle(box, !0);
            return this.disabled() || (this.util().addEvent(this.config.scrollContainer || window, "scroll", this.scrollHandler), 
            this.util().addEvent(window, "resize", this.scrollHandler), this.interval = setInterval(this.scrollCallback, 50)), 
            this.config.live ? new MutationObserver(function(_this) {
                return function(records) {
                    var k, len1, node, record, results;
                    for (results = [], k = 0, len1 = records.length; len1 > k; k++) record = records[k], 
                    results.push(function() {
                        var l, len2, ref1, results1;
                        for (ref1 = record.addedNodes || [], results1 = [], l = 0, len2 = ref1.length; len2 > l; l++) node = ref1[l], 
                        results1.push(this.doSync(node));
                        return results1;
                    }.call(_this));
                    return results;
                };
            }(this)).observe(document.body, {
                childList: !0,
                subtree: !0
            }) : void 0;
        }, WOW.prototype.stop = function() {
            return this.stopped = !0, this.util().removeEvent(this.config.scrollContainer || window, "scroll", this.scrollHandler), 
            this.util().removeEvent(window, "resize", this.scrollHandler), null != this.interval ? clearInterval(this.interval) : void 0;
        }, WOW.prototype.sync = function(element) {
            return MutationObserver.notSupported ? this.doSync(this.element) : void 0;
        }, WOW.prototype.doSync = function(element) {
            var box, j, len, ref, results;
            if (null == element && (element = this.element), 1 === element.nodeType) {
                for (element = element.parentNode || element, ref = element.querySelectorAll("." + this.config.boxClass), 
                results = [], j = 0, len = ref.length; len > j; j++) box = ref[j], indexOf.call(this.all, box) < 0 ? (this.boxes.push(box), 
                this.all.push(box), this.stopped || this.disabled() ? this.resetStyle() : this.applyStyle(box, !0), 
                results.push(this.scrolled = !0)) : results.push(void 0);
                return results;
            }
        }, WOW.prototype.show = function(box) {
            return this.applyStyle(box), box.className = box.className + " " + this.config.animateClass, 
            null != this.config.callback && this.config.callback(box), this.util().emitEvent(box, this.wowEvent), 
            this.util().addEvent(box, "animationend", this.resetAnimation), this.util().addEvent(box, "oanimationend", this.resetAnimation), 
            this.util().addEvent(box, "webkitAnimationEnd", this.resetAnimation), this.util().addEvent(box, "MSAnimationEnd", this.resetAnimation), 
            box;
        }, WOW.prototype.applyStyle = function(box, hidden) {
            var delay, duration, iteration;
            return duration = box.getAttribute("data-wow-duration"), delay = box.getAttribute("data-wow-delay"), 
            iteration = box.getAttribute("data-wow-iteration"), this.animate(function(_this) {
                return function() {
                    return _this.customStyle(box, hidden, duration, delay, iteration);
                };
            }(this));
        }, WOW.prototype.animate = function() {
            return "requestAnimationFrame" in window ? function(callback) {
                return window.requestAnimationFrame(callback);
            } : function(callback) {
                return callback();
            };
        }(), WOW.prototype.resetStyle = function() {
            var box, j, len, ref, results;
            for (ref = this.boxes, results = [], j = 0, len = ref.length; len > j; j++) box = ref[j], 
            results.push(box.style.visibility = "visible");
            return results;
        }, WOW.prototype.resetAnimation = function(event) {
            var target;
            return event.type.toLowerCase().indexOf("animationend") >= 0 ? (target = event.target || event.srcElement, 
            target.className = target.className.replace(this.config.animateClass, "").trim()) : void 0;
        }, WOW.prototype.customStyle = function(box, hidden, duration, delay, iteration) {
            return hidden && this.cacheAnimationName(box), box.style.visibility = hidden ? "hidden" : "visible", 
            duration && this.vendorSet(box.style, {
                animationDuration: duration
            }), delay && this.vendorSet(box.style, {
                animationDelay: delay
            }), iteration && this.vendorSet(box.style, {
                animationIterationCount: iteration
            }), this.vendorSet(box.style, {
                animationName: hidden ? "none" : this.cachedAnimationName(box)
            }), box;
        }, WOW.prototype.vendors = [ "moz", "webkit" ], WOW.prototype.vendorSet = function(elem, properties) {
            var name, results, value, vendor;
            results = [];
            for (name in properties) value = properties[name], elem["" + name] = value, results.push(function() {
                var j, len, ref, results1;
                for (ref = this.vendors, results1 = [], j = 0, len = ref.length; len > j; j++) vendor = ref[j], 
                results1.push(elem["" + vendor + name.charAt(0).toUpperCase() + name.substr(1)] = value);
                return results1;
            }.call(this));
            return results;
        }, WOW.prototype.vendorCSS = function(elem, property) {
            var j, len, ref, result, style, vendor;
            for (style = getComputedStyle(elem), result = style.getPropertyCSSValue(property), 
            ref = this.vendors, j = 0, len = ref.length; len > j; j++) vendor = ref[j], result = result || style.getPropertyCSSValue("-" + vendor + "-" + property);
            return result;
        }, WOW.prototype.animationName = function(box) {
            var animationName;
            try {
                animationName = this.vendorCSS(box, "animation-name").cssText;
            } catch (error) {
                animationName = getComputedStyle(box).getPropertyValue("animation-name");
            }
            return "none" === animationName ? "" : animationName;
        }, WOW.prototype.cacheAnimationName = function(box) {
            return this.animationNameCache.set(box, this.animationName(box));
        }, WOW.prototype.cachedAnimationName = function(box) {
            return this.animationNameCache.get(box);
        }, WOW.prototype.scrollHandler = function() {
            return this.scrolled = !0;
        }, WOW.prototype.scrollCallback = function() {
            var box;
            return !this.scrolled || (this.scrolled = !1, this.boxes = function() {
                var j, len, ref, results;
                for (ref = this.boxes, results = [], j = 0, len = ref.length; len > j; j++) box = ref[j], 
                box && (this.isVisible(box) ? this.show(box) : results.push(box));
                return results;
            }.call(this), this.boxes.length || this.config.live) ? void 0 : this.stop();
        }, WOW.prototype.offsetTop = function(element) {
            for (var top; void 0 === element.offsetTop; ) element = element.parentNode;
            for (top = element.offsetTop; element = element.offsetParent; ) top += element.offsetTop;
            return top;
        }, WOW.prototype.isVisible = function(box) {
            var bottom, offset, top, viewBottom, viewTop;
            return offset = box.getAttribute("data-wow-offset") || this.config.offset, viewTop = this.config.scrollContainer && this.config.scrollContainer.scrollTop || window.pageYOffset, 
            viewBottom = viewTop + Math.min(this.element.clientHeight, this.util().innerHeight()) - offset, 
            top = this.offsetTop(box), bottom = top + box.clientHeight, viewBottom >= top && bottom >= viewTop;
        }, WOW.prototype.util = function() {
            return null != this._util ? this._util : this._util = new Util();
        }, WOW.prototype.disabled = function() {
            return !this.config.mobile && this.util().isMobile(navigator.userAgent);
        }, WOW;
    }();
}.call(this);